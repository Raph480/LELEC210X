
hands_on_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009f50  08009f50  0000af50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a300  0800a300  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a300  0800a300  0000b300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a308  0800a308  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a308  0800a308  0000b308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a30c  0800a30c  0000b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a310  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  200001d4  0800a4e4  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800a4e4  0000c53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a692  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f1  00000000  00000000  00026896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e48b  00000000  00000000  0002c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4d3  00000000  00000000  0005ae6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f91d  00000000  00000000  00077341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196c5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007020  00000000  00000000  00196ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0019dcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f38 	.word	0x08009f38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08009f38 	.word	0x08009f38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000edc:	4a31      	ldr	r2, [pc, #196]	@ (8000fa4 <MX_ADC1_Init+0xec>)
 8000ede:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000ee2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8000ee6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efa:	4b29      	ldr	r3, [pc, #164]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f00:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f06:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f1c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f32:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f38:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	4817      	ldr	r0, [pc, #92]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f42:	f002 f917 	bl	8003174 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f4c:	f000 fb78 	bl	8001640 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f5c:	f002 ff7c 	bl	8003e58 <HAL_ADCEx_MultiModeConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f66:	f000 fb6b 	bl	8001640 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_ADC1_Init+0xf0>)
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f76:	237f      	movs	r3, #127	@ 0x7f
 8000f78:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_ADC1_Init+0xe8>)
 8000f88:	f002 fa48 	bl	800341c <HAL_ADC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f92:	f000 fb55 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001f0 	.word	0x200001f0
 8000fa4:	50040000 	.word	0x50040000
 8000fa8:	14f00020 	.word	0x14f00020

08000fac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0ac      	sub	sp, #176	@ 0xb0
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	228c      	movs	r2, #140	@ 0x8c
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 f880 	bl	80080d2 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a35      	ldr	r2, [pc, #212]	@ (80010ac <HAL_ADC_MspInit+0x100>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d163      	bne.n	80010a4 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fe2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 faa4 	bl	800553c <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000ffa:	f000 fb21 	bl	8001640 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a2b      	ldr	r2, [pc, #172]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 8001004:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a25      	ldr	r2, [pc, #148]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_ADC_MspInit+0x104>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102e:	2301      	movs	r3, #1
 8001030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001034:	2303      	movs	r3, #3
 8001036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f003 fa2f 	bl	80044ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_ADC_MspInit+0x10c>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 800106e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001072:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800107c:	4b0d      	ldr	r3, [pc, #52]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 800107e:	2220      	movs	r2, #32
 8001080:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001088:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 800108a:	f003 f8a7 	bl	80041dc <HAL_DMA_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 8001094:	f000 fad4 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 800109c:	651a      	str	r2, [r3, #80]	@ 0x50
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <HAL_ADC_MspInit+0x108>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	37b0      	adds	r7, #176	@ 0xb0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	50040000 	.word	0x50040000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20000258 	.word	0x20000258
 80010b8:	40020008 	.word	0x40020008

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_DMA_Init+0x38>)
 80010c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <MX_DMA_Init+0x38>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_DMA_Init+0x38>)
 80010d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2101      	movs	r1, #1
 80010de:	200b      	movs	r0, #11
 80010e0:	f003 f845 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e4:	200b      	movs	r0, #11
 80010e6:	f003 f85e 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <eval_radio>:
#include "main.h"
#include "s2lp.h"


void eval_radio(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09e      	sub	sp, #120	@ 0x78
 80010fc:	af00      	add	r7, sp, #0
	DEBUG_PRINT("[DBG] Radio evaluation mode\r\n");

	uint8_t buf[PAYLOAD_LEN];
	for (uint16_t i=0; i < PAYLOAD_LEN; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8001104:	e00d      	b.n	8001122 <eval_radio+0x2a>
		buf[i] = (uint8_t) (i & 0xFF);
 8001106:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800110a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	3378      	adds	r3, #120	@ 0x78
 8001112:	443b      	add	r3, r7
 8001114:	f803 2c74 	strb.w	r2, [r3, #-116]
	for (uint16_t i=0; i < PAYLOAD_LEN; i++) {
 8001118:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800111c:	3301      	adds	r3, #1
 800111e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8001122:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001126:	2b63      	cmp	r3, #99	@ 0x63
 8001128:	d9ed      	bls.n	8001106 <eval_radio+0xe>
	}

	for (int32_t lvl = MIN_PA_LEVEL; lvl <= MAX_PA_LEVEL; lvl+=5) {  //lvl++
 800112a:	2300      	movs	r3, #0
 800112c:	673b      	str	r3, [r7, #112]	@ 0x70
 800112e:	e047      	b.n	80011c0 <eval_radio+0xc8>
		btn_press = 0;
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <eval_radio+0xd4>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
		DEBUG_PRINT("=== Press button B1 to start evaluation at %ld dBm\r\n", lvl);
		while (!btn_press) {
 8001136:	e000      	b.n	800113a <eval_radio+0x42>
			__WFI();
 8001138:	bf30      	wfi
		while (!btn_press) {
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <eval_radio+0xd4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f9      	beq.n	8001138 <eval_radio+0x40>
		}

		S2LP_SetPALeveldBm(lvl);
 8001144:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001146:	f001 faa9 	bl	800269c <S2LP_SetPALeveldBm>
		DEBUG_PRINT("=== Configured PA level to %ld dBm, sending %d packets at this level\r\n", lvl, N_PACKETS);

		for (uint16_t i=0; i < N_PACKETS; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8001150:	e02f      	b.n	80011b2 <eval_radio+0xba>
			HAL_StatusTypeDef err = S2LP_Send(buf, PAYLOAD_LEN);
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fc5c 	bl	8001a14 <S2LP_Send>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			if (err) {
 8001162:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <eval_radio+0x76>
				Error_Handler();
 800116a:	f000 fa69 	bl	8001640 <Error_Handler>
			}

			for(uint16_t j=0; j < PACKET_DELAY; j++) {
 800116e:	2300      	movs	r3, #0
 8001170:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8001174:	e014      	b.n	80011a0 <eval_radio+0xa8>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	4815      	ldr	r0, [pc, #84]	@ (80011d0 <eval_radio+0xd8>)
 800117c:	f003 fb28 	bl	80047d0 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8001180:	200a      	movs	r0, #10
 8001182:	f001 fe0d 	bl	8002da0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2180      	movs	r1, #128	@ 0x80
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <eval_radio+0xd8>)
 800118c:	f003 fb20 	bl	80047d0 <HAL_GPIO_WritePin>
				HAL_Delay(10);
 8001190:	200a      	movs	r0, #10
 8001192:	f001 fe05 	bl	8002da0 <HAL_Delay>
			for(uint16_t j=0; j < PACKET_DELAY; j++) {
 8001196:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800119a:	3301      	adds	r3, #1
 800119c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80011a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0e6      	beq.n	8001176 <eval_radio+0x7e>
		for (uint16_t i=0; i < N_PACKETS; i++) {
 80011a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80011ac:	3301      	adds	r3, #1
 80011ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80011b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80011b6:	2b63      	cmp	r3, #99	@ 0x63
 80011b8:	d9cb      	bls.n	8001152 <eval_radio+0x5a>
	for (int32_t lvl = MIN_PA_LEVEL; lvl <= MAX_PA_LEVEL; lvl+=5) {  //lvl++
 80011ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011bc:	3305      	adds	r3, #5
 80011be:	673b      	str	r3, [r7, #112]	@ 0x70
 80011c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	ddb4      	ble.n	8001130 <eval_radio+0x38>
			}
		}
	}

	DEBUG_PRINT("=== Finished evaluation, reset the board to run again\r\n");
	while (1);
 80011c6:	bf00      	nop
 80011c8:	e7fd      	b.n	80011c6 <eval_radio+0xce>
 80011ca:	bf00      	nop
 80011cc:	200002a0 	.word	0x200002a0
 80011d0:	48000400 	.word	0x48000400

080011d4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	@ 0x38
 80011d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4bb8      	ldr	r3, [pc, #736]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4ab7      	ldr	r2, [pc, #732]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 80011f0:	f043 0310 	orr.w	r3, r3, #16
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4bb5      	ldr	r3, [pc, #724]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4bb2      	ldr	r3, [pc, #712]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4ab1      	ldr	r2, [pc, #708]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4baf      	ldr	r3, [pc, #700]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800121a:	4bac      	ldr	r3, [pc, #688]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4aab      	ldr	r2, [pc, #684]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001220:	f043 0320 	orr.w	r3, r3, #32
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4ba9      	ldr	r3, [pc, #676]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4ba6      	ldr	r3, [pc, #664]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4aa5      	ldr	r2, [pc, #660]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4ba3      	ldr	r3, [pc, #652]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4ba0      	ldr	r3, [pc, #640]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a9f      	ldr	r2, [pc, #636]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b9d      	ldr	r3, [pc, #628]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b9a      	ldr	r3, [pc, #616]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a99      	ldr	r2, [pc, #612]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b97      	ldr	r3, [pc, #604]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127a:	4b94      	ldr	r3, [pc, #592]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a93      	ldr	r2, [pc, #588]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b91      	ldr	r3, [pc, #580]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b8e      	ldr	r3, [pc, #568]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	4a8d      	ldr	r2, [pc, #564]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129e:	4b8b      	ldr	r3, [pc, #556]	@ (80014cc <MX_GPIO_Init+0x2f8>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012aa:	f003 fb25 	bl	80048f8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2101      	movs	r1, #1
 80012b2:	4887      	ldr	r0, [pc, #540]	@ (80014d0 <MX_GPIO_Init+0x2fc>)
 80012b4:	f003 fa8c 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012be:	4885      	ldr	r0, [pc, #532]	@ (80014d4 <MX_GPIO_Init+0x300>)
 80012c0:	f003 fa86 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012ca:	4883      	ldr	r0, [pc, #524]	@ (80014d8 <MX_GPIO_Init+0x304>)
 80012cc:	f003 fa80 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80012d6:	4881      	ldr	r0, [pc, #516]	@ (80014dc <MX_GPIO_Init+0x308>)
 80012d8:	f003 fa7a 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	@ 0x40
 80012e0:	487f      	ldr	r0, [pc, #508]	@ (80014e0 <MX_GPIO_Init+0x30c>)
 80012e2:	f003 fa75 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE12 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012e6:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	4877      	ldr	r0, [pc, #476]	@ (80014d8 <MX_GPIO_Init+0x304>)
 80012fc:	f003 f8d6 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001306:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	486e      	ldr	r0, [pc, #440]	@ (80014d0 <MX_GPIO_Init+0x2fc>)
 8001318:	f003 f8c8 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800131c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4868      	ldr	r0, [pc, #416]	@ (80014d4 <MX_GPIO_Init+0x300>)
 8001332:	f003 f8bb 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001336:	2309      	movs	r3, #9
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4866      	ldr	r0, [pc, #408]	@ (80014e4 <MX_GPIO_Init+0x310>)
 800134a:	f003 f8af 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 800134e:	2301      	movs	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	485a      	ldr	r0, [pc, #360]	@ (80014d0 <MX_GPIO_Init+0x2fc>)
 8001366:	f003 f8a1 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800136a:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001370:	2303      	movs	r3, #3
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137c:	4619      	mov	r1, r3
 800137e:	4854      	ldr	r0, [pc, #336]	@ (80014d0 <MX_GPIO_Init+0x2fc>)
 8001380:	f003 f894 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001384:	f248 0336 	movw	r3, #32822	@ 0x8036
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138a:	2303      	movs	r3, #3
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f003 f886 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 80013a0:	2308      	movs	r3, #8
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b8:	f003 f878 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80013bc:	f64b 7377 	movw	r3, #49015	@ 0xbf77
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4842      	ldr	r0, [pc, #264]	@ (80014dc <MX_GPIO_Init+0x308>)
 80013d2:	f003 f86b 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 80013d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4839      	ldr	r0, [pc, #228]	@ (80014d4 <MX_GPIO_Init+0x300>)
 80013f0:	f003 f85c 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013f4:	f64f 631f 	movw	r3, #65055	@ 0xfe1f
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4835      	ldr	r0, [pc, #212]	@ (80014e0 <MX_GPIO_Init+0x30c>)
 800140a:	f003 f84f 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 800140e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	482c      	ldr	r0, [pc, #176]	@ (80014d8 <MX_GPIO_Init+0x304>)
 8001428:	f003 f840 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800142c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4825      	ldr	r0, [pc, #148]	@ (80014dc <MX_GPIO_Init+0x308>)
 8001446:	f003 f831 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800144a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001450:	2303      	movs	r3, #3
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4822      	ldr	r0, [pc, #136]	@ (80014e8 <MX_GPIO_Init+0x314>)
 8001460:	f003 f824 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001464:	2320      	movs	r3, #32
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	481a      	ldr	r0, [pc, #104]	@ (80014e0 <MX_GPIO_Init+0x30c>)
 8001478:	f003 f818 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800147c:	2340      	movs	r3, #64	@ 0x40
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4813      	ldr	r0, [pc, #76]	@ (80014e0 <MX_GPIO_Init+0x30c>)
 8001494:	f003 f80a 	bl	80044ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001498:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014aa:	230a      	movs	r3, #10
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b8:	f002 fff8 	bl	80044ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2009      	movs	r0, #9
 80014c2:	f002 fe54 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014c6:	2009      	movs	r0, #9
 80014c8:	e010      	b.n	80014ec <MX_GPIO_Init+0x318>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000800 	.word	0x48000800
 80014d4:	48001400 	.word	0x48001400
 80014d8:	48001000 	.word	0x48001000
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48001800 	.word	0x48001800
 80014e4:	48001c00 	.word	0x48001c00
 80014e8:	48000c00 	.word	0x48000c00
 80014ec:	f002 fe5b 	bl	80041a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2028      	movs	r0, #40	@ 0x28
 80014f6:	f002 fe3a 	bl	800416e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014fa:	2028      	movs	r0, #40	@ 0x28
 80014fc:	f002 fe53 	bl	80041a6 <HAL_NVIC_EnableIRQ>

}
 8001500:	bf00      	nop
 8001502:	3738      	adds	r7, #56	@ 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001518:	d103      	bne.n	8001522 <HAL_GPIO_EXTI_Callback+0x1a>
		btn_press = 1;
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_GPIO_EXTI_Callback+0x2c>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
		S2LP_IRQ_Handler();
}
 8001520:	e004      	b.n	800152c <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == RADIO_INT_Pin)
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d101      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x24>
		S2LP_IRQ_Handler();
 8001528:	f001 f978 	bl	800281c <S2LP_IRQ_Handler>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002a0 	.word	0x200002a0

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f001 fbba 	bl	8002cb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f837 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f7ff fe45 	bl	80011d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800154a:	f7ff fdb7 	bl	80010bc <MX_DMA_Init>
  MX_TIM3_Init();
 800154e:	f001 fb15 	bl	8002b7c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001552:	f7ff fcb1 	bl	8000eb8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001556:	f001 f993 	bl	8002880 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if (ENABLE_UART) {
	  MX_LPUART1_UART_Init();
  }

  RetargetInit(&hlpuart1);
 800155a:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <main+0x6c>)
 800155c:	f000 f8a6 	bl	80016ac <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");

#if ENABLE_RADIO
  // Enable S2LP Radio
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8001560:	4811      	ldr	r0, [pc, #68]	@ (80015a8 <main+0x70>)
 8001562:	f001 f8c5 	bl	80026f0 <S2LP_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if (err)  {
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <main+0x3c>
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
	  Error_Handler();
 8001570:	f000 f866 	bl	8001640 <Error_Handler>
  } else {
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
  }
#endif

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001574:	217f      	movs	r1, #127	@ 0x7f
 8001576:	480d      	ldr	r0, [pc, #52]	@ (80015ac <main+0x74>)
 8001578:	f002 fc0e 	bl	8003d98 <HAL_ADCEx_Calibration_Start>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <main+0x4e>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
	  Error_Handler();
 8001582:	f000 f85d 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001586:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <main+0x78>)
 8001588:	f005 f920 	bl	80067cc <HAL_TIM_Base_Start>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <main+0x5e>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
	  Error_Handler();
 8001592:	f000 f855 	bl	8001640 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (RUN_CONFIG == MAIN_APP)
  run();
#elif (RUN_CONFIG == EVAL_RADIO)
  eval_radio();
 8001596:	f7ff fdaf 	bl	80010f8 <eval_radio>
 800159a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000364 	.word	0x20000364
 80015a8:	200002b0 	.word	0x200002b0
 80015ac:	200001f0 	.word	0x200001f0
 80015b0:	20000318 	.word	0x20000318

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b096      	sub	sp, #88	@ 0x58
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2244      	movs	r2, #68	@ 0x44
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fd85 	bl	80080d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015da:	f003 f937 	bl	800484c <HAL_PWREx_ControlVoltageScaling>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015e4:	f000 f82c 	bl	8001640 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015e8:	2310      	movs	r3, #16
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80015f4:	23b0      	movs	r3, #176	@ 0xb0
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f003 f989 	bl	8004918 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800160c:	f000 f818 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001614:	2300      	movs	r3, #0
 8001616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2102      	movs	r1, #2
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fd8f 	bl	800514c <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001634:	f000 f804 	bl	8001640 <Error_Handler>
  }
}
 8001638:	bf00      	nop
 800163a:	3758      	adds	r7, #88	@ 0x58
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001646:	b672      	cpsid	i
}
 8001648:	bf00      	nop
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <Error_Handler+0x60>)
 8001652:	f003 f8bd 	bl	80047d0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	e002      	b.n	8001662 <Error_Handler+0x22>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3301      	adds	r3, #1
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <Error_Handler+0x64>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a10      	ldr	r2, [pc, #64]	@ (80016a8 <Error_Handler+0x68>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	099b      	lsrs	r3, r3, #6
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4293      	cmp	r3, r2
 8001672:	d8f3      	bhi.n	800165c <Error_Handler+0x1c>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800167a:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <Error_Handler+0x60>)
 800167c:	f003 f8a8 	bl	80047d0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	e002      	b.n	800168c <Error_Handler+0x4c>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <Error_Handler+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <Error_Handler+0x68>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4293      	cmp	r3, r2
 800169c:	d8f3      	bhi.n	8001686 <Error_Handler+0x46>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800169e:	e7d4      	b.n	800164a <Error_Handler+0xa>
 80016a0:	48000400 	.word	0x48000400
 80016a4:	20000000 	.word	0x20000000
 80016a8:	51eb851f 	.word	0x51eb851f

080016ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <RetargetInit+0x28>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <RetargetInit+0x2c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6898      	ldr	r0, [r3, #8]
 80016c0:	2300      	movs	r3, #0
 80016c2:	2202      	movs	r2, #2
 80016c4:	2100      	movs	r1, #0
 80016c6:	f006 fc0d 	bl	8007ee4 <setvbuf>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002a4 	.word	0x200002a4
 80016d8:	20000018 	.word	0x20000018

080016dc <_isatty>:

int _isatty(int fd) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db04      	blt.n	80016f4 <_isatty+0x18>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	dc01      	bgt.n	80016f4 <_isatty+0x18>
    return 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e005      	b.n	8001700 <_isatty+0x24>

  errno = EBADF;
 80016f4:	f006 fd40 	bl	8008178 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2209      	movs	r2, #9
 80016fc:	601a      	str	r2, [r3, #0]
  return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <_write>:

int _write(int fd, char* ptr, int len) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d002      	beq.n	8001720 <_write+0x18>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d111      	bne.n	8001744 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <_write+0x54>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b29a      	uxth	r2, r3
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	f005 fc9d 	bl	800706c <HAL_UART_Transmit>
 8001732:	4603      	mov	r3, r0
 8001734:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <_write+0x38>
      return len;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	e008      	b.n	8001752 <_write+0x4a>
    else
      return EIO;
 8001740:	2305      	movs	r3, #5
 8001742:	e006      	b.n	8001752 <_write+0x4a>
  }
  errno = EBADF;
 8001744:	f006 fd18 	bl	8008178 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	2209      	movs	r2, #9
 800174c:	601a      	str	r2, [r3, #0]
  return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002a4 	.word	0x200002a4

08001760 <_close>:

int _close(int fd) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db04      	blt.n	8001778 <_close+0x18>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b02      	cmp	r3, #2
 8001772:	dc01      	bgt.n	8001778 <_close+0x18>
    return 0;
 8001774:	2300      	movs	r3, #0
 8001776:	e006      	b.n	8001786 <_close+0x26>

  errno = EBADF;
 8001778:	f006 fcfe 	bl	8008178 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	2209      	movs	r2, #9
 8001780:	601a      	str	r2, [r3, #0]
  return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800179a:	f006 fced 	bl	8008178 <__errno>
 800179e:	4603      	mov	r3, r0
 80017a0:	2209      	movs	r2, #9
 80017a2:	601a      	str	r2, [r3, #0]
  return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d110      	bne.n	80017e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <_read+0x4c>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ca:	2201      	movs	r2, #1
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	f005 fcd6 	bl	800717e <HAL_UART_Receive>
 80017d2:	4603      	mov	r3, r0
 80017d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <_read+0x30>
      return 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	e008      	b.n	80017f2 <_read+0x42>
    else
      return EIO;
 80017e0:	2305      	movs	r3, #5
 80017e2:	e006      	b.n	80017f2 <_read+0x42>
  }
  errno = EBADF;
 80017e4:	f006 fcc8 	bl	8008178 <__errno>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2209      	movs	r2, #9
 80017ec:	601a      	str	r2, [r3, #0]
  return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002a4 	.word	0x200002a4

08001800 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db08      	blt.n	8001822 <_fstat+0x22>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	dc05      	bgt.n	8001822 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181c:	605a      	str	r2, [r3, #4]
    return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e005      	b.n	800182e <_fstat+0x2e>
  }

  errno = EBADF;
 8001822:	f006 fca9 	bl	8008178 <__errno>
 8001826:	4603      	mov	r3, r0
 8001828:	2209      	movs	r2, #9
 800182a:	601a      	str	r2, [r3, #0]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af02      	add	r7, sp, #8
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	733b      	strb	r3, [r7, #12]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <S2LP_Command+0x5c>)
 8001856:	f002 ffbb 	bl	80047d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <S2LP_Command+0x60>)
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	f107 010c 	add.w	r1, r7, #12
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2302      	movs	r3, #2
 800186e:	f004 fbd2 	bl	8006016 <HAL_SPI_TransmitReceive>
 8001872:	4603      	mov	r3, r0
 8001874:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2101      	movs	r1, #1
 800187a:	4806      	ldr	r0, [pc, #24]	@ (8001894 <S2LP_Command+0x5c>)
 800187c:	f002 ffa8 	bl	80047d0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001880:	b662      	cpsie	i
}
 8001882:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001884:	893a      	ldrh	r2, [r7, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	801a      	strh	r2, [r3, #0]
	return err;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	48000800 	.word	0x48000800
 8001898:	200002a8 	.word	0x200002a8

0800189c <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	4603      	mov	r3, r0
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 80018aa:	2301      	movs	r3, #1
 80018ac:	753b      	strb	r3, [r7, #20]
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	757b      	strb	r3, [r7, #21]
 80018b2:	2300      	movs	r3, #0
 80018b4:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 80018b6:	b672      	cpsid	i
}
 80018b8:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	4814      	ldr	r0, [pc, #80]	@ (8001910 <S2LP_ReadReg+0x74>)
 80018c0:	f002 ff86 	bl	80047d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <S2LP_ReadReg+0x78>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	f107 0210 	add.w	r2, r7, #16
 80018cc:	f107 0114 	add.w	r1, r7, #20
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2303      	movs	r3, #3
 80018d8:	f004 fb9d 	bl	8006016 <HAL_SPI_TransmitReceive>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2101      	movs	r1, #1
 80018e4:	480a      	ldr	r0, [pc, #40]	@ (8001910 <S2LP_ReadReg+0x74>)
 80018e6:	f002 ff73 	bl	80047d0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80018ea:	b662      	cpsie	i
}
 80018ec:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 80018f4:	8a3a      	ldrh	r2, [r7, #16]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001900:	7cba      	ldrb	r2, [r7, #18]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	701a      	strb	r2, [r3, #0]
	return err;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	48000800 	.word	0x48000800
 8001914:	200002a8 	.word	0x200002a8

08001918 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	603a      	str	r2, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	460b      	mov	r3, r1
 8001926:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001928:	2300      	movs	r3, #0
 800192a:	733b      	strb	r3, [r7, #12]
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	737b      	strb	r3, [r7, #13]
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2101      	movs	r1, #1
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <S2LP_WriteReg+0x6c>)
 800193e:	f002 ff47 	bl	80047d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <S2LP_WriteReg+0x70>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f107 0208 	add.w	r2, r7, #8
 800194a:	f107 010c 	add.w	r1, r7, #12
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2303      	movs	r3, #3
 8001956:	f004 fb5e 	bl	8006016 <HAL_SPI_TransmitReceive>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2101      	movs	r1, #1
 8001962:	4808      	ldr	r0, [pc, #32]	@ (8001984 <S2LP_WriteReg+0x6c>)
 8001964:	f002 ff34 	bl	80047d0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001968:	b662      	cpsie	i
}
 800196a:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001972:	893a      	ldrh	r2, [r7, #8]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	801a      	strh	r2, [r3, #0]
	return err;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	48000800 	.word	0x48000800
 8001988:	200002a8 	.word	0x200002a8

0800198c <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b08d      	sub	sp, #52	@ 0x34
 8001990:	af02      	add	r7, sp, #8
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	460b      	mov	r3, r1
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 800199e:	23ff      	movs	r3, #255	@ 0xff
 80019a0:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 80019a2:	7afa      	ldrb	r2, [r7, #11]
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	3302      	adds	r3, #2
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f006 fc10 	bl	80081d2 <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 80019b2:	b672      	cpsid	i
}
 80019b4:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2101      	movs	r1, #1
 80019ba:	4814      	ldr	r0, [pc, #80]	@ (8001a0c <S2LP_WriteTxFIFO+0x80>)
 80019bc:	f002 ff08 	bl	80047d0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <S2LP_WriteTxFIFO+0x84>)
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3302      	adds	r3, #2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f107 0210 	add.w	r2, r7, #16
 80019d0:	f107 011c 	add.w	r1, r7, #28
 80019d4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80019d8:	9400      	str	r4, [sp, #0]
 80019da:	f004 fb1c 	bl	8006016 <HAL_SPI_TransmitReceive>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	2101      	movs	r1, #1
 80019e8:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <S2LP_WriteTxFIFO+0x80>)
 80019ea:	f002 fef1 	bl	80047d0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80019ee:	b662      	cpsie	i
}
 80019f0:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 80019f8:	8a3a      	ldrh	r2, [r7, #16]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	801a      	strh	r2, [r3, #0]
	return err;
 80019fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	372c      	adds	r7, #44	@ 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	48000800 	.word	0x48000800
 8001a10:	200002a8 	.word	0x200002a8

08001a14 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	2072      	movs	r0, #114	@ 0x72
 8001a28:	f7ff ff06 	bl	8001838 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001a2c:	7b7b      	ldrb	r3, [r7, #13]
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <S2LP_Send+0x28>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
		return HAL_BUSY;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e0b0      	b.n	8001b9e <S2LP_Send+0x18a>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba8 <S2LP_Send+0x194>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001a42:	4b5a      	ldr	r3, [pc, #360]	@ (8001bac <S2LP_Send+0x198>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001a48:	4b59      	ldr	r3, [pc, #356]	@ (8001bb0 <S2LP_Send+0x19c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	2031      	movs	r0, #49	@ 0x31
 8001a5c:	f7ff ff5c 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	2032      	movs	r0, #50	@ 0x32
 8001a6a:	f7ff ff55 	bl	8001918 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001a6e:	e00c      	b.n	8001a8a <S2LP_Send+0x76>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	2066      	movs	r0, #102	@ 0x66
 8001a78:	f7ff fede 	bl	8001838 <S2LP_Command>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <S2LP_Send+0x76>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
			return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e089      	b.n	8001b9e <S2LP_Send+0x18a>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001a8a:	7b7b      	ldrb	r3, [r7, #13]
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b18      	cmp	r3, #24
 8001a94:	d1ec      	bne.n	8001a70 <S2LP_Send+0x5c>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	887a      	ldrh	r2, [r7, #2]
 8001aa2:	f002 0207 	and.w	r2, r2, #7
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2201      	movne	r2, #1
 8001aae:	2200      	moveq	r2, #0
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	827b      	strh	r3, [r7, #18]
 8001abe:	e059      	b.n	8001b74 <S2LP_Send+0x160>
		if (underflow) {
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bac <S2LP_Send+0x198>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d028      	beq.n	8001b1c <S2LP_Send+0x108>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fee2 	bl	800189c <S2LP_ReadReg>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <S2LP_Send+0xd8>
				S2LP_PrintStatus(&radio_status);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f864 	bl	8001bb4 <S2LP_PrintStatus>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
			}
			return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e056      	b.n	8001b9e <S2LP_Send+0x18a>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <S2LP_Send+0xf2>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001af6:	f107 030c 	add.w	r3, r7, #12
 8001afa:	4619      	mov	r1, r3
 8001afc:	2060      	movs	r0, #96	@ 0x60
 8001afe:	f7ff fe9b 	bl	8001838 <S2LP_Command>
				sending = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 8001b06:	bf30      	wfi
			if (fifo_almost_empty) {
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <S2LP_Send+0x19c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <S2LP_Send+0x108>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001b12:	230c      	movs	r3, #12
 8001b14:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001b16:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <S2LP_Send+0x19c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8001b1c:	8abb      	ldrh	r3, [r7, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0e6      	beq.n	8001af0 <S2LP_Send+0xdc>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001b22:	8a7a      	ldrh	r2, [r7, #18]
 8001b24:	8a3b      	ldrh	r3, [r7, #16]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d109      	bne.n	8001b40 <S2LP_Send+0x12c>
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	8a3b      	ldrh	r3, [r7, #16]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e000      	b.n	8001b42 <S2LP_Send+0x12e>
 8001b40:	2308      	movs	r3, #8
 8001b42:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001b44:	8a7b      	ldrh	r3, [r7, #18]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	7bf9      	ldrb	r1, [r7, #15]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff19 	bl	800198c <S2LP_WriteTxFIFO>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001b5e:	7bbb      	ldrb	r3, [r7, #14]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <S2LP_Send+0x154>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
			return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01a      	b.n	8001b9e <S2LP_Send+0x18a>
		}
		free_chunks--;
 8001b68:	8abb      	ldrh	r3, [r7, #20]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001b6e:	8a7b      	ldrh	r3, [r7, #18]
 8001b70:	3301      	adds	r3, #1
 8001b72:	827b      	strh	r3, [r7, #18]
 8001b74:	8a7a      	ldrh	r2, [r7, #18]
 8001b76:	8a3b      	ldrh	r3, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3a1      	bcc.n	8001ac0 <S2LP_Send+0xac>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <S2LP_Send+0x17e>
		S2LP_Command(CMD_TX, &radio_status);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	2060      	movs	r0, #96	@ 0x60
 8001b8a:	f7ff fe55 	bl	8001838 <S2LP_Command>
	}

	while (!packet_sent) {
 8001b8e:	e000      	b.n	8001b92 <S2LP_Send+0x17e>
		__WFI(); // wait until packet has been fully transmitted
 8001b90:	bf30      	wfi
	while (!packet_sent) {
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <S2LP_Send+0x194>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f9      	beq.n	8001b90 <S2LP_Send+0x17c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
	return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002ac 	.word	0x200002ac
 8001bac:	200002ae 	.word	0x200002ae
 8001bb0:	200002ad 	.word	0x200002ad

08001bb4 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
	DEBUG_PRINT("  MC_STATE: ");
	switch (status->MC_STATE) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b5c      	cmp	r3, #92	@ 0x5c
 8001bc8:	d06f      	beq.n	8001caa <S2LP_PrintStatus+0xf6>
 8001bca:	2b5c      	cmp	r3, #92	@ 0x5c
 8001bcc:	dc6f      	bgt.n	8001cae <S2LP_PrintStatus+0xfa>
 8001bce:	2b30      	cmp	r3, #48	@ 0x30
 8001bd0:	dc68      	bgt.n	8001ca4 <S2LP_PrintStatus+0xf0>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	db6b      	blt.n	8001cae <S2LP_PrintStatus+0xfa>
 8001bd6:	2b30      	cmp	r3, #48	@ 0x30
 8001bd8:	d869      	bhi.n	8001cae <S2LP_PrintStatus+0xfa>
 8001bda:	a201      	add	r2, pc, #4	@ (adr r2, 8001be0 <S2LP_PrintStatus+0x2c>)
 8001bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be0:	08001caf 	.word	0x08001caf
 8001be4:	08001caf 	.word	0x08001caf
 8001be8:	08001caf 	.word	0x08001caf
 8001bec:	08001caf 	.word	0x08001caf
 8001bf0:	08001caf 	.word	0x08001caf
 8001bf4:	08001caf 	.word	0x08001caf
 8001bf8:	08001caf 	.word	0x08001caf
 8001bfc:	08001caf 	.word	0x08001caf
 8001c00:	08001caf 	.word	0x08001caf
 8001c04:	08001caf 	.word	0x08001caf
 8001c08:	08001caf 	.word	0x08001caf
 8001c0c:	08001caf 	.word	0x08001caf
 8001c10:	08001caf 	.word	0x08001caf
 8001c14:	08001caf 	.word	0x08001caf
 8001c18:	08001caf 	.word	0x08001caf
 8001c1c:	08001caf 	.word	0x08001caf
 8001c20:	08001caf 	.word	0x08001caf
 8001c24:	08001caf 	.word	0x08001caf
 8001c28:	08001caf 	.word	0x08001caf
 8001c2c:	08001caf 	.word	0x08001caf
 8001c30:	08001caf 	.word	0x08001caf
 8001c34:	08001caf 	.word	0x08001caf
 8001c38:	08001caf 	.word	0x08001caf
 8001c3c:	08001caf 	.word	0x08001caf
 8001c40:	08001caf 	.word	0x08001caf
 8001c44:	08001caf 	.word	0x08001caf
 8001c48:	08001caf 	.word	0x08001caf
 8001c4c:	08001caf 	.word	0x08001caf
 8001c50:	08001caf 	.word	0x08001caf
 8001c54:	08001caf 	.word	0x08001caf
 8001c58:	08001caf 	.word	0x08001caf
 8001c5c:	08001caf 	.word	0x08001caf
 8001c60:	08001caf 	.word	0x08001caf
 8001c64:	08001caf 	.word	0x08001caf
 8001c68:	08001caf 	.word	0x08001caf
 8001c6c:	08001caf 	.word	0x08001caf
 8001c70:	08001caf 	.word	0x08001caf
 8001c74:	08001caf 	.word	0x08001caf
 8001c78:	08001caf 	.word	0x08001caf
 8001c7c:	08001caf 	.word	0x08001caf
 8001c80:	08001caf 	.word	0x08001caf
 8001c84:	08001caf 	.word	0x08001caf
 8001c88:	08001caf 	.word	0x08001caf
 8001c8c:	08001caf 	.word	0x08001caf
 8001c90:	08001caf 	.word	0x08001caf
 8001c94:	08001caf 	.word	0x08001caf
 8001c98:	08001caf 	.word	0x08001caf
 8001c9c:	08001caf 	.word	0x08001caf
 8001ca0:	08001caf 	.word	0x08001caf
 8001ca4:	2b50      	cmp	r3, #80	@ 0x50
 8001ca6:	d004      	beq.n	8001cb2 <S2LP_PrintStatus+0xfe>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
			break;
		default:
			DEBUG_PRINT("UNKNOWN");
			break;
 8001ca8:	e001      	b.n	8001cae <S2LP_PrintStatus+0xfa>
			break;
 8001caa:	bf00      	nop
 8001cac:	e002      	b.n	8001cb4 <S2LP_PrintStatus+0x100>
			break;
 8001cae:	bf00      	nop
 8001cb0:	e000      	b.n	8001cb4 <S2LP_PrintStatus+0x100>
			break;
 8001cb2:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b09e      	sub	sp, #120	@ 0x78
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8001cca:	2304      	movs	r3, #4
 8001ccc:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8001cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd8:	17da      	asrs	r2, r3, #31
 8001cda:	469a      	mov	sl, r3
 8001cdc:	4693      	mov	fp, r2
 8001cde:	ea4f 396a 	mov.w	r9, sl, asr #13
 8001ce2:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8001ce6:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001cea:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	17da      	asrs	r2, r3, #31
 8001cf4:	623b      	str	r3, [r7, #32]
 8001cf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8001cf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	fb03 f209 	mul.w	r2, r3, r9
 8001d02:	460b      	mov	r3, r1
 8001d04:	fb08 f303 	mul.w	r3, r8, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	fba8 4502 	umull	r4, r5, r8, r2
 8001d10:	442b      	add	r3, r5
 8001d12:	461d      	mov	r5, r3
 8001d14:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001d18:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001d1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001d20:	a374      	add	r3, pc, #464	@ (adr r3, 8001ef4 <S2LP_PLLConf+0x234>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe ff4f 	bl	8000bc8 <__aeabi_uldivmod>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8001d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d34:	2200      	movs	r2, #0
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	61fa      	str	r2, [r7, #28]
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ee8 <S2LP_PLLConf+0x228>)
 8001d3c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d40:	462a      	mov	r2, r5
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	2300      	movs	r3, #0
 8001d48:	4621      	mov	r1, r4
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a65      	ldr	r2, [pc, #404]	@ (8001ee8 <S2LP_PLLConf+0x228>)
 8001d52:	4621      	mov	r1, r4
 8001d54:	fba1 1202 	umull	r1, r2, r1, r2
 8001d58:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001d5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d60:	4413      	add	r3, r2
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d64:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001d68:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8001d6c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8001d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d72:	3301      	adds	r3, #1
 8001d74:	2200      	movs	r2, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	617a      	str	r2, [r7, #20]
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee8 <S2LP_PLLConf+0x228>)
 8001d7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d80:	462a      	mov	r2, r5
 8001d82:	fb03 f202 	mul.w	r2, r3, r2
 8001d86:	2300      	movs	r3, #0
 8001d88:	4621      	mov	r1, r4
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a55      	ldr	r2, [pc, #340]	@ (8001ee8 <S2LP_PLLConf+0x228>)
 8001d92:	4621      	mov	r1, r4
 8001d94:	fba1 1202 	umull	r1, r2, r1, r2
 8001d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001da0:	4413      	add	r3, r2
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001da4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001da8:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8001dac:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8001db0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001db4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001db8:	1a84      	subs	r4, r0, r2
 8001dba:	60bc      	str	r4, [r7, #8]
 8001dbc:	eb61 0303 	sbc.w	r3, r1, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	603c      	str	r4, [r7, #0]
 8001dce:	eb61 0303 	sbc.w	r3, r1, r3
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dd8:	4623      	mov	r3, r4
 8001dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dde:	4602      	mov	r2, r0
 8001de0:	4293      	cmp	r3, r2
 8001de2:	462b      	mov	r3, r5
 8001de4:	460a      	mov	r2, r1
 8001de6:	4193      	sbcs	r3, r2
 8001de8:	d202      	bcs.n	8001df0 <S2LP_PLLConf+0x130>
 8001dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dec:	3301      	adds	r3, #1
 8001dee:	e000      	b.n	8001df2 <S2LP_PLLConf+0x132>
 8001df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001df2:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8001df4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8001e00:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001e04:	4a38      	ldr	r2, [pc, #224]	@ (8001ee8 <S2LP_PLLConf+0x228>)
 8001e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8001e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0e:	4a37      	ldr	r2, [pc, #220]	@ (8001eec <S2LP_PLLConf+0x22c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d911      	bls.n	8001e38 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e16:	4a36      	ldr	r2, [pc, #216]	@ (8001ef0 <S2LP_PLLConf+0x230>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d906      	bls.n	8001e2a <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001e28:	e017      	b.n	8001e5a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001e36:	e010      	b.n	8001e5a <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <S2LP_PLLConf+0x230>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d906      	bls.n	8001e4e <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8001e4c:	e005      	b.n	8001e5a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8001e5a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001e5e:	015b      	lsls	r3, r3, #5
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e64:	0e1b      	lsrs	r3, r3, #24
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8001e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8001e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8001e7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e80:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8001e84:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3b30      	subs	r3, #48	@ 0x30
 8001e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8001e92:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f7ff fd3c 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8001ea0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	2006      	movs	r0, #6
 8001eaa:	f7ff fd35 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8001eae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2007      	movs	r0, #7
 8001eb8:	f7ff fd2e 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8001ebc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f7ff fd27 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 8001eca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	2065      	movs	r0, #101	@ 0x65
 8001ed4:	f7ff fd20 	bl	8001918 <S2LP_WriteReg>
}
 8001ed8:	bf00      	nop
 8001eda:	3778      	adds	r7, #120	@ 0x78
 8001edc:	46bd      	mov	sp, r7
 8001ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee2:	bf00      	nop
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	02faf080 	.word	0x02faf080
 8001eec:	d693a3ff 	.word	0xd693a3ff
 8001ef0:	01c9c380 	.word	0x01c9c380
 8001ef4:	02faf080 	.word	0x02faf080
 8001ef8:	00000000 	.word	0x00000000

08001efc <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8001efc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f00:	b091      	sub	sp, #68	@ 0x44
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	460a      	mov	r2, r1
 8001f08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8001f10:	4b3f      	ldr	r3, [pc, #252]	@ (8002010 <ComputeDatarate+0x114>)
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8001f14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f16:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <ComputeDatarate+0x118>)
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d902      	bls.n	8001f22 <ComputeDatarate+0x26>
    f_dig >>= 1;
 8001f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 8001f22:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d128      	bne.n	8001f7c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	61fa      	str	r2, [r7, #28]
 8001f32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001f34:	2200      	movs	r2, #0
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	617a      	str	r2, [r7, #20]
 8001f3a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f3e:	462b      	mov	r3, r5
 8001f40:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f44:	4642      	mov	r2, r8
 8001f46:	fb02 f203 	mul.w	r2, r2, r3
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	4622      	mov	r2, r4
 8001f56:	4641      	mov	r1, r8
 8001f58:	fba2 ab01 	umull	sl, fp, r2, r1
 8001f5c:	445b      	add	r3, fp
 8001f5e:	469b      	mov	fp, r3
 8001f60:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8001f64:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8001f68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	000a      	movs	r2, r1
 8001f76:	2300      	movs	r3, #0
 8001f78:	4613      	mov	r3, r2
 8001f7a:	e043      	b.n	8002004 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8001f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001f86:	2200      	movs	r2, #0
 8001f88:	603b      	str	r3, [r7, #0]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f90:	460b      	mov	r3, r1
 8001f92:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	f143 0300 	adc.w	r3, r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8001faa:	4652      	mov	r2, sl
 8001fac:	fb02 f203 	mul.w	r2, r2, r3
 8001fb0:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	4682      	mov	sl, r0
 8001fb8:	468b      	mov	fp, r1
 8001fba:	4651      	mov	r1, sl
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	fba2 4501 	umull	r4, r5, r2, r1
 8001fca:	442b      	add	r3, r5
 8001fcc:	461d      	mov	r5, r3
 8001fce:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8001fd2:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8001fd6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001fda:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8001fde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fe2:	f1c1 0420 	rsb	r4, r1, #32
 8001fe6:	f1a1 0020 	sub.w	r0, r1, #32
 8001fea:	fa22 f801 	lsr.w	r8, r2, r1
 8001fee:	fa03 f404 	lsl.w	r4, r3, r4
 8001ff2:	ea48 0804 	orr.w	r8, r8, r4
 8001ff6:	fa23 f000 	lsr.w	r0, r3, r0
 8001ffa:	ea48 0800 	orr.w	r8, r8, r0
 8001ffe:	fa23 f901 	lsr.w	r9, r3, r1
 8002002:	4643      	mov	r3, r8
}
 8002004:	4618      	mov	r0, r3
 8002006:	3744      	adds	r7, #68	@ 0x44
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800200e:	4770      	bx	lr
 8002010:	02faf080 	.word	0x02faf080
 8002014:	01c9c380 	.word	0x01c9c380

08002018 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8002018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800201c:	b0ae      	sub	sp, #184	@ 0xb8
 800201e:	af00      	add	r7, sp, #0
 8002020:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8002024:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002028:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 800202c:	4ba5      	ldr	r3, [pc, #660]	@ (80022c4 <SearchDatarateME+0x2ac>)
 800202e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002036:	4ba4      	ldr	r3, [pc, #656]	@ (80022c8 <SearchDatarateME+0x2b0>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d904      	bls.n	8002046 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 800203c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002046:	2300      	movs	r3, #0
 8002048:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800204c:	e013      	b.n	8002076 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 800204e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002052:	4619      	mov	r1, r3
 8002054:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002058:	f7ff ff50 	bl	8001efc <ComputeDatarate>
 800205c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8002060:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002064:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002068:	429a      	cmp	r2, r3
 800206a:	d909      	bls.n	8002080 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 800206c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002070:	3301      	adds	r3, #1
 8002072:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002076:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d1e7      	bne.n	800204e <SearchDatarateME+0x36>
 800207e:	e000      	b.n	8002082 <SearchDatarateME+0x6a>
      break;
 8002080:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8002082:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002086:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800208a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 800208c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d16b      	bne.n	800216c <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002098:	2200      	movs	r2, #0
 800209a:	663b      	str	r3, [r7, #96]	@ 0x60
 800209c:	667a      	str	r2, [r7, #100]	@ 0x64
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020a8:	000b      	movs	r3, r1
 80020aa:	2200      	movs	r2, #0
 80020ac:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 80020b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020b4:	2200      	movs	r2, #0
 80020b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020b8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020be:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020c2:	f7fe fd81 	bl	8000bc8 <__aeabi_uldivmod>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	b293      	uxth	r3, r2
 80020cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80020d0:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 80020d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020d6:	2200      	movs	r2, #0
 80020d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80020da:	657a      	str	r2, [r7, #84]	@ 0x54
 80020dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80020ea:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80020ee:	462b      	mov	r3, r5
 80020f0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80020f4:	4642      	mov	r2, r8
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	464b      	mov	r3, r9
 80020fc:	4621      	mov	r1, r4
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	4622      	mov	r2, r4
 8002106:	4641      	mov	r1, r8
 8002108:	fba2 1201 	umull	r1, r2, r2, r1
 800210c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800210e:	460a      	mov	r2, r1
 8002110:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002112:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002114:	4413      	add	r3, r2
 8002116:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002118:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800211c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002120:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8002124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002128:	2200      	movs	r2, #0
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
 800212c:	647a      	str	r2, [r7, #68]	@ 0x44
 800212e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	17da      	asrs	r2, r3, #31
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800213a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800213c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002140:	462b      	mov	r3, r5
 8002142:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002146:	4642      	mov	r2, r8
 8002148:	fb02 f203 	mul.w	r2, r2, r3
 800214c:	464b      	mov	r3, r9
 800214e:	4621      	mov	r1, r4
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	4413      	add	r3, r2
 8002156:	4622      	mov	r2, r4
 8002158:	4641      	mov	r1, r8
 800215a:	fba2 ab01 	umull	sl, fp, r2, r1
 800215e:	445b      	add	r3, fp
 8002160:	469b      	mov	fp, r3
 8002162:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002166:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 800216a:	e07d      	b.n	8002268 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 800216c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002170:	2200      	movs	r2, #0
 8002172:	4698      	mov	r8, r3
 8002174:	4691      	mov	r9, r2
 8002176:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800217a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800217e:	f1a1 0320 	sub.w	r3, r1, #32
 8002182:	f1c1 0220 	rsb	r2, r1, #32
 8002186:	fa09 f501 	lsl.w	r5, r9, r1
 800218a:	fa08 f303 	lsl.w	r3, r8, r3
 800218e:	431d      	orrs	r5, r3
 8002190:	fa28 f202 	lsr.w	r2, r8, r2
 8002194:	4315      	orrs	r5, r2
 8002196:	fa08 f401 	lsl.w	r4, r8, r1
 800219a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800219e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021a2:	2200      	movs	r2, #0
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80021a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021b0:	f7fe fd0a 	bl	8000bc8 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	b293      	uxth	r3, r2
 80021ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80021be:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 80021c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021c4:	2200      	movs	r2, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80021d4:	17da      	asrs	r2, r3, #31
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80021de:	462b      	mov	r3, r5
 80021e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021e4:	4642      	mov	r2, r8
 80021e6:	fb02 f203 	mul.w	r2, r2, r3
 80021ea:	464b      	mov	r3, r9
 80021ec:	4621      	mov	r1, r4
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	4622      	mov	r2, r4
 80021f6:	4641      	mov	r1, r8
 80021f8:	fba2 1201 	umull	r1, r2, r2, r1
 80021fc:	677a      	str	r2, [r7, #116]	@ 0x74
 80021fe:	460a      	mov	r2, r1
 8002200:	673a      	str	r2, [r7, #112]	@ 0x70
 8002202:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002204:	4413      	add	r3, r2
 8002206:	677b      	str	r3, [r7, #116]	@ 0x74
 8002208:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800220c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002210:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8002214:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002218:	2200      	movs	r2, #0
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	61fa      	str	r2, [r7, #28]
 800221e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8002228:	17da      	asrs	r2, r3, #31
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	617a      	str	r2, [r7, #20]
 800222e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002232:	462b      	mov	r3, r5
 8002234:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002238:	4642      	mov	r2, r8
 800223a:	fb02 f203 	mul.w	r2, r2, r3
 800223e:	464b      	mov	r3, r9
 8002240:	4621      	mov	r1, r4
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	4622      	mov	r2, r4
 800224a:	4641      	mov	r1, r8
 800224c:	fba2 1201 	umull	r1, r2, r2, r1
 8002250:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002252:	460a      	mov	r2, r1
 8002254:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002256:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002258:	4413      	add	r3, r2
 800225a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800225c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002260:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8002264:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002268:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800226c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002270:	1a84      	subs	r4, r0, r2
 8002272:	60bc      	str	r4, [r7, #8]
 8002274:	eb61 0303 	sbc.w	r3, r1, r3
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800227e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002282:	1a84      	subs	r4, r0, r2
 8002284:	603c      	str	r4, [r7, #0]
 8002286:	eb61 0303 	sbc.w	r3, r1, r3
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002290:	4623      	mov	r3, r4
 8002292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002296:	4602      	mov	r2, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	462b      	mov	r3, r5
 800229c:	460a      	mov	r2, r1
 800229e:	4193      	sbcs	r3, r2
 80022a0:	d205      	bcs.n	80022ae <SearchDatarateME+0x296>
 80022a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	e002      	b.n	80022b4 <SearchDatarateME+0x29c>
 80022ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80022b8:	8013      	strh	r3, [r2, #0]

}
 80022ba:	bf00      	nop
 80022bc:	37b8      	adds	r7, #184	@ 0xb8
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c4:	02faf080 	.word	0x02faf080
 80022c8:	01c9c380 	.word	0x01c9c380

080022cc <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 80022cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022d0:	b08c      	sub	sp, #48	@ 0x30
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	461e      	mov	r6, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022dc:	460b      	mov	r3, r1
 80022de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80022e2:	4613      	mov	r3, r2
 80022e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80022e8:	4633      	mov	r3, r6
 80022ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 80022ee:	4b35      	ldr	r3, [pc, #212]	@ (80023c4 <ComputeFreqDeviation+0xf8>)
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 80022f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d127      	bne.n	800234a <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 80022fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022fc:	2200      	movs	r2, #0
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	617a      	str	r2, [r7, #20]
 8002302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002306:	2200      	movs	r2, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002310:	462b      	mov	r3, r5
 8002312:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002316:	4642      	mov	r2, r8
 8002318:	fb02 f203 	mul.w	r2, r2, r3
 800231c:	464b      	mov	r3, r9
 800231e:	4621      	mov	r1, r4
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	4622      	mov	r2, r4
 8002328:	4641      	mov	r1, r8
 800232a:	fba2 ab01 	umull	sl, fp, r2, r1
 800232e:	445b      	add	r3, fp
 8002330:	469b      	mov	fp, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	ea4f 529a 	mov.w	r2, sl, lsr #22
 800233e:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8002342:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8002346:	4613      	mov	r3, r2
 8002348:	e036      	b.n	80023b8 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	2200      	movs	r2, #0
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002356:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800235a:	17da      	asrs	r2, r3, #31
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	61fa      	str	r2, [r7, #28]
 8002360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002364:	460b      	mov	r3, r1
 8002366:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800236a:	4652      	mov	r2, sl
 800236c:	fb02 f203 	mul.w	r2, r2, r3
 8002370:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8002374:	465b      	mov	r3, fp
 8002376:	4682      	mov	sl, r0
 8002378:	468b      	mov	fp, r1
 800237a:	4651      	mov	r1, sl
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	4652      	mov	r2, sl
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	fba2 4501 	umull	r4, r5, r2, r1
 800238a:	442b      	add	r3, r5
 800238c:	461d      	mov	r5, r3
 800238e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002392:	f1c3 0317 	rsb	r3, r3, #23
 8002396:	f1c3 0120 	rsb	r1, r3, #32
 800239a:	f1a3 0220 	sub.w	r2, r3, #32
 800239e:	fa24 f803 	lsr.w	r8, r4, r3
 80023a2:	fa05 f101 	lsl.w	r1, r5, r1
 80023a6:	ea48 0801 	orr.w	r8, r8, r1
 80023aa:	fa25 f202 	lsr.w	r2, r5, r2
 80023ae:	ea48 0802 	orr.w	r8, r8, r2
 80023b2:	fa25 f903 	lsr.w	r9, r5, r3
 80023b6:	4643      	mov	r3, r8
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3730      	adds	r7, #48	@ 0x30
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023c2:	4770      	bx	lr
 80023c4:	02faf080 	.word	0x02faf080

080023c8 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b0a2      	sub	sp, #136	@ 0x88
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80023d2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023d4:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 80023d6:	2304      	movs	r3, #4
 80023d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80023e8:	e012      	b.n	8002410 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 80023ea:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80023ee:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80023f2:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 80023f6:	20ff      	movs	r0, #255	@ 0xff
 80023f8:	f7ff ff68 	bl	80022cc <ComputeFreqDeviation>
 80023fc:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 80023fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002402:	429a      	cmp	r2, r3
 8002404:	d309      	bcc.n	800241a <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002406:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800240a:	3301      	adds	r3, #1
 800240c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002410:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d1e8      	bne.n	80023ea <SearchFreqDevME+0x22>
 8002418:	e000      	b.n	800241c <SearchFreqDevME+0x54>
      break;
 800241a:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 800241c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800241e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002422:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8002424:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002428:	2b00      	cmp	r3, #0
 800242a:	d155      	bne.n	80024d8 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 800242c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800242e:	2200      	movs	r2, #0
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002432:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002440:	4629      	mov	r1, r5
 8002442:	058b      	lsls	r3, r1, #22
 8002444:	4621      	mov	r1, r4
 8002446:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800244a:	4621      	mov	r1, r4
 800244c:	058a      	lsls	r2, r1, #22
 800244e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8002452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002456:	a36e      	add	r3, pc, #440	@ (adr r3, 8002610 <SearchFreqDevME+0x248>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe fbb4 	bl	8000bc8 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	b2d3      	uxtb	r3, r2
 8002466:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002468:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 800246a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2200      	movs	r2, #0
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
 8002474:	637a      	str	r2, [r7, #52]	@ 0x34
 8002476:	4b68      	ldr	r3, [pc, #416]	@ (8002618 <SearchFreqDevME+0x250>)
 8002478:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800247c:	462a      	mov	r2, r5
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	2300      	movs	r3, #0
 8002484:	4621      	mov	r1, r4
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a62      	ldr	r2, [pc, #392]	@ (8002618 <SearchFreqDevME+0x250>)
 800248e:	4621      	mov	r1, r4
 8002490:	fba1 ab02 	umull	sl, fp, r1, r2
 8002494:	445b      	add	r3, fp
 8002496:	469b      	mov	fp, r3
 8002498:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 800249c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 80024a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	17da      	asrs	r2, r3, #31
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002618 <SearchFreqDevME+0x250>)
 80024ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80024b2:	462a      	mov	r2, r5
 80024b4:	fb03 f202 	mul.w	r2, r3, r2
 80024b8:	2300      	movs	r3, #0
 80024ba:	4621      	mov	r1, r4
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	4a55      	ldr	r2, [pc, #340]	@ (8002618 <SearchFreqDevME+0x250>)
 80024c4:	4621      	mov	r1, r4
 80024c6:	fba1 8902 	umull	r8, r9, r1, r2
 80024ca:	444b      	add	r3, r9
 80024cc:	4699      	mov	r9, r3
 80024ce:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 80024d2:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 80024d6:	e06d      	b.n	80025b4 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 80024d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024da:	2200      	movs	r2, #0
 80024dc:	623b      	str	r3, [r7, #32]
 80024de:	627a      	str	r2, [r7, #36]	@ 0x24
 80024e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80024e4:	f1c3 0117 	rsb	r1, r3, #23
 80024e8:	f1a1 0320 	sub.w	r3, r1, #32
 80024ec:	f1c1 0220 	rsb	r2, r1, #32
 80024f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f4:	4648      	mov	r0, r9
 80024f6:	fa00 f501 	lsl.w	r5, r0, r1
 80024fa:	4640      	mov	r0, r8
 80024fc:	fa00 f303 	lsl.w	r3, r0, r3
 8002500:	431d      	orrs	r5, r3
 8002502:	4643      	mov	r3, r8
 8002504:	fa23 f202 	lsr.w	r2, r3, r2
 8002508:	4315      	orrs	r5, r2
 800250a:	4643      	mov	r3, r8
 800250c:	408b      	lsls	r3, r1
 800250e:	461c      	mov	r4, r3
 8002510:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8002514:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002518:	a33d      	add	r3, pc, #244	@ (adr r3, 8002610 <SearchFreqDevME+0x248>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe fb53 	bl	8000bc8 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	b2d3      	uxtb	r3, r2
 8002528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800252a:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 800252c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002534:	17da      	asrs	r2, r3, #31
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	61fa      	str	r2, [r7, #28]
 800253a:	4b37      	ldr	r3, [pc, #220]	@ (8002618 <SearchFreqDevME+0x250>)
 800253c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002540:	462a      	mov	r2, r5
 8002542:	fb03 f202 	mul.w	r2, r3, r2
 8002546:	2300      	movs	r3, #0
 8002548:	4621      	mov	r1, r4
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	4a31      	ldr	r2, [pc, #196]	@ (8002618 <SearchFreqDevME+0x250>)
 8002552:	4621      	mov	r1, r4
 8002554:	fba1 1202 	umull	r1, r2, r1, r2
 8002558:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800255a:	460a      	mov	r2, r1
 800255c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800255e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002560:	4413      	add	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002568:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 800256c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8002578:	17da      	asrs	r2, r3, #31
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	617a      	str	r2, [r7, #20]
 800257e:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <SearchFreqDevME+0x250>)
 8002580:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002584:	462a      	mov	r2, r5
 8002586:	fb03 f202 	mul.w	r2, r3, r2
 800258a:	2300      	movs	r3, #0
 800258c:	4621      	mov	r1, r4
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	4a20      	ldr	r2, [pc, #128]	@ (8002618 <SearchFreqDevME+0x250>)
 8002596:	4621      	mov	r1, r4
 8002598:	fba1 1202 	umull	r1, r2, r1, r2
 800259c:	647a      	str	r2, [r7, #68]	@ 0x44
 800259e:	460a      	mov	r2, r1
 80025a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80025a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025a4:	4413      	add	r3, r2
 80025a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80025ac:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 80025b0:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80025b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80025b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025bc:	1a84      	subs	r4, r0, r2
 80025be:	60bc      	str	r4, [r7, #8]
 80025c0:	eb61 0303 	sbc.w	r3, r1, r3
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80025ca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80025ce:	1a84      	subs	r4, r0, r2
 80025d0:	603c      	str	r4, [r7, #0]
 80025d2:	eb61 0303 	sbc.w	r3, r1, r3
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025dc:	4623      	mov	r3, r4
 80025de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e2:	4602      	mov	r2, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	462b      	mov	r3, r5
 80025e8:	460a      	mov	r2, r1
 80025ea:	4193      	sbcs	r3, r2
 80025ec:	d204      	bcs.n	80025f8 <SearchFreqDevME+0x230>
 80025ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e001      	b.n	80025fc <SearchFreqDevME+0x234>
 80025f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025fe:	7013      	strb	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	3788      	adds	r7, #136	@ 0x88
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	02faf080 	.word	0x02faf080
 8002614:	00000000 	.word	0x00000000
 8002618:	02faf080 	.word	0x02faf080

0800261c <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 800262a:	f107 0217 	add.w	r2, r7, #23
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f7ff fcef 	bl	8002018 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 800263a:	f107 0212 	add.w	r2, r7, #18
 800263e:	f107 0313 	add.w	r3, r7, #19
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff febf 	bl	80023c8 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 800264a:	8abb      	ldrh	r3, [r7, #20]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b29b      	uxth	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2200      	movs	r2, #0
 8002654:	4619      	mov	r1, r3
 8002656:	200e      	movs	r0, #14
 8002658:	f7ff f95e 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 800265c:	8abb      	ldrh	r3, [r7, #20]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	200f      	movs	r0, #15
 8002666:	f7ff f957 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 800266a:	7dfa      	ldrb	r2, [r7, #23]
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	4313      	orrs	r3, r2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2200      	movs	r2, #0
 8002674:	4619      	mov	r1, r3
 8002676:	2010      	movs	r0, #16
 8002678:	f7ff f94e 	bl	8001918 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2200      	movs	r2, #0
 8002680:	4619      	mov	r1, r3
 8002682:	2012      	movs	r0, #18
 8002684:	f7ff f948 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002688:	7cbb      	ldrb	r3, [r7, #18]
 800268a:	2200      	movs	r2, #0
 800268c:	4619      	mov	r1, r3
 800268e:	2011      	movs	r0, #17
 8002690:	f7ff f942 	bl	8001918 <S2LP_WriteReg>
}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b0e      	cmp	r3, #14
 80026a8:	dd02      	ble.n	80026b0 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	e006      	b.n	80026be <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f1c3 031d 	rsb	r3, r3, #29
 80026bc:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 80026be:	2200      	movs	r2, #0
 80026c0:	2100      	movs	r1, #0
 80026c2:	2062      	movs	r0, #98	@ 0x62
 80026c4:	f7ff f928 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 80026c8:	2200      	movs	r2, #0
 80026ca:	2100      	movs	r1, #0
 80026cc:	2064      	movs	r0, #100	@ 0x64
 80026ce:	f7ff f923 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	2063      	movs	r0, #99	@ 0x63
 80026d8:	f7ff f91e 	bl	8001918 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	2061      	movs	r0, #97	@ 0x61
 80026e4:	f7ff f918 	bl	8001918 <S2LP_WriteReg>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 80026f8:	4a44      	ldr	r2, [pc, #272]	@ (800280c <S2LP_Init+0x11c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 80026fe:	f002 feb1 	bl	8005464 <HAL_RCC_GetHCLKFreq>
 8002702:	4603      	mov	r3, r0
 8002704:	4a42      	ldr	r2, [pc, #264]	@ (8002810 <S2LP_Init+0x120>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800270e:	b672      	cpsid	i
}
 8002710:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002718:	483e      	ldr	r0, [pc, #248]	@ (8002814 <S2LP_Init+0x124>)
 800271a:	f002 f859 	bl	80047d0 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e003      	b.n	800272c <S2LP_Init+0x3c>
		asm volatile("nop");
 8002724:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3f7      	bcc.n	8002724 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002734:	b662      	cpsie	i
}
 8002736:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002738:	2200      	movs	r2, #0
 800273a:	2103      	movs	r1, #3
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff f8eb 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002742:	2200      	movs	r2, #0
 8002744:	21a4      	movs	r1, #164	@ 0xa4
 8002746:	2053      	movs	r0, #83	@ 0x53
 8002748:	f7ff f8e6 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 800274c:	2200      	movs	r2, #0
 800274e:	2101      	movs	r1, #1
 8002750:	2052      	movs	r0, #82	@ 0x52
 8002752:	f7ff f8e1 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	2051      	movs	r0, #81	@ 0x51
 800275c:	f7ff f8dc 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	2050      	movs	r0, #80	@ 0x50
 8002766:	f7ff f8d7 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 800276a:	2200      	movs	r2, #0
 800276c:	2120      	movs	r1, #32
 800276e:	203f      	movs	r0, #63	@ 0x3f
 8002770:	f7ff f8d2 	bl	8001918 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002774:	2200      	movs	r2, #0
 8002776:	21b7      	movs	r1, #183	@ 0xb7
 8002778:	2033      	movs	r0, #51	@ 0x33
 800277a:	f7ff f8cd 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 800277e:	2200      	movs	r2, #0
 8002780:	2154      	movs	r1, #84	@ 0x54
 8002782:	2034      	movs	r0, #52	@ 0x34
 8002784:	f7ff f8c8 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002788:	2200      	movs	r2, #0
 800278a:	212a      	movs	r1, #42	@ 0x2a
 800278c:	2035      	movs	r0, #53	@ 0x35
 800278e:	f7ff f8c3 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002792:	2200      	movs	r2, #0
 8002794:	213e      	movs	r1, #62	@ 0x3e
 8002796:	2036      	movs	r0, #54	@ 0x36
 8002798:	f7ff f8be 	bl	8001918 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 800279c:	481e      	ldr	r0, [pc, #120]	@ (8002818 <S2LP_Init+0x128>)
 800279e:	f7ff fa8f 	bl	8001cc0 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff ff7a 	bl	800269c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 80027a8:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 80027ac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff ff33 	bl	800261c <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 80027b6:	2200      	movs	r2, #0
 80027b8:	2120      	movs	r1, #32
 80027ba:	2030      	movs	r0, #48	@ 0x30
 80027bc:	f7ff f8ac 	bl	8001918 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	202e      	movs	r0, #46	@ 0x2e
 80027c6:	f7ff f8a7 	bl	8001918 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	f107 030b 	add.w	r3, r7, #11
 80027d2:	4619      	mov	r1, r3
 80027d4:	206c      	movs	r0, #108	@ 0x6c
 80027d6:	f7ff f861 	bl	800189c <S2LP_ReadReg>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]
	if (err) {
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <S2LP_Init+0xf8>
		return err;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	e00d      	b.n	8002804 <S2LP_Init+0x114>
	} else if (rco_conf != 0x45) {
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	2b45      	cmp	r3, #69	@ 0x45
 80027ec:	d001      	beq.n	80027f2 <S2LP_Init+0x102>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
		return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e008      	b.n	8002804 <S2LP_Init+0x114>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <S2LP_Init+0x112>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
		return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <S2LP_Init+0x114>
	}

	return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200002a8 	.word	0x200002a8
 8002810:	1b4e81b5 	.word	0x1b4e81b5
 8002814:	48001400 	.word	0x48001400
 8002818:	337f9800 	.word	0x337f9800

0800281c <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	20fc      	movs	r0, #252	@ 0xfc
 800282a:	f7ff f837 	bl	800189c <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	2200      	movs	r2, #0
 8002832:	4619      	mov	r1, r3
 8002834:	20fd      	movs	r0, #253	@ 0xfd
 8002836:	f7ff f831 	bl	800189c <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <S2LP_IRQ_Handler+0x58>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 800284a:	79bb      	ldrb	r3, [r7, #6]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <S2LP_IRQ_Handler+0x5c>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <S2LP_IRQ_Handler+0x60>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002ad 	.word	0x200002ad
 8002878:	200002ae 	.word	0x200002ae
 800287c:	200002ac 	.word	0x200002ac

08002880 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002884:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <MX_SPI1_Init+0x74>)
 8002886:	4a1c      	ldr	r2, [pc, #112]	@ (80028f8 <MX_SPI1_Init+0x78>)
 8002888:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <MX_SPI1_Init+0x74>)
 800288c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002890:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <MX_SPI1_Init+0x74>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <MX_SPI1_Init+0x74>)
 800289a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800289e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028ce:	2207      	movs	r2, #7
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028da:	2208      	movs	r2, #8
 80028dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <MX_SPI1_Init+0x74>)
 80028e0:	f003 faf6 	bl	8005ed0 <HAL_SPI_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80028ea:	f7fe fea9 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200002b0 	.word	0x200002b0
 80028f8:	40013000 	.word	0x40013000

080028fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_SPI_MspInit+0xb8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d145      	bne.n	80029aa <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800291e:	4b26      	ldr	r3, [pc, #152]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	4a25      	ldr	r2, [pc, #148]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002928:	6613      	str	r3, [r2, #96]	@ 0x60
 800292a:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800294e:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <HAL_SPI_MspInit+0xbc>)
 800295c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002966:	23c0      	movs	r3, #192	@ 0xc0
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002976:	2305      	movs	r3, #5
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002984:	f001 fd92 	bl	80044ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002988:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800298c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298e:	2302      	movs	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002996:	2303      	movs	r3, #3
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800299a:	2305      	movs	r3, #5
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299e:	f107 0314 	add.w	r3, r7, #20
 80029a2:	4619      	mov	r1, r3
 80029a4:	4805      	ldr	r0, [pc, #20]	@ (80029bc <HAL_SPI_MspInit+0xc0>)
 80029a6:	f001 fd81 	bl	80044ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	@ 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40013000 	.word	0x40013000
 80029b8:	40021000 	.word	0x40021000
 80029bc:	48001000 	.word	0x48001000

080029c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_MspInit+0x44>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <HAL_MspInit+0x44>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80029d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_MspInit+0x44>)
 80029d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_MspInit+0x44>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_MspInit+0x44>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_MspInit+0x44>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <NMI_Handler+0x4>

08002a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <MemManage_Handler+0x4>

08002a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5e:	f000 f97f 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f001 fec8 	bl	8004800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <DMA1_Channel1_IRQHandler+0x10>)
 8002a7a:	f001 fc67 	bl	800434c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000258 	.word	0x20000258

08002a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <TIM3_IRQHandler+0x10>)
 8002a8e:	f003 ff05 	bl	800689c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000318 	.word	0x20000318

08002a9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002aa0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002aa4:	f001 feac 	bl	8004800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab4:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <_sbrk+0x5c>)
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <_sbrk+0x60>)
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac0:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <_sbrk+0x64>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <_sbrk+0x68>)
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <_sbrk+0x64>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d207      	bcs.n	8002aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002adc:	f005 fb4c 	bl	8008178 <__errno>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aea:	e009      	b.n	8002b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <_sbrk+0x64>)
 8002afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20050000 	.word	0x20050000
 8002b0c:	00000400 	.word	0x00000400
 8002b10:	20000314 	.word	0x20000314
 8002b14:	20000540 	.word	0x20000540

08002b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <SystemInit+0x5c>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <SystemInit+0x5c>)
 8002b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <SystemInit+0x60>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a11      	ldr	r2, [pc, #68]	@ (8002b78 <SystemInit+0x60>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <SystemInit+0x60>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <SystemInit+0x60>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0d      	ldr	r2, [pc, #52]	@ (8002b78 <SystemInit+0x60>)
 8002b44:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002b48:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002b4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <SystemInit+0x60>)
 8002b50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <SystemInit+0x60>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <SystemInit+0x60>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <SystemInit+0x60>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000ed00 	.word	0xe000ed00
 8002b78:	40021000 	.word	0x40021000

08002b7c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b82:	f107 0310 	add.w	r3, r7, #16
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <MX_TIM3_Init+0x98>)
 8002b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002ba2:	2217      	movs	r2, #23
 8002ba4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 195;
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bae:	22c3      	movs	r2, #195	@ 0xc3
 8002bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb2:	4b17      	ldr	r3, [pc, #92]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bbe:	4814      	ldr	r0, [pc, #80]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bc0:	f003 fdac 	bl	800671c <HAL_TIM_Base_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bca:	f7fe fd39 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480d      	ldr	r0, [pc, #52]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bdc:	f003 ff65 	bl	8006aaa <HAL_TIM_ConfigClockSource>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002be6:	f7fe fd2b 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002bea:	2320      	movs	r3, #32
 8002bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4806      	ldr	r0, [pc, #24]	@ (8002c10 <MX_TIM3_Init+0x94>)
 8002bf8:	f004 f992 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c02:	f7fe fd1d 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000318 	.word	0x20000318
 8002c14:	40000400 	.word	0x40000400

08002c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_TIM_Base_MspInit+0x44>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d113      	bne.n	8002c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_TIM_Base_MspInit+0x48>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	201d      	movs	r0, #29
 8002c48:	f001 fa91 	bl	800416e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c4c:	201d      	movs	r0, #29
 8002c4e:	f001 faaa 	bl	80041a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40021000 	.word	0x40021000

08002c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c68:	f7ff ff56 	bl	8002b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c6e:	e003      	b.n	8002c78 <LoopCopyDataInit>

08002c70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c76:	3104      	adds	r1, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c78:	480a      	ldr	r0, [pc, #40]	@ (8002ca4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c80:	d3f6      	bcc.n	8002c70 <CopyDataInit>
	ldr	r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c84:	e002      	b.n	8002c8c <LoopFillZerobss>

08002c86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c88:	f842 3b04 	str.w	r3, [r2], #4

08002c8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <LoopForever+0x16>)
	cmp	r2, r3
 8002c8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c90:	d3f9      	bcc.n	8002c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c92:	f005 fa77 	bl	8008184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c96:	f7fe fc4f 	bl	8001538 <main>

08002c9a <LoopForever>:

LoopForever:
    b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c9c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002ca0:	0800a310 	.word	0x0800a310
	ldr	r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ca8:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002cac:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002cb0:	2000053c 	.word	0x2000053c

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>

08002cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f001 fa49 	bl	8004158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f000 f80e 	bl	8002ce8 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	e001      	b.n	8002cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd8:	f7ff fe72 	bl	80029c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_InitTick+0x6c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d023      	beq.n	8002d44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cfc:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_InitTick+0x70>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_InitTick+0x6c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 fa55 	bl	80041c2 <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d809      	bhi.n	8002d38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d2c:	f001 fa1f 	bl	800416e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d30:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <HAL_InitTick+0x74>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e004      	b.n	8002d48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
 8002d42:	e001      	b.n	8002d48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	200003ec 	.word	0x200003ec

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	200003ec 	.word	0x200003ec

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3360      	adds	r3, #96	@ 0x60
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <LL_ADC_SetOffset+0x44>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	03fff000 	.word	0x03fff000

08002e98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3360      	adds	r3, #96	@ 0x60
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3360      	adds	r3, #96	@ 0x60
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	615a      	str	r2, [r3, #20]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3330      	adds	r3, #48	@ 0x30
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	4413      	add	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	211f      	movs	r1, #31
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 011f 	and.w	r1, r3, #31
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	fa01 f303 	lsl.w	r3, r1, r3
 8002f66:	431a      	orrs	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3314      	adds	r3, #20
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	0e5b      	lsrs	r3, r3, #25
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	4413      	add	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	0d1b      	lsrs	r3, r3, #20
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2107      	movs	r1, #7
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	401a      	ands	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	0d1b      	lsrs	r3, r3, #20
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0318 	and.w	r3, r3, #24
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ff4:	40d9      	lsrs	r1, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003006:	bf00      	nop
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	0007ffff 	.word	0x0007ffff

08003018 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003028:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6093      	str	r3, [r2, #8]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800304c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003050:	d101      	bne.n	8003056 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003078:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030a0:	d101      	bne.n	80030a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030c8:	f043 0202 	orr.w	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <LL_ADC_IsEnabled+0x18>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <LL_ADC_IsEnabled+0x1a>
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d101      	bne.n	800311a <LL_ADC_IsDisableOngoing+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <LL_ADC_IsDisableOngoing+0x1a>
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d101      	bne.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d101      	bne.n	8003166 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	@ 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e133      	b.n	80033f6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fd ff05 	bl	8000fac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff41 	bl	800303c <LL_ADC_IsDeepPowerDownEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff27 	bl	8003018 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff5c 	bl	800308c <LL_ADC_IsInternalRegulatorEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d115      	bne.n	8003206 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff40 	bl	8003064 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b86      	ldr	r3, [pc, #536]	@ (8003400 <HAL_ADC_Init+0x28c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a86      	ldr	r2, [pc, #536]	@ (8003404 <HAL_ADC_Init+0x290>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031f8:	e002      	b.n	8003200 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f9      	bne.n	80031fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff3e 	bl	800308c <LL_ADC_IsInternalRegulatorEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10d      	bne.n	8003232 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f043 0210 	orr.w	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff76 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 800323c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80cc 	bne.w	80033e4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 80c8 	bne.w	80033e4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003258:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800325c:	f043 0202 	orr.w	r2, r3, #2
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff37 	bl	80030dc <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d115      	bne.n	80032a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003274:	4864      	ldr	r0, [pc, #400]	@ (8003408 <HAL_ADC_Init+0x294>)
 8003276:	f7ff ff31 	bl	80030dc <LL_ADC_IsEnabled>
 800327a:	4604      	mov	r4, r0
 800327c:	4863      	ldr	r0, [pc, #396]	@ (800340c <HAL_ADC_Init+0x298>)
 800327e:	f7ff ff2d 	bl	80030dc <LL_ADC_IsEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	431c      	orrs	r4, r3
 8003286:	4862      	ldr	r0, [pc, #392]	@ (8003410 <HAL_ADC_Init+0x29c>)
 8003288:	f7ff ff28 	bl	80030dc <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	4323      	orrs	r3, r4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	485e      	ldr	r0, [pc, #376]	@ (8003414 <HAL_ADC_Init+0x2a0>)
 800329c:	f7ff fda4 	bl	8002de8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	3b01      	subs	r3, #1
 80032d4:	045b      	lsls	r3, r3, #17
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <HAL_ADC_Init+0x2a4>)
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	430b      	orrs	r3, r1
 800330a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff1c 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 8003316:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d140      	bne.n	80033a0 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d13d      	bne.n	80033a0 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	7e1b      	ldrb	r3, [r3, #24]
 800332c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800332e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003336:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003346:	f023 0306 	bic.w	r3, r3, #6
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	69b9      	ldr	r1, [r7, #24]
 8003350:	430b      	orrs	r3, r1
 8003352:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800335a:	2b01      	cmp	r3, #1
 800335c:	d118      	bne.n	8003390 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003380:	430a      	orrs	r2, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	e007      	b.n	80033a0 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10c      	bne.n	80033c2 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	f023 010f 	bic.w	r1, r3, #15
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c0:	e007      	b.n	80033d2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 020f 	bic.w	r2, r2, #15
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80033e2:	e007      	b.n	80033f4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000
 8003404:	053e2d63 	.word	0x053e2d63
 8003408:	50040000 	.word	0x50040000
 800340c:	50040100 	.word	0x50040100
 8003410:	50040200 	.word	0x50040200
 8003414:	50040300 	.word	0x50040300
 8003418:	fff0c007 	.word	0xfff0c007

0800341c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b0b6      	sub	sp, #216	@ 0xd8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADC_ConfigChannel+0x22>
 800343a:	2302      	movs	r3, #2
 800343c:	e3e3      	b.n	8003c06 <HAL_ADC_ConfigChannel+0x7ea>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fe6c 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 83c4 	bne.w	8003be0 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b05      	cmp	r3, #5
 8003466:	d824      	bhi.n	80034b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	3b02      	subs	r3, #2
 800346e:	2b03      	cmp	r3, #3
 8003470:	d81b      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0x8e>
 8003472:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_ADC_ConfigChannel+0x5c>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	08003489 	.word	0x08003489
 800347c:	08003491 	.word	0x08003491
 8003480:	08003499 	.word	0x08003499
 8003484:	080034a1 	.word	0x080034a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003488:	230c      	movs	r3, #12
 800348a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800348e:	e010      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003490:	2312      	movs	r3, #18
 8003492:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003496:	e00c      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003498:	2318      	movs	r3, #24
 800349a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800349e:	e008      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80034a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80034a8:	e003      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80034aa:	2306      	movs	r3, #6
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80034b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80034c0:	f7ff fd2e 	bl	8002f20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fe2d 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 80034ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe39 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 80034dc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 81bf 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 81ba 	bne.w	8003868 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034fc:	d10f      	bne.n	800351e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	4619      	mov	r1, r3
 800350a:	f7ff fd35 	bl	8002f78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fcef 	bl	8002efa <LL_ADC_SetSamplingTimeCommonConfig>
 800351c:	e00e      	b.n	800353c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	461a      	mov	r2, r3
 800352c:	f7ff fd24 	bl	8002f78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fcdf 	bl	8002efa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	08db      	lsrs	r3, r3, #3
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00a      	beq.n	8003574 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800356e:	f7ff fc6f 	bl	8002e50 <LL_ADC_SetOffset>
 8003572:	e179      	b.n	8003868 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fc8c 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x184>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff fc81 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x1c2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff fc76 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80035c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80035d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x1da>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e018      	b.n	8003628 <HAL_ADC_ConfigChannel+0x20c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800360a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800360e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003612:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800361e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fc45 	bl	8002ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fc29 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x24a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fc1e 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x288>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fc13 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003688:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800368c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x2a0>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e018      	b.n	80036ee <HAL_ADC_ConfigChannel+0x2d2>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80036d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80036d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e004      	b.n	80036ee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80036e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d106      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2101      	movs	r1, #1
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fbe2 	bl	8002ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fbc6 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x310>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fbbb 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003722:	4603      	mov	r3, r0
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	e01e      	b.n	800376a <HAL_ADC_ConfigChannel+0x34e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2102      	movs	r1, #2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fbb0 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 8003738:	4603      	mov	r3, r0
 800373a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800374a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800375a:	2320      	movs	r3, #32
 800375c:	e004      	b.n	8003768 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800375e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x366>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	e014      	b.n	80037ac <HAL_ADC_ConfigChannel+0x390>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003792:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800379e:	2320      	movs	r3, #32
 80037a0:	e004      	b.n	80037ac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80037a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d106      	bne.n	80037be <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2102      	movs	r1, #2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fb83 	bl	8002ec4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2103      	movs	r1, #3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fb67 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x3ce>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2103      	movs	r1, #3
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fb5c 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 80037e0:	4603      	mov	r3, r0
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	e017      	b.n	800381a <HAL_ADC_ConfigChannel+0x3fe>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2103      	movs	r1, #3
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fb51 	bl	8002e98 <LL_ADC_GetOffsetChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003804:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x416>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	0e9b      	lsrs	r3, r3, #26
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	e011      	b.n	8003856 <HAL_ADC_ConfigChannel+0x43a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003842:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800384e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003856:	429a      	cmp	r2, r3
 8003858:	d106      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	2103      	movs	r1, #3
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fb2e 	bl	8002ec4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fc35 	bl	80030dc <LL_ADC_IsEnabled>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 813f 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f7ff fba2 	bl	8002fd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a8e      	ldr	r2, [pc, #568]	@ (8003acc <HAL_ADC_ConfigChannel+0x6b0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f040 8130 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x4a4>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0e9b      	lsrs	r3, r3, #26
 80038ae:	3301      	adds	r3, #1
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e019      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x4d8>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80038ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80038d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80038dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	bf94      	ite	ls
 80038ee:	2301      	movls	r3, #1
 80038f0:	2300      	movhi	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d079      	beq.n	80039ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x4f8>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	3301      	adds	r3, #1
 800390c:	069b      	lsls	r3, r3, #26
 800390e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003912:	e015      	b.n	8003940 <HAL_ADC_ConfigChannel+0x524>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003924:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003926:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	3301      	adds	r3, #1
 800393a:	069b      	lsls	r3, r3, #26
 800393c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x544>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	e017      	b.n	8003990 <HAL_ADC_ConfigChannel+0x574>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800396e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003978:	2320      	movs	r3, #32
 800397a:	e003      	b.n	8003984 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800397c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	ea42 0103 	orr.w	r1, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x59a>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	3301      	adds	r3, #1
 80039a8:	f003 021f 	and.w	r2, r3, #31
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	051b      	lsls	r3, r3, #20
 80039b4:	e018      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x5cc>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80039c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e003      	b.n	80039da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	fab3 f383 	clz	r3, r3
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e8:	430b      	orrs	r3, r1
 80039ea:	e080      	b.n	8003aee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d107      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x5ec>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	069b      	lsls	r3, r3, #26
 8003a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a06:	e015      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x618>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	069b      	lsls	r3, r3, #26
 8003a30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x638>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0e9b      	lsrs	r3, r3, #26
 8003a46:	3301      	adds	r3, #1
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	e017      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x668>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	61bb      	str	r3, [r7, #24]
  return result;
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	e003      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	ea42 0103 	orr.w	r1, r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x694>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3b1e      	subs	r3, #30
 8003aa8:	051b      	lsls	r3, r3, #20
 8003aaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aae:	e01d      	b.n	8003aec <HAL_ADC_ConfigChannel+0x6d0>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	60fb      	str	r3, [r7, #12]
  return result;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e005      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x6bc>
 8003acc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3b1e      	subs	r3, #30
 8003ae6:	051b      	lsls	r3, r3, #20
 8003ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7ff fa40 	bl	8002f78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <HAL_ADC_ConfigChannel+0x7f4>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d07a      	beq.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b04:	4843      	ldr	r0, [pc, #268]	@ (8003c14 <HAL_ADC_ConfigChannel+0x7f8>)
 8003b06:	f7ff f995 	bl	8002e34 <LL_ADC_GetCommonPathInternalCh>
 8003b0a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <HAL_ADC_ConfigChannel+0x7fc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d12c      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d126      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3c      	ldr	r2, [pc, #240]	@ (8003c1c <HAL_ADC_ConfigChannel+0x800>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_ADC_ConfigChannel+0x71c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	@ (8003c20 <HAL_ADC_ConfigChannel+0x804>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d15d      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b40:	4619      	mov	r1, r3
 8003b42:	4834      	ldr	r0, [pc, #208]	@ (8003c14 <HAL_ADC_ConfigChannel+0x7f8>)
 8003b44:	f7ff f963 	bl	8002e0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_ADC_ConfigChannel+0x808>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	4a36      	ldr	r2, [pc, #216]	@ (8003c28 <HAL_ADC_ConfigChannel+0x80c>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b62:	e002      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f9      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b70:	e040      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2d      	ldr	r2, [pc, #180]	@ (8003c2c <HAL_ADC_ConfigChannel+0x810>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d118      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d112      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a23      	ldr	r2, [pc, #140]	@ (8003c1c <HAL_ADC_ConfigChannel+0x800>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_ADC_ConfigChannel+0x780>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <HAL_ADC_ConfigChannel+0x804>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d12d      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	481b      	ldr	r0, [pc, #108]	@ (8003c14 <HAL_ADC_ConfigChannel+0x7f8>)
 8003ba8:	f7ff f931 	bl	8002e0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bac:	e024      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <HAL_ADC_ConfigChannel+0x814>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d120      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11a      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a14      	ldr	r2, [pc, #80]	@ (8003c1c <HAL_ADC_ConfigChannel+0x800>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d115      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	480e      	ldr	r0, [pc, #56]	@ (8003c14 <HAL_ADC_ConfigChannel+0x7f8>)
 8003bda:	f7ff f918 	bl	8002e0e <LL_ADC_SetCommonPathInternalCh>
 8003bde:	e00c      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	f043 0220 	orr.w	r2, r3, #32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003bf2:	e002      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bf4:	bf00      	nop
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003c02:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	37d8      	adds	r7, #216	@ 0xd8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	80080000 	.word	0x80080000
 8003c14:	50040300 	.word	0x50040300
 8003c18:	c7520000 	.word	0xc7520000
 8003c1c:	50040000 	.word	0x50040000
 8003c20:	50040200 	.word	0x50040200
 8003c24:	20000000 	.word	0x20000000
 8003c28:	053e2d63 	.word	0x053e2d63
 8003c2c:	cb840000 	.word	0xcb840000
 8003c30:	80000001 	.word	0x80000001

08003c34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fa5e 	bl	8003102 <LL_ADC_IsDisableOngoing>
 8003c46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fa45 	bl	80030dc <LL_ADC_IsEnabled>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d047      	beq.n	8003ce8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d144      	bne.n	8003ce8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030d 	and.w	r3, r3, #13
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fa1f 	bl	80030b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c7e:	f7ff f883 	bl	8002d88 <HAL_GetTick>
 8003c82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c84:	e029      	b.n	8003cda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e023      	b.n	8003cea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ca2:	f7ff f871 	bl	8002d88 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d914      	bls.n	8003cda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e007      	b.n	8003cea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1dc      	bne.n	8003ca2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <LL_ADC_IsEnabled>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_IsEnabled+0x18>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_IsEnabled+0x1a>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_StartCalibration>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_ADC_IsCalibrationOnGoing>:
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d5e:	d101      	bne.n	8003d64 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d101      	bne.n	8003d8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e04d      	b.n	8003e50 <HAL_ADCEx_Calibration_Start+0xb8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff39 	bl	8003c34 <ADC_Disable>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d136      	bne.n	8003e3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dd4:	f023 0302 	bic.w	r3, r3, #2
 8003dd8:	f043 0202 	orr.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff ff96 	bl	8003d18 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dec:	e014      	b.n	8003e18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003dfa:	d30d      	bcc.n	8003e18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f023 0312 	bic.w	r3, r3, #18
 8003e04:	f043 0210 	orr.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e01b      	b.n	8003e50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff94 	bl	8003d4a <LL_ADC_IsCalibrationOnGoing>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e2      	bne.n	8003dee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2c:	f023 0303 	bic.w	r3, r3, #3
 8003e30:	f043 0201 	orr.w	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e38:	e005      	b.n	8003e46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3e:	f043 0210 	orr.w	r2, r3, #16
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b0a1      	sub	sp, #132	@ 0x84
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e093      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e82:	2300      	movs	r3, #0
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a47      	ldr	r2, [pc, #284]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d102      	bne.n	8003e96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e90:	4b46      	ldr	r3, [pc, #280]	@ (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e001      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e072      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff59 	bl	8003d72 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff53 	bl	8003d72 <LL_ADC_REG_IsConversionOngoing>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d154      	bne.n	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d151      	bne.n	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003eda:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02c      	beq.n	8003f3e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ef6:	035b      	lsls	r3, r3, #13
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003efe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f00:	4829      	ldr	r0, [pc, #164]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f02:	f7ff fef6 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f06:	4604      	mov	r4, r0
 8003f08:	4828      	ldr	r0, [pc, #160]	@ (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f0a:	f7ff fef2 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	431c      	orrs	r4, r3
 8003f12:	4828      	ldr	r0, [pc, #160]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f14:	f7ff feed 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4323      	orrs	r3, r4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d137      	bne.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	6811      	ldr	r1, [r2, #0]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	6892      	ldr	r2, [r2, #8]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f3a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3c:	e028      	b.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f48:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f4a:	4817      	ldr	r0, [pc, #92]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f4c:	f7ff fed1 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f50:	4604      	mov	r4, r0
 8003f52:	4816      	ldr	r0, [pc, #88]	@ (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f54:	f7ff fecd 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	431c      	orrs	r4, r3
 8003f5c:	4815      	ldr	r0, [pc, #84]	@ (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f5e:	f7ff fec8 	bl	8003cf2 <LL_ADC_IsEnabled>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4323      	orrs	r3, r4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d112      	bne.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f72:	f023 030f 	bic.w	r3, r3, #15
 8003f76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003f78:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f7a:	e009      	b.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f8e:	e000      	b.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3784      	adds	r7, #132	@ 0x84
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	50040000 	.word	0x50040000
 8003fac:	50040100 	.word	0x50040100
 8003fb0:	50040300 	.word	0x50040300
 8003fb4:	50040200 	.word	0x50040200

08003fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fea:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <__NVIC_SetPriorityGrouping+0x44>)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	60d3      	str	r3, [r2, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000ed00 	.word	0xe000ed00

08004000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <__NVIC_GetPriorityGrouping+0x18>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	f003 0307 	and.w	r3, r3, #7
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	db0b      	blt.n	8004046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 021f 	and.w	r2, r3, #31
 8004034:	4907      	ldr	r1, [pc, #28]	@ (8004054 <__NVIC_EnableIRQ+0x38>)
 8004036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	2001      	movs	r0, #1
 800403e:	fa00 f202 	lsl.w	r2, r0, r2
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	e000e100 	.word	0xe000e100

08004058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	6039      	str	r1, [r7, #0]
 8004062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db0a      	blt.n	8004082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	490c      	ldr	r1, [pc, #48]	@ (80040a4 <__NVIC_SetPriority+0x4c>)
 8004072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004076:	0112      	lsls	r2, r2, #4
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	440b      	add	r3, r1
 800407c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004080:	e00a      	b.n	8004098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	4908      	ldr	r1, [pc, #32]	@ (80040a8 <__NVIC_SetPriority+0x50>)
 8004088:	79fb      	ldrb	r3, [r7, #7]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	3b04      	subs	r3, #4
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	440b      	add	r3, r1
 8004096:	761a      	strb	r2, [r3, #24]
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	e000e100 	.word	0xe000e100
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f1c3 0307 	rsb	r3, r3, #7
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	bf28      	it	cs
 80040ca:	2304      	movcs	r3, #4
 80040cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3304      	adds	r3, #4
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d902      	bls.n	80040dc <NVIC_EncodePriority+0x30>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3b03      	subs	r3, #3
 80040da:	e000      	b.n	80040de <NVIC_EncodePriority+0x32>
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	401a      	ands	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43d9      	mvns	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004104:	4313      	orrs	r3, r2
         );
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004124:	d301      	bcc.n	800412a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004126:	2301      	movs	r3, #1
 8004128:	e00f      	b.n	800414a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412a:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <SysTick_Config+0x40>)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004132:	210f      	movs	r1, #15
 8004134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004138:	f7ff ff8e 	bl	8004058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <SysTick_Config+0x40>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004142:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <SysTick_Config+0x40>)
 8004144:	2207      	movs	r2, #7
 8004146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	e000e010 	.word	0xe000e010

08004158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ff29 	bl	8003fb8 <__NVIC_SetPriorityGrouping>
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	4603      	mov	r3, r0
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004180:	f7ff ff3e 	bl	8004000 <__NVIC_GetPriorityGrouping>
 8004184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff8e 	bl	80040ac <NVIC_EncodePriority>
 8004190:	4602      	mov	r2, r0
 8004192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff5d 	bl	8004058 <__NVIC_SetPriority>
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff31 	bl	800401c <__NVIC_EnableIRQ>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ffa2 	bl	8004114 <SysTick_Config>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e098      	b.n	8004320 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b4d      	ldr	r3, [pc, #308]	@ (800432c <HAL_DMA_Init+0x150>)
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d80f      	bhi.n	800421a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <HAL_DMA_Init+0x154>)
 8004202:	4413      	add	r3, r2
 8004204:	4a4b      	ldr	r2, [pc, #300]	@ (8004334 <HAL_DMA_Init+0x158>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	009a      	lsls	r2, r3, #2
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a48      	ldr	r2, [pc, #288]	@ (8004338 <HAL_DMA_Init+0x15c>)
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40
 8004218:	e00e      	b.n	8004238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b46      	ldr	r3, [pc, #280]	@ (800433c <HAL_DMA_Init+0x160>)
 8004222:	4413      	add	r3, r2
 8004224:	4a43      	ldr	r2, [pc, #268]	@ (8004334 <HAL_DMA_Init+0x158>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	009a      	lsls	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a42      	ldr	r2, [pc, #264]	@ (8004340 <HAL_DMA_Init+0x164>)
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800424e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800425c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004292:	d039      	beq.n	8004308 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <HAL_DMA_Init+0x15c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d11a      	bne.n	80042d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800429e:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_DMA_Init+0x168>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f003 031c 	and.w	r3, r3, #28
 80042aa:	210f      	movs	r1, #15
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	4924      	ldr	r1, [pc, #144]	@ (8004344 <HAL_DMA_Init+0x168>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042b8:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <HAL_DMA_Init+0x168>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	f003 031c 	and.w	r3, r3, #28
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	491d      	ldr	r1, [pc, #116]	@ (8004344 <HAL_DMA_Init+0x168>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
 80042d2:	e019      	b.n	8004308 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80042d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004348 <HAL_DMA_Init+0x16c>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042dc:	f003 031c 	and.w	r3, r3, #28
 80042e0:	210f      	movs	r1, #15
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	4917      	ldr	r1, [pc, #92]	@ (8004348 <HAL_DMA_Init+0x16c>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80042ee:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <HAL_DMA_Init+0x16c>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f003 031c 	and.w	r3, r3, #28
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	4911      	ldr	r1, [pc, #68]	@ (8004348 <HAL_DMA_Init+0x16c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40020407 	.word	0x40020407
 8004330:	bffdfff8 	.word	0xbffdfff8
 8004334:	cccccccd 	.word	0xcccccccd
 8004338:	40020000 	.word	0x40020000
 800433c:	bffdfbf8 	.word	0xbffdfbf8
 8004340:	40020400 	.word	0x40020400
 8004344:	400200a8 	.word	0x400200a8
 8004348:	400204a8 	.word	0x400204a8

0800434c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	f003 031c 	and.w	r3, r3, #28
 800436c:	2204      	movs	r2, #4
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d026      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7a>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d021      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	f003 021c 	and.w	r2, r3, #28
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2104      	movs	r1, #4
 80043ae:	fa01 f202 	lsl.w	r2, r1, r2
 80043b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d071      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043c4:	e06c      	b.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f003 031c 	and.w	r3, r3, #28
 80043ce:	2202      	movs	r2, #2
 80043d0:	409a      	lsls	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02e      	beq.n	8004438 <HAL_DMA_IRQHandler+0xec>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d029      	beq.n	8004438 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 020a 	bic.w	r2, r2, #10
 8004400:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f003 021c 	and.w	r2, r3, #28
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2102      	movs	r1, #2
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d038      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004436:	e033      	b.n	80044a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	f003 031c 	and.w	r3, r3, #28
 8004440:	2208      	movs	r2, #8
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02a      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d025      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 020e 	bic.w	r2, r2, #14
 8004464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 021c 	and.w	r2, r3, #28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	2101      	movs	r1, #1
 8004474:	fa01 f202 	lsl.w	r2, r1, r2
 8004478:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
}
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ba:	e166      	b.n	800478a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8158 	beq.w	8004784 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d005      	beq.n	80044ec <HAL_GPIO_Init+0x40>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d130      	bne.n	800454e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	2203      	movs	r2, #3
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4013      	ands	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004522:	2201      	movs	r2, #1
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0201 	and.w	r2, r3, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d017      	beq.n	800458a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d123      	bne.n	80045de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	08da      	lsrs	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3208      	adds	r2, #8
 800459e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	08da      	lsrs	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3208      	adds	r2, #8
 80045d8:	6939      	ldr	r1, [r7, #16]
 80045da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0203 	and.w	r2, r3, #3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80b2 	beq.w	8004784 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004620:	4b61      	ldr	r3, [pc, #388]	@ (80047a8 <HAL_GPIO_Init+0x2fc>)
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	4a60      	ldr	r2, [pc, #384]	@ (80047a8 <HAL_GPIO_Init+0x2fc>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6613      	str	r3, [r2, #96]	@ 0x60
 800462c:	4b5e      	ldr	r3, [pc, #376]	@ (80047a8 <HAL_GPIO_Init+0x2fc>)
 800462e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004638:	4a5c      	ldr	r2, [pc, #368]	@ (80047ac <HAL_GPIO_Init+0x300>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	089b      	lsrs	r3, r3, #2
 800463e:	3302      	adds	r3, #2
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	220f      	movs	r2, #15
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004662:	d02b      	beq.n	80046bc <HAL_GPIO_Init+0x210>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a52      	ldr	r2, [pc, #328]	@ (80047b0 <HAL_GPIO_Init+0x304>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d025      	beq.n	80046b8 <HAL_GPIO_Init+0x20c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a51      	ldr	r2, [pc, #324]	@ (80047b4 <HAL_GPIO_Init+0x308>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01f      	beq.n	80046b4 <HAL_GPIO_Init+0x208>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a50      	ldr	r2, [pc, #320]	@ (80047b8 <HAL_GPIO_Init+0x30c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d019      	beq.n	80046b0 <HAL_GPIO_Init+0x204>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a4f      	ldr	r2, [pc, #316]	@ (80047bc <HAL_GPIO_Init+0x310>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_GPIO_Init+0x200>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a4e      	ldr	r2, [pc, #312]	@ (80047c0 <HAL_GPIO_Init+0x314>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_GPIO_Init+0x1fc>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a4d      	ldr	r2, [pc, #308]	@ (80047c4 <HAL_GPIO_Init+0x318>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x1f8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a4c      	ldr	r2, [pc, #304]	@ (80047c8 <HAL_GPIO_Init+0x31c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_GPIO_Init+0x1f4>
 800469c:	2307      	movs	r3, #7
 800469e:	e00e      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a0:	2308      	movs	r3, #8
 80046a2:	e00c      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a4:	2306      	movs	r3, #6
 80046a6:	e00a      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046a8:	2305      	movs	r3, #5
 80046aa:	e008      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046ac:	2304      	movs	r3, #4
 80046ae:	e006      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b0:	2303      	movs	r3, #3
 80046b2:	e004      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e002      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_GPIO_Init+0x212>
 80046bc:	2300      	movs	r3, #0
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	f002 0203 	and.w	r2, r2, #3
 80046c4:	0092      	lsls	r2, r2, #2
 80046c6:	4093      	lsls	r3, r2
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ce:	4937      	ldr	r1, [pc, #220]	@ (80047ac <HAL_GPIO_Init+0x300>)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046dc:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_GPIO_Init+0x320>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004700:	4a32      	ldr	r2, [pc, #200]	@ (80047cc <HAL_GPIO_Init+0x320>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <HAL_GPIO_Init+0x320>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472a:	4a28      	ldr	r2, [pc, #160]	@ (80047cc <HAL_GPIO_Init+0x320>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004730:	4b26      	ldr	r3, [pc, #152]	@ (80047cc <HAL_GPIO_Init+0x320>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43db      	mvns	r3, r3
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004754:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <HAL_GPIO_Init+0x320>)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800475a:	4b1c      	ldr	r3, [pc, #112]	@ (80047cc <HAL_GPIO_Init+0x320>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800477e:	4a13      	ldr	r2, [pc, #76]	@ (80047cc <HAL_GPIO_Init+0x320>)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3301      	adds	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f47f ae91 	bne.w	80044bc <HAL_GPIO_Init+0x10>
  }
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40010000 	.word	0x40010000
 80047b0:	48000400 	.word	0x48000400
 80047b4:	48000800 	.word	0x48000800
 80047b8:	48000c00 	.word	0x48000c00
 80047bc:	48001000 	.word	0x48001000
 80047c0:	48001400 	.word	0x48001400
 80047c4:	48001800 	.word	0x48001800
 80047c8:	48001c00 	.word	0x48001c00
 80047cc:	40010400 	.word	0x40010400

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800480a:	4b08      	ldr	r3, [pc, #32]	@ (800482c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	4013      	ands	r3, r2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004816:	4a05      	ldr	r2, [pc, #20]	@ (800482c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc fe72 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40010400 	.word	0x40010400

08004830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <HAL_PWREx_GetVoltageRange+0x18>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40007000 	.word	0x40007000

0800484c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485a:	d130      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800485c:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004868:	d038      	beq.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004872:	4a1e      	ldr	r2, [pc, #120]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004874:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800487a:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2232      	movs	r2, #50	@ 0x32
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	4a1b      	ldr	r2, [pc, #108]	@ (80048f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0c9b      	lsrs	r3, r3, #18
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004890:	e002      	b.n	8004898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3b01      	subs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004898:	4b14      	ldr	r3, [pc, #80]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048a4:	d102      	bne.n	80048ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f2      	bne.n	8004892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ac:	4b0f      	ldr	r3, [pc, #60]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b8:	d110      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d007      	beq.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048cc:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048d4:	4a05      	ldr	r2, [pc, #20]	@ (80048ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40007000 	.word	0x40007000
 80048f0:	20000000 	.word	0x20000000
 80048f4:	431bde83 	.word	0x431bde83

080048f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <HAL_PWREx_EnableVddIO2+0x1c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004906:	6053      	str	r3, [r2, #4]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40007000 	.word	0x40007000

08004918 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f000 bc08 	b.w	800513c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492c:	4b96      	ldr	r3, [pc, #600]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004936:	4b94      	ldr	r3, [pc, #592]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80e4 	beq.w	8004b16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_RCC_OscConfig+0x4c>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0c      	cmp	r3, #12
 8004958:	f040 808b 	bne.w	8004a72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b01      	cmp	r3, #1
 8004960:	f040 8087 	bne.w	8004a72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004964:	4b88      	ldr	r3, [pc, #544]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_OscConfig+0x64>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e3df      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1a      	ldr	r2, [r3, #32]
 8004980:	4b81      	ldr	r3, [pc, #516]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_RCC_OscConfig+0x7e>
 800498c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004994:	e005      	b.n	80049a2 <HAL_RCC_OscConfig+0x8a>
 8004996:	4b7c      	ldr	r3, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d223      	bcs.n	80049ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fd66 	bl	800547c <RCC_SetFlashLatencyFromMSIRange>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e3c0      	b.n	800513c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ba:	4b73      	ldr	r3, [pc, #460]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a72      	ldr	r2, [pc, #456]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049c0:	f043 0308 	orr.w	r3, r3, #8
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b70      	ldr	r3, [pc, #448]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	496d      	ldr	r1, [pc, #436]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4968      	ldr	r1, [pc, #416]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	e025      	b.n	8004a3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ee:	4b66      	ldr	r3, [pc, #408]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a65      	ldr	r2, [pc, #404]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049f4:	f043 0308 	orr.w	r3, r3, #8
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b63      	ldr	r3, [pc, #396]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4960      	ldr	r1, [pc, #384]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	495b      	ldr	r1, [pc, #364]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fd26 	bl	800547c <RCC_SetFlashLatencyFromMSIRange>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e380      	b.n	800513c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a3a:	f000 fc87 	bl	800534c <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b51      	ldr	r3, [pc, #324]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	4950      	ldr	r1, [pc, #320]	@ (8004b8c <HAL_RCC_OscConfig+0x274>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	4a4e      	ldr	r2, [pc, #312]	@ (8004b90 <HAL_RCC_OscConfig+0x278>)
 8004a58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <HAL_RCC_OscConfig+0x27c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe f942 	bl	8002ce8 <HAL_InitTick>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d052      	beq.n	8004b14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	e364      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d032      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a7a:	4b43      	ldr	r3, [pc, #268]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a42      	ldr	r2, [pc, #264]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a86:	f7fe f97f 	bl	8002d88 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a8e:	f7fe f97b 	bl	8002d88 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e34d      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa0:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aac:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a35      	ldr	r2, [pc, #212]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	f043 0308 	orr.w	r3, r3, #8
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b33      	ldr	r3, [pc, #204]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4930      	ldr	r1, [pc, #192]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aca:	4b2f      	ldr	r3, [pc, #188]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	492b      	ldr	r1, [pc, #172]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
 8004ade:	e01a      	b.n	8004b16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ae0:	4b29      	ldr	r3, [pc, #164]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aec:	f7fe f94c 	bl	8002d88 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004af4:	f7fe f948 	bl	8002d88 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e31a      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b06:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1dc>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d073      	beq.n	8004c0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_OscConfig+0x21c>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d10e      	bne.n	8004b4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b14      	ldr	r3, [pc, #80]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d063      	beq.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d15f      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e2f7      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x24c>
 8004b56:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e025      	b.n	8004bb0 <HAL_RCC_OscConfig+0x298>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b6c:	d114      	bne.n	8004b98 <HAL_RCC_OscConfig+0x280>
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a05      	ldr	r2, [pc, #20]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a02      	ldr	r2, [pc, #8]	@ (8004b88 <HAL_RCC_OscConfig+0x270>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e013      	b.n	8004bb0 <HAL_RCC_OscConfig+0x298>
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	08009f50 	.word	0x08009f50
 8004b90:	20000000 	.word	0x20000000
 8004b94:	20000004 	.word	0x20000004
 8004b98:	4ba0      	ldr	r3, [pc, #640]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a9f      	ldr	r2, [pc, #636]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a9c      	ldr	r2, [pc, #624]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d013      	beq.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fe f8e6 	bl	8002d88 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fe f8e2 	bl	8002d88 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	@ 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e2b4      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd2:	4b92      	ldr	r3, [pc, #584]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x2a8>
 8004bde:	e014      	b.n	8004c0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe f8d2 	bl	8002d88 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fe f8ce 	bl	8002d88 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	@ 0x64
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e2a0      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfa:	4b88      	ldr	r3, [pc, #544]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x2d0>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d060      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_OscConfig+0x310>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d119      	bne.n	8004c56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d116      	bne.n	8004c56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	4b7c      	ldr	r3, [pc, #496]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x328>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e27d      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b76      	ldr	r3, [pc, #472]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	4973      	ldr	r1, [pc, #460]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c54:	e040      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d023      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6e      	ldr	r2, [pc, #440]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c6a:	f7fe f88d 	bl	8002d88 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c72:	f7fe f889 	bl	8002d88 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e25b      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c84:	4b65      	ldr	r3, [pc, #404]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c90:	4b62      	ldr	r3, [pc, #392]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	495f      	ldr	r1, [pc, #380]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
 8004ca4:	e018      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5c      	ldr	r2, [pc, #368]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fe f869 	bl	8002d88 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cba:	f7fe f865 	bl	8002d88 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e237      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ccc:	4b53      	ldr	r3, [pc, #332]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cec:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fe f844 	bl	8002d88 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fe f840 	bl	8002d88 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e212      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d16:	4b41      	ldr	r3, [pc, #260]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <HAL_RCC_OscConfig+0x3ec>
 8004d24:	e01b      	b.n	8004d5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d26:	4b3d      	ldr	r3, [pc, #244]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fe f827 	bl	8002d88 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3e:	f7fe f823 	bl	8002d88 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1f5      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d50:	4b32      	ldr	r3, [pc, #200]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ef      	bne.n	8004d3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80a6 	beq.w	8004eb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d70:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d80:	4a26      	ldr	r2, [pc, #152]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d88:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d98:	4b21      	ldr	r3, [pc, #132]	@ (8004e20 <HAL_RCC_OscConfig+0x508>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d118      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <HAL_RCC_OscConfig+0x508>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e20 <HAL_RCC_OscConfig+0x508>)
 8004daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db0:	f7fd ffea 	bl	8002d88 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db8:	f7fd ffe6 	bl	8002d88 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1b8      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dca:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <HAL_RCC_OscConfig+0x508>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d108      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4d8>
 8004dde:	4b0f      	ldr	r3, [pc, #60]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dee:	e029      	b.n	8004e44 <HAL_RCC_OscConfig+0x52c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d115      	bne.n	8004e24 <HAL_RCC_OscConfig+0x50c>
 8004df8:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfe:	4a07      	ldr	r2, [pc, #28]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004e00:	f043 0304 	orr.w	r3, r3, #4
 8004e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e08:	4b04      	ldr	r3, [pc, #16]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	4a03      	ldr	r2, [pc, #12]	@ (8004e1c <HAL_RCC_OscConfig+0x504>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e18:	e014      	b.n	8004e44 <HAL_RCC_OscConfig+0x52c>
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40007000 	.word	0x40007000
 8004e24:	4b9d      	ldr	r3, [pc, #628]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	4a9c      	ldr	r2, [pc, #624]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e34:	4b99      	ldr	r3, [pc, #612]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	4a98      	ldr	r2, [pc, #608]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d016      	beq.n	8004e7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd ff9c 	bl	8002d88 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e52:	e00a      	b.n	8004e6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e54:	f7fd ff98 	bl	8002d88 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e168      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ed      	beq.n	8004e54 <HAL_RCC_OscConfig+0x53c>
 8004e78:	e015      	b.n	8004ea6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fd ff85 	bl	8002d88 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fd ff81 	bl	8002d88 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e151      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e98:	4b80      	ldr	r3, [pc, #512]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1ed      	bne.n	8004e82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eac:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d03c      	beq.n	8004f3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01c      	beq.n	8004f06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ecc:	4b73      	ldr	r3, [pc, #460]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ed2:	4a72      	ldr	r2, [pc, #456]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fd ff54 	bl	8002d88 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ee4:	f7fd ff50 	bl	8002d88 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e122      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ef6:	4b69      	ldr	r3, [pc, #420]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x5cc>
 8004f04:	e01b      	b.n	8004f3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f06:	4b65      	ldr	r3, [pc, #404]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f0c:	4a63      	ldr	r2, [pc, #396]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fd ff37 	bl	8002d88 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f1e:	f7fd ff33 	bl	8002d88 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e105      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f30:	4b5a      	ldr	r3, [pc, #360]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ef      	bne.n	8004f1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80f9 	beq.w	800513a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	f040 80cf 	bne.w	80050f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f52:	4b52      	ldr	r3, [pc, #328]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 0203 	and.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d12c      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	3b01      	subs	r3, #1
 8004f72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d123      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d11b      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d113      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d109      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d071      	beq.n	80050a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d068      	beq.n	8005098 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fc6:	4b35      	ldr	r3, [pc, #212]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d105      	bne.n	8004fde <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fd2:	4b32      	ldr	r3, [pc, #200]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0ac      	b.n	800513c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8004fe8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fee:	f7fd fecb 	bl	8002d88 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fd fec7 	bl	8002d88 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e099      	b.n	800513c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	4b24      	ldr	r3, [pc, #144]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005014:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <HAL_RCC_OscConfig+0x788>)
 800501a:	4013      	ands	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005024:	3a01      	subs	r2, #1
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	4311      	orrs	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800502e:	0212      	lsls	r2, r2, #8
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005036:	0852      	lsrs	r2, r2, #1
 8005038:	3a01      	subs	r2, #1
 800503a:	0552      	lsls	r2, r2, #21
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0652      	lsls	r2, r2, #25
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800504e:	06d2      	lsls	r2, r2, #27
 8005050:	430a      	orrs	r2, r1
 8005052:	4912      	ldr	r1, [pc, #72]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8005054:	4313      	orrs	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005058:	4b10      	ldr	r3, [pc, #64]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0f      	ldr	r2, [pc, #60]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 800505e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005064:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a0c      	ldr	r2, [pc, #48]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005070:	f7fd fe8a 	bl	8002d88 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fe86 	bl	8002d88 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e058      	b.n	800513c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508a:	4b04      	ldr	r3, [pc, #16]	@ (800509c <HAL_RCC_OscConfig+0x784>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005096:	e050      	b.n	800513a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e04f      	b.n	800513c <HAL_RCC_OscConfig+0x824>
 800509c:	40021000 	.word	0x40021000
 80050a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a4:	4b27      	ldr	r3, [pc, #156]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d144      	bne.n	800513a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050b0:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a23      	ldr	r2, [pc, #140]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050bc:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	4a20      	ldr	r2, [pc, #128]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050c8:	f7fd fe5e 	bl	8002d88 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fd fe5a 	bl	8002d88 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e02c      	b.n	800513c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	4b18      	ldr	r3, [pc, #96]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x7b8>
 80050ee:	e024      	b.n	800513a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d01f      	beq.n	8005136 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	4b13      	ldr	r3, [pc, #76]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a12      	ldr	r2, [pc, #72]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 80050fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fd fe41 	bl	8002d88 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510a:	f7fd fe3d 	bl	8002d88 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e00f      	b.n	800513c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511c:	4b09      	ldr	r3, [pc, #36]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	4905      	ldr	r1, [pc, #20]	@ (8005144 <HAL_RCC_OscConfig+0x82c>)
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_OscConfig+0x830>)
 8005130:	4013      	ands	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
 8005134:	e001      	b.n	800513a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	feeefffc 	.word	0xfeeefffc

0800514c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0e7      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005160:	4b75      	ldr	r3, [pc, #468]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d910      	bls.n	8005190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b72      	ldr	r3, [pc, #456]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 0207 	bic.w	r2, r3, #7
 8005176:	4970      	ldr	r1, [pc, #448]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	4313      	orrs	r3, r2
 800517c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b6e      	ldr	r3, [pc, #440]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cf      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d010      	beq.n	80051be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d908      	bls.n	80051be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ac:	4b63      	ldr	r3, [pc, #396]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4960      	ldr	r1, [pc, #384]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d04c      	beq.n	8005264 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	4b5a      	ldr	r3, [pc, #360]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d121      	bne.n	8005222 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e0a6      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ea:	4b54      	ldr	r3, [pc, #336]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d115      	bne.n	8005222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e09a      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005202:	4b4e      	ldr	r3, [pc, #312]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d109      	bne.n	8005222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e08e      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005212:	4b4a      	ldr	r3, [pc, #296]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e086      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005222:	4b46      	ldr	r3, [pc, #280]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 0203 	bic.w	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4943      	ldr	r1, [pc, #268]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	4313      	orrs	r3, r2
 8005232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fd fda8 	bl	8002d88 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	e00a      	b.n	8005252 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523c:	f7fd fda4 	bl	8002d88 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e06e      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 020c 	and.w	r2, r3, #12
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	429a      	cmp	r2, r3
 8005262:	d1eb      	bne.n	800523c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800527c:	429a      	cmp	r2, r3
 800527e:	d208      	bcs.n	8005292 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005280:	4b2e      	ldr	r3, [pc, #184]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	492b      	ldr	r1, [pc, #172]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005292:	4b29      	ldr	r3, [pc, #164]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d210      	bcs.n	80052c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a0:	4b25      	ldr	r3, [pc, #148]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f023 0207 	bic.w	r2, r3, #7
 80052a8:	4923      	ldr	r1, [pc, #140]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b0:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <HAL_RCC_ClockConfig+0x1ec>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d001      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e036      	b.n	8005330 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ce:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4918      	ldr	r1, [pc, #96]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ec:	4b13      	ldr	r3, [pc, #76]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4910      	ldr	r1, [pc, #64]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005300:	f000 f824 	bl	800534c <HAL_RCC_GetSysClockFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <HAL_RCC_ClockConfig+0x1f0>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	490b      	ldr	r1, [pc, #44]	@ (8005340 <HAL_RCC_ClockConfig+0x1f4>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	4a09      	ldr	r2, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1f8>)
 800531e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005320:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <HAL_RCC_ClockConfig+0x1fc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd fcdf 	bl	8002ce8 <HAL_InitTick>
 800532a:	4603      	mov	r3, r0
 800532c:	72fb      	strb	r3, [r7, #11]

  return status;
 800532e:	7afb      	ldrb	r3, [r7, #11]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40022000 	.word	0x40022000
 800533c:	40021000 	.word	0x40021000
 8005340:	08009f50 	.word	0x08009f50
 8005344:	20000000 	.word	0x20000000
 8005348:	20000004 	.word	0x20000004

0800534c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	@ 0x24
 8005350:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800535a:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005364:	4b3b      	ldr	r3, [pc, #236]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x34>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d121      	bne.n	80053be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d11e      	bne.n	80053be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005380:	4b34      	ldr	r3, [pc, #208]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800538c:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	e005      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800539c:	4b2d      	ldr	r3, [pc, #180]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10d      	bne.n	80053d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d102      	bne.n	80053ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <HAL_RCC_GetSysClockFreq+0x110>)
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	e004      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053d0:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x114>)
 80053d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d134      	bne.n	8005444 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053da:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d003      	beq.n	80053f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d003      	beq.n	80053f8 <HAL_RCC_GetSysClockFreq+0xac>
 80053f0:	e005      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <HAL_RCC_GetSysClockFreq+0x110>)
 80053f4:	617b      	str	r3, [r7, #20]
      break;
 80053f6:	e005      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x114>)
 80053fa:	617b      	str	r3, [r7, #20]
      break;
 80053fc:	e002      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	617b      	str	r3, [r7, #20]
      break;
 8005402:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005404:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	3301      	adds	r3, #1
 8005410:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	fb03 f202 	mul.w	r2, r3, r2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800542a:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x108>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	0e5b      	lsrs	r3, r3, #25
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	3301      	adds	r3, #1
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005444:	69bb      	ldr	r3, [r7, #24]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3724      	adds	r7, #36	@ 0x24
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	08009f60 	.word	0x08009f60
 800545c:	00f42400 	.word	0x00f42400
 8005460:	007a1200 	.word	0x007a1200

08005464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005468:	4b03      	ldr	r3, [pc, #12]	@ (8005478 <HAL_RCC_GetHCLKFreq+0x14>)
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000000 	.word	0x20000000

0800547c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005488:	4b2a      	ldr	r3, [pc, #168]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800548c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005494:	f7ff f9cc 	bl	8004830 <HAL_PWREx_GetVoltageRange>
 8005498:	6178      	str	r0, [r7, #20]
 800549a:	e014      	b.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a0:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054a8:	4b22      	ldr	r3, [pc, #136]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054b4:	f7ff f9bc 	bl	8004830 <HAL_PWREx_GetVoltageRange>
 80054b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054cc:	d10b      	bne.n	80054e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d919      	bls.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80054d8:	d902      	bls.n	80054e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054da:	2302      	movs	r3, #2
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e013      	b.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054e0:	2301      	movs	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	e010      	b.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b80      	cmp	r3, #128	@ 0x80
 80054ea:	d902      	bls.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054ec:	2303      	movs	r3, #3
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	e00a      	b.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b80      	cmp	r3, #128	@ 0x80
 80054f6:	d102      	bne.n	80054fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054f8:	2302      	movs	r3, #2
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e004      	b.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b70      	cmp	r3, #112	@ 0x70
 8005502:	d101      	bne.n	8005508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005504:	2301      	movs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005508:	4b0b      	ldr	r3, [pc, #44]	@ (8005538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f023 0207 	bic.w	r2, r3, #7
 8005510:	4909      	ldr	r1, [pc, #36]	@ (8005538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	429a      	cmp	r2, r3
 8005524:	d001      	beq.n	800552a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000
 8005538:	40022000 	.word	0x40022000

0800553c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005544:	2300      	movs	r3, #0
 8005546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005548:	2300      	movs	r3, #0
 800554a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005554:	2b00      	cmp	r3, #0
 8005556:	d041      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800555c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005560:	d02a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005562:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005566:	d824      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005568:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800556c:	d008      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800556e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005572:	d81e      	bhi.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800557c:	d010      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800557e:	e018      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005580:	4b86      	ldr	r3, [pc, #536]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a85      	ldr	r2, [pc, #532]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800558c:	e015      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f000 facd 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800559e:	e00c      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3320      	adds	r3, #32
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fbb6 	bl	8005d18 <RCCEx_PLLSAI2_Config>
 80055ac:	4603      	mov	r3, r0
 80055ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b0:	e003      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	74fb      	strb	r3, [r7, #19]
      break;
 80055b6:	e000      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ba:	7cfb      	ldrb	r3, [r7, #19]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c0:	4b76      	ldr	r3, [pc, #472]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055ce:	4973      	ldr	r1, [pc, #460]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80055d6:	e001      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d041      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055f0:	d02a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055f6:	d824      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055fc:	d008      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005602:	d81e      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800560c:	d010      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800560e:	e018      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005610:	4b62      	ldr	r3, [pc, #392]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a61      	ldr	r2, [pc, #388]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800561a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800561c:	e015      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa85 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800562e:	e00c      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3320      	adds	r3, #32
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fb6e 	bl	8005d18 <RCCEx_PLLSAI2_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	74fb      	strb	r3, [r7, #19]
      break;
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005650:	4b52      	ldr	r3, [pc, #328]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005656:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565e:	494f      	ldr	r1, [pc, #316]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005666:	e001      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a0 	beq.w	80057ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567a:	2300      	movs	r3, #0
 800567c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800567e:	4b47      	ldr	r3, [pc, #284]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005694:	4b41      	ldr	r3, [pc, #260]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	4a40      	ldr	r2, [pc, #256]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800569e:	6593      	str	r3, [r2, #88]	@ 0x58
 80056a0:	4b3e      	ldr	r3, [pc, #248]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056a8:	60bb      	str	r3, [r7, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ac:	2301      	movs	r3, #1
 80056ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b0:	4b3b      	ldr	r3, [pc, #236]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a3a      	ldr	r2, [pc, #232]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056bc:	f7fd fb64 	bl	8002d88 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056c2:	e009      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c4:	f7fd fb60 	bl	8002d88 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d902      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	74fb      	strb	r3, [r7, #19]
        break;
 80056d6:	e005      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d8:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0ef      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d15c      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056ea:	4b2c      	ldr	r3, [pc, #176]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d019      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005708:	4b24      	ldr	r3, [pc, #144]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005714:	4b21      	ldr	r3, [pc, #132]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571a:	4a20      	ldr	r2, [pc, #128]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005724:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	4a1c      	ldr	r2, [pc, #112]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005734:	4a19      	ldr	r2, [pc, #100]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d016      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005746:	f7fd fb1f 	bl	8002d88 <HAL_GetTick>
 800574a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574c:	e00b      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fd fb1b 	bl	8002d88 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d902      	bls.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	74fb      	strb	r3, [r7, #19]
            break;
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ec      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10c      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577a:	4b08      	ldr	r3, [pc, #32]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	4904      	ldr	r1, [pc, #16]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005792:	e009      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	74bb      	strb	r3, [r7, #18]
 8005798:	e006      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a8:	7c7b      	ldrb	r3, [r7, #17]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d105      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ae:	4ba6      	ldr	r3, [pc, #664]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	4aa5      	ldr	r2, [pc, #660]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057c6:	4ba0      	ldr	r3, [pc, #640]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	f023 0203 	bic.w	r2, r3, #3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d4:	499c      	ldr	r1, [pc, #624]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057e8:	4b97      	ldr	r3, [pc, #604]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ee:	f023 020c 	bic.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	4994      	ldr	r1, [pc, #592]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580a:	4b8f      	ldr	r3, [pc, #572]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	498b      	ldr	r1, [pc, #556]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800582c:	4b86      	ldr	r3, [pc, #536]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005832:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	4983      	ldr	r1, [pc, #524]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800584e:	4b7e      	ldr	r3, [pc, #504]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800585c:	497a      	ldr	r1, [pc, #488]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005870:	4b75      	ldr	r3, [pc, #468]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005876:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	4972      	ldr	r1, [pc, #456]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005892:	4b6d      	ldr	r3, [pc, #436]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a0:	4969      	ldr	r1, [pc, #420]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058b4:	4b64      	ldr	r3, [pc, #400]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058c2:	4961      	ldr	r1, [pc, #388]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e4:	4958      	ldr	r1, [pc, #352]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058f8:	4b53      	ldr	r3, [pc, #332]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	4950      	ldr	r1, [pc, #320]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800591a:	4b4b      	ldr	r3, [pc, #300]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005928:	4947      	ldr	r1, [pc, #284]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800593c:	4b42      	ldr	r3, [pc, #264]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800593e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005942:	f023 0203 	bic.w	r2, r3, #3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594a:	493f      	ldr	r1, [pc, #252]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d028      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005964:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596c:	4936      	ldr	r1, [pc, #216]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800597c:	d106      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597e:	4b32      	ldr	r3, [pc, #200]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	4a31      	ldr	r2, [pc, #196]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005984:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005988:	60d3      	str	r3, [r2, #12]
 800598a:	e011      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005990:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3304      	adds	r3, #4
 800599a:	2101      	movs	r1, #1
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f8c9 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059a6:	7cfb      	ldrb	r3, [r7, #19]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d028      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059bc:	4b22      	ldr	r3, [pc, #136]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ca:	491f      	ldr	r1, [pc, #124]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059da:	d106      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4a19      	ldr	r2, [pc, #100]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059e6:	60d3      	str	r3, [r2, #12]
 80059e8:	e011      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	2101      	movs	r1, #1
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f89a 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a04:	7cfb      	ldrb	r3, [r7, #19]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d02a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a28:	4907      	ldr	r1, [pc, #28]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a38:	d108      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3a:	4b03      	ldr	r3, [pc, #12]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a02      	ldr	r2, [pc, #8]	@ (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a44:	60d3      	str	r3, [r2, #12]
 8005a46:	e013      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005a48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 f869 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005a6c:	7cfb      	ldrb	r3, [r7, #19]
 8005a6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d02f      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a8a:	4929      	ldr	r1, [pc, #164]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f846 	bl	8005b34 <RCCEx_PLLSAI1_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d014      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	74bb      	strb	r3, [r7, #18]
 8005ab6:	e011      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3320      	adds	r3, #32
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 f925 	bl	8005d18 <RCCEx_PLLSAI2_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
 8005ada:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af8:	490d      	ldr	r1, [pc, #52]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b0c:	4b08      	ldr	r3, [pc, #32]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b1c:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b24:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000

08005b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b42:	4b74      	ldr	r3, [pc, #464]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b4e:	4b71      	ldr	r3, [pc, #452]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0203 	and.w	r2, r3, #3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d10d      	bne.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
       ||
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b66:	4b6b      	ldr	r3, [pc, #428]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
       ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d047      	beq.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
 8005b7e:	e044      	b.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d018      	beq.n	8005bba <RCCEx_PLLSAI1_Config+0x86>
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d825      	bhi.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d002      	beq.n	8005b96 <RCCEx_PLLSAI1_Config+0x62>
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d009      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x74>
 8005b94:	e020      	b.n	8005bd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b96:	4b5f      	ldr	r3, [pc, #380]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11d      	bne.n	8005bde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba6:	e01a      	b.n	8005bde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d116      	bne.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb8:	e013      	b.n	8005be2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bba:	4b56      	ldr	r3, [pc, #344]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10f      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bc6:	4b53      	ldr	r3, [pc, #332]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bd6:	e006      	b.n	8005be6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
      break;
 8005bdc:	e004      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bde:	bf00      	nop
 8005be0:	e002      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005be2:	bf00      	nop
 8005be4:	e000      	b.n	8005be8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bee:	4b49      	ldr	r3, [pc, #292]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	430b      	orrs	r3, r1
 8005c04:	4943      	ldr	r1, [pc, #268]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d17c      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c10:	4b40      	ldr	r3, [pc, #256]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3f      	ldr	r2, [pc, #252]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c1c:	f7fd f8b4 	bl	8002d88 <HAL_GetTick>
 8005c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c22:	e009      	b.n	8005c38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c24:	f7fd f8b0 	bl	8002d88 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d902      	bls.n	8005c38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	73fb      	strb	r3, [r7, #15]
        break;
 8005c36:	e005      	b.n	8005c44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c38:	4b36      	ldr	r3, [pc, #216]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ef      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d15f      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c50:	4b30      	ldr	r3, [pc, #192]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005c58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6892      	ldr	r2, [r2, #8]
 8005c60:	0211      	lsls	r1, r2, #8
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	06d2      	lsls	r2, r2, #27
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	492a      	ldr	r1, [pc, #168]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	610b      	str	r3, [r1, #16]
 8005c70:	e027      	b.n	8005cc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d112      	bne.n	8005c9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c78:	4b26      	ldr	r3, [pc, #152]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005c80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6892      	ldr	r2, [r2, #8]
 8005c88:	0211      	lsls	r1, r2, #8
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6912      	ldr	r2, [r2, #16]
 8005c8e:	0852      	lsrs	r2, r2, #1
 8005c90:	3a01      	subs	r2, #1
 8005c92:	0552      	lsls	r2, r2, #21
 8005c94:	430a      	orrs	r2, r1
 8005c96:	491f      	ldr	r1, [pc, #124]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	610b      	str	r3, [r1, #16]
 8005c9c:	e011      	b.n	8005cc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ca6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6892      	ldr	r2, [r2, #8]
 8005cae:	0211      	lsls	r1, r2, #8
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6952      	ldr	r2, [r2, #20]
 8005cb4:	0852      	lsrs	r2, r2, #1
 8005cb6:	3a01      	subs	r2, #1
 8005cb8:	0652      	lsls	r2, r2, #25
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	4915      	ldr	r1, [pc, #84]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cc2:	4b14      	ldr	r3, [pc, #80]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fd f85b 	bl	8002d88 <HAL_GetTick>
 8005cd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cd4:	e009      	b.n	8005cea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd6:	f7fd f857 	bl	8002d88 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d902      	bls.n	8005cea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ce8:	e005      	b.n	8005cf6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cea:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0ef      	beq.n	8005cd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d106      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cfc:	4b05      	ldr	r3, [pc, #20]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfe:	691a      	ldr	r2, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	4903      	ldr	r1, [pc, #12]	@ (8005d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000

08005d18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d26:	4b69      	ldr	r3, [pc, #420]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d018      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d32:	4b66      	ldr	r3, [pc, #408]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0203 	and.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d10d      	bne.n	8005d5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
       ||
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d009      	beq.n	8005d5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d4a:	4b60      	ldr	r3, [pc, #384]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
       ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d047      	beq.n	8005dee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
 8005d62:	e044      	b.n	8005dee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d018      	beq.n	8005d9e <RCCEx_PLLSAI2_Config+0x86>
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d825      	bhi.n	8005dbc <RCCEx_PLLSAI2_Config+0xa4>
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d002      	beq.n	8005d7a <RCCEx_PLLSAI2_Config+0x62>
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d009      	beq.n	8005d8c <RCCEx_PLLSAI2_Config+0x74>
 8005d78:	e020      	b.n	8005dbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d7a:	4b54      	ldr	r3, [pc, #336]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d11d      	bne.n	8005dc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d8a:	e01a      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d116      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d9c:	e013      	b.n	8005dc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005daa:	4b48      	ldr	r3, [pc, #288]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dba:	e006      	b.n	8005dca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc0:	e004      	b.n	8005dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	430b      	orrs	r3, r1
 8005de8:	4938      	ldr	r1, [pc, #224]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d166      	bne.n	8005ec2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005df4:	4b35      	ldr	r3, [pc, #212]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a34      	ldr	r2, [pc, #208]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e00:	f7fc ffc2 	bl	8002d88 <HAL_GetTick>
 8005e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e06:	e009      	b.n	8005e1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e08:	f7fc ffbe 	bl	8002d88 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d902      	bls.n	8005e1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1a:	e005      	b.n	8005e28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ef      	bne.n	8005e08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d149      	bne.n	8005ec2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d110      	bne.n	8005e56 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e34:	4b25      	ldr	r3, [pc, #148]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005e3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6892      	ldr	r2, [r2, #8]
 8005e44:	0211      	lsls	r1, r2, #8
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68d2      	ldr	r2, [r2, #12]
 8005e4a:	06d2      	lsls	r2, r2, #27
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	491f      	ldr	r1, [pc, #124]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	614b      	str	r3, [r1, #20]
 8005e54:	e011      	b.n	8005e7a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e5e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6892      	ldr	r2, [r2, #8]
 8005e66:	0211      	lsls	r1, r2, #8
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6912      	ldr	r2, [r2, #16]
 8005e6c:	0852      	lsrs	r2, r2, #1
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	0652      	lsls	r2, r2, #25
 8005e72:	430a      	orrs	r2, r1
 8005e74:	4915      	ldr	r1, [pc, #84]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e7a:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e86:	f7fc ff7f 	bl	8002d88 <HAL_GetTick>
 8005e8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e8c:	e009      	b.n	8005ea2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e8e:	f7fc ff7b 	bl	8002d88 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d902      	bls.n	8005ea2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
          break;
 8005ea0:	e005      	b.n	8005eae <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0ef      	beq.n	8005e8e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005eb6:	695a      	ldr	r2, [r3, #20]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	4903      	ldr	r1, [pc, #12]	@ (8005ecc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000

08005ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e095      	b.n	800600e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ef2:	d009      	beq.n	8005f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	61da      	str	r2, [r3, #28]
 8005efa:	e005      	b.n	8005f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fc fcea 	bl	80028fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f48:	d902      	bls.n	8005f50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e002      	b.n	8005f56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f5e:	d007      	beq.n	8005f70 <HAL_SPI_Init+0xa0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f68:	d002      	beq.n	8005f70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	ea42 0103 	orr.w	r1, r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	f003 0204 	and.w	r2, r3, #4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005fec:	ea42 0103 	orr.w	r1, r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b08a      	sub	sp, #40	@ 0x28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006024:	2301      	movs	r3, #1
 8006026:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006028:	f7fc feae 	bl	8002d88 <HAL_GetTick>
 800602c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006034:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800603c:	887b      	ldrh	r3, [r7, #2]
 800603e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006040:	887b      	ldrh	r3, [r7, #2]
 8006042:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006044:	7ffb      	ldrb	r3, [r7, #31]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d00c      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x4e>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006050:	d106      	bne.n	8006060 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <HAL_SPI_TransmitReceive+0x4a>
 800605a:	7ffb      	ldrb	r3, [r7, #31]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d001      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006060:	2302      	movs	r3, #2
 8006062:	e1f3      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_SPI_TransmitReceive+0x60>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_SPI_TransmitReceive+0x60>
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e1e8      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_SPI_TransmitReceive+0x72>
 8006084:	2302      	movs	r3, #2
 8006086:	e1e1      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b04      	cmp	r3, #4
 800609a:	d003      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2205      	movs	r2, #5
 80060a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	887a      	ldrh	r2, [r7, #2]
 80060bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	887a      	ldrh	r2, [r7, #2]
 80060ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060e6:	d802      	bhi.n	80060ee <HAL_SPI_TransmitReceive+0xd8>
 80060e8:	8abb      	ldrh	r3, [r7, #20]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d908      	bls.n	8006100 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	e007      	b.n	8006110 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800610e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d007      	beq.n	800612e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800612c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006136:	f240 8083 	bls.w	8006240 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_SPI_TransmitReceive+0x132>
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d16f      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	1c9a      	adds	r2, r3, #2
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616c:	e05c      	b.n	8006228 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d11b      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x19e>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x19e>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	2b01      	cmp	r3, #1
 800618a:	d113      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d11c      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x1e6>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d016      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d8:	b292      	uxth	r2, r2
 80061da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	1c9a      	adds	r2, r3, #2
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f8:	2301      	movs	r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061fc:	f7fc fdc4 	bl	8002d88 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006208:	429a      	cmp	r2, r3
 800620a:	d80d      	bhi.n	8006228 <HAL_SPI_TransmitReceive+0x212>
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006212:	d009      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e111      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d19d      	bne.n	800616e <HAL_SPI_TransmitReceive+0x158>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d197      	bne.n	800616e <HAL_SPI_TransmitReceive+0x158>
 800623e:	e0e5      	b.n	800640c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x23a>
 8006248:	8afb      	ldrh	r3, [r7, #22]
 800624a:	2b01      	cmp	r3, #1
 800624c:	f040 80d1 	bne.w	80063f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d912      	bls.n	8006280 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b02      	subs	r3, #2
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800627e:	e0b8      	b.n	80063f2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	7812      	ldrb	r2, [r2, #0]
 800628c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a6:	e0a4      	b.n	80063f2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d134      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x30a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02f      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x30a>
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d12c      	bne.n	8006320 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d912      	bls.n	80062f6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	1c9a      	adds	r2, r3, #2
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b02      	subs	r3, #2
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062f4:	e012      	b.n	800631c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d148      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x3aa>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d042      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	d923      	bls.n	800638e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	b292      	uxth	r2, r2
 8006352:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	1c9a      	adds	r2, r3, #2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b02      	subs	r3, #2
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d81f      	bhi.n	80063bc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800638a:	605a      	str	r2, [r3, #4]
 800638c:	e016      	b.n	80063bc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f103 020c 	add.w	r2, r3, #12
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	7812      	ldrb	r2, [r2, #0]
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063bc:	2301      	movs	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80063c0:	f7fc fce2 	bl	8002d88 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d803      	bhi.n	80063d8 <HAL_SPI_TransmitReceive+0x3c2>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063d6:	d102      	bne.n	80063de <HAL_SPI_TransmitReceive+0x3c8>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e02c      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f47f af55 	bne.w	80062a8 <HAL_SPI_TransmitReceive+0x292>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	f47f af4e 	bne.w	80062a8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f93d 	bl	8006690 <SPI_EndRxTxTransaction>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e00e      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800644a:	2300      	movs	r3, #0
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	@ 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006464:	f7fc fc90 	bl	8002d88 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4413      	add	r3, r2
 8006472:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006474:	f7fc fc88 	bl	8002d88 <HAL_GetTick>
 8006478:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800647a:	4b39      	ldr	r3, [pc, #228]	@ (8006560 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	015b      	lsls	r3, r3, #5
 8006480:	0d1b      	lsrs	r3, r3, #20
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648a:	e054      	b.n	8006536 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006492:	d050      	beq.n	8006536 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006494:	f7fc fc78 	bl	8002d88 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d902      	bls.n	80064aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d13d      	bne.n	8006526 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80064b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064c2:	d111      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064cc:	d004      	beq.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d6:	d107      	bne.n	80064e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f0:	d10f      	bne.n	8006512 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e017      	b.n	8006556 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3b01      	subs	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d19b      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20000000 	.word	0x20000000

08006564 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006576:	f7fc fc07 	bl	8002d88 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	4413      	add	r3, r2
 8006584:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006586:	f7fc fbff 	bl	8002d88 <HAL_GetTick>
 800658a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	330c      	adds	r3, #12
 8006592:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006594:	4b3d      	ldr	r3, [pc, #244]	@ (800668c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	0d1b      	lsrs	r3, r3, #20
 80065a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065ac:	e060      	b.n	8006670 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065b4:	d107      	bne.n	80065c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065cc:	d050      	beq.n	8006670 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065ce:	f7fc fbdb 	bl	8002d88 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065da:	429a      	cmp	r2, r3
 80065dc:	d902      	bls.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d13d      	bne.n	8006660 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065fc:	d111      	bne.n	8006622 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006606:	d004      	beq.n	8006612 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006610:	d107      	bne.n	8006622 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006620:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662a:	d10f      	bne.n	800664c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800664a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e010      	b.n	8006682 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3b01      	subs	r3, #1
 800666e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d196      	bne.n	80065ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3728      	adds	r7, #40	@ 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000000 	.word	0x20000000

08006690 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af02      	add	r7, sp, #8
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff ff5b 	bl	8006564 <SPI_WaitFifoStateUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e027      	b.n	8006714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2180      	movs	r1, #128	@ 0x80
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fec0 	bl	8006454 <SPI_WaitFlagStateUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e014      	b.n	8006714 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ff34 	bl	8006564 <SPI_WaitFifoStateUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006706:	f043 0220 	orr.w	r2, r3, #32
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e000      	b.n	8006714 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e049      	b.n	80067c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fc fa68 	bl	8002c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f000 faa0 	bl	8006ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d001      	beq.n	80067e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e047      	b.n	8006874 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a23      	ldr	r2, [pc, #140]	@ (8006880 <HAL_TIM_Base_Start+0xb4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01d      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fe:	d018      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1f      	ldr	r2, [pc, #124]	@ (8006884 <HAL_TIM_Base_Start+0xb8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1e      	ldr	r2, [pc, #120]	@ (8006888 <HAL_TIM_Base_Start+0xbc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1c      	ldr	r2, [pc, #112]	@ (800688c <HAL_TIM_Base_Start+0xc0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1b      	ldr	r2, [pc, #108]	@ (8006890 <HAL_TIM_Base_Start+0xc4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <HAL_TIM_Base_Start+0x66>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a19      	ldr	r2, [pc, #100]	@ (8006894 <HAL_TIM_Base_Start+0xc8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d115      	bne.n	800685e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	4b17      	ldr	r3, [pc, #92]	@ (8006898 <HAL_TIM_Base_Start+0xcc>)
 800683a:	4013      	ands	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b06      	cmp	r3, #6
 8006842:	d015      	beq.n	8006870 <HAL_TIM_Base_Start+0xa4>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800684a:	d011      	beq.n	8006870 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	e008      	b.n	8006870 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0201 	orr.w	r2, r2, #1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e000      	b.n	8006872 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006870:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40000400 	.word	0x40000400
 8006888:	40000800 	.word	0x40000800
 800688c:	40000c00 	.word	0x40000c00
 8006890:	40013400 	.word	0x40013400
 8006894:	40014000 	.word	0x40014000
 8006898:	00010007 	.word	0x00010007

0800689c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0202 	mvn.w	r2, #2
 80068d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f9bc 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9ae 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f9bf 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0204 	mvn.w	r2, #4
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f996 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f988 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f999 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d020      	beq.n	8006998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01b      	beq.n	8006998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0208 	mvn.w	r2, #8
 8006968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2204      	movs	r2, #4
 800696e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f970 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 8006984:	e005      	b.n	8006992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f962 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f973 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f003 0310 	and.w	r3, r3, #16
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01b      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2208      	movs	r2, #8
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f94a 	bl	8006c64 <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f93c 	bl	8006c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f94d 	bl	8006c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0201 	mvn.w	r2, #1
 8006a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f91a 	bl	8006c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fb07 	bl	8007044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 faff 	bl	8007058 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00c      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d007      	beq.n	8006a7e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f907 	bl	8006c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00c      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f06f 0220 	mvn.w	r2, #32
 8006a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fac7 	bl	8007030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1c>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0b6      	b.n	8006c34 <HAL_TIM_ConfigClockSource+0x18a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ae8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006af0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b02:	d03e      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xd8>
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b08:	f200 8087 	bhi.w	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b10:	f000 8086 	beq.w	8006c20 <HAL_TIM_ConfigClockSource+0x176>
 8006b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b18:	d87f      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b1a:	2b70      	cmp	r3, #112	@ 0x70
 8006b1c:	d01a      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0xaa>
 8006b1e:	2b70      	cmp	r3, #112	@ 0x70
 8006b20:	d87b      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b22:	2b60      	cmp	r3, #96	@ 0x60
 8006b24:	d050      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0x11e>
 8006b26:	2b60      	cmp	r3, #96	@ 0x60
 8006b28:	d877      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b2a:	2b50      	cmp	r3, #80	@ 0x50
 8006b2c:	d03c      	beq.n	8006ba8 <HAL_TIM_ConfigClockSource+0xfe>
 8006b2e:	2b50      	cmp	r3, #80	@ 0x50
 8006b30:	d873      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b32:	2b40      	cmp	r3, #64	@ 0x40
 8006b34:	d058      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0x13e>
 8006b36:	2b40      	cmp	r3, #64	@ 0x40
 8006b38:	d86f      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b3a:	2b30      	cmp	r3, #48	@ 0x30
 8006b3c:	d064      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x15e>
 8006b3e:	2b30      	cmp	r3, #48	@ 0x30
 8006b40:	d86b      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d060      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x15e>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d867      	bhi.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05c      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x15e>
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d05a      	beq.n	8006c08 <HAL_TIM_ConfigClockSource+0x15e>
 8006b52:	e062      	b.n	8006c1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b64:	f000 f9bc 	bl	8006ee0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	609a      	str	r2, [r3, #8]
      break;
 8006b80:	e04f      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b92:	f000 f9a5 	bl	8006ee0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ba4:	609a      	str	r2, [r3, #8]
      break;
 8006ba6:	e03c      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f000 f919 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2150      	movs	r1, #80	@ 0x50
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f972 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 8006bc6:	e02c      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f000 f938 	bl	8006e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2160      	movs	r1, #96	@ 0x60
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f962 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 8006be6:	e01c      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f000 f8f9 	bl	8006dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2140      	movs	r1, #64	@ 0x40
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 f952 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 8006c06:	e00c      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f000 f949 	bl	8006eaa <TIM_ITRx_SetConfig>
      break;
 8006c18:	e003      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1e:	e000      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a46      	ldr	r2, [pc, #280]	@ (8006dcc <TIM_Base_SetConfig+0x12c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a43      	ldr	r2, [pc, #268]	@ (8006dd0 <TIM_Base_SetConfig+0x130>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a42      	ldr	r2, [pc, #264]	@ (8006dd4 <TIM_Base_SetConfig+0x134>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a41      	ldr	r2, [pc, #260]	@ (8006dd8 <TIM_Base_SetConfig+0x138>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a40      	ldr	r2, [pc, #256]	@ (8006ddc <TIM_Base_SetConfig+0x13c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a35      	ldr	r2, [pc, #212]	@ (8006dcc <TIM_Base_SetConfig+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01f      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d00:	d01b      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a32      	ldr	r2, [pc, #200]	@ (8006dd0 <TIM_Base_SetConfig+0x130>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d017      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a31      	ldr	r2, [pc, #196]	@ (8006dd4 <TIM_Base_SetConfig+0x134>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a30      	ldr	r2, [pc, #192]	@ (8006dd8 <TIM_Base_SetConfig+0x138>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8006ddc <TIM_Base_SetConfig+0x13c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2e      	ldr	r2, [pc, #184]	@ (8006de0 <TIM_Base_SetConfig+0x140>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006de4 <TIM_Base_SetConfig+0x144>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_Base_SetConfig+0x9a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	@ (8006de8 <TIM_Base_SetConfig+0x148>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d108      	bne.n	8006d4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	@ (8006dcc <TIM_Base_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	@ (8006ddc <TIM_Base_SetConfig+0x13c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_Base_SetConfig+0xf8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a17      	ldr	r2, [pc, #92]	@ (8006de0 <TIM_Base_SetConfig+0x140>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_Base_SetConfig+0xf8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a16      	ldr	r2, [pc, #88]	@ (8006de4 <TIM_Base_SetConfig+0x144>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_Base_SetConfig+0xf8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a15      	ldr	r2, [pc, #84]	@ (8006de8 <TIM_Base_SetConfig+0x148>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d103      	bne.n	8006da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d105      	bne.n	8006dbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f023 030a 	bic.w	r3, r3, #10
 8006e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	f023 0210 	bic.w	r2, r3, #16
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	031b      	lsls	r3, r3, #12
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	621a      	str	r2, [r3, #32]
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f043 0307 	orr.w	r3, r3, #7
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006efa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	021a      	lsls	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	609a      	str	r2, [r3, #8]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f34:	2302      	movs	r3, #2
 8006f36:	e068      	b.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d004      	beq.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2d      	ldr	r2, [pc, #180]	@ (800701c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d108      	bne.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01d      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006faa:	d018      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1a      	ldr	r2, [pc, #104]	@ (8007024 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00e      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a18      	ldr	r2, [pc, #96]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d009      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a13      	ldr	r2, [pc, #76]	@ (800701c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d004      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a14      	ldr	r2, [pc, #80]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40013400 	.word	0x40013400
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40014000 	.word	0x40014000

08007030 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	@ 0x28
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007080:	2b20      	cmp	r3, #32
 8007082:	d177      	bne.n	8007174 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_UART_Transmit+0x24>
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e070      	b.n	8007176 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2221      	movs	r2, #33	@ 0x21
 80070a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070a2:	f7fb fe71 	bl	8002d88 <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	88fa      	ldrh	r2, [r7, #6]
 80070b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c0:	d108      	bne.n	80070d4 <HAL_UART_Transmit+0x68>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	61bb      	str	r3, [r7, #24]
 80070d2:	e003      	b.n	80070dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070dc:	e02f      	b.n	800713e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2180      	movs	r1, #128	@ 0x80
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f911 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e03b      	b.n	8007176 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10b      	bne.n	800711c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007110:	b292      	uxth	r2, r2
 8007112:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	3302      	adds	r3, #2
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	e007      	b.n	800712c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	3301      	adds	r3, #1
 800712a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1c9      	bne.n	80070de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2200      	movs	r2, #0
 8007152:	2140      	movs	r1, #64	@ 0x40
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f8db 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e005      	b.n	8007176 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b08a      	sub	sp, #40	@ 0x28
 8007182:	af02      	add	r7, sp, #8
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	603b      	str	r3, [r7, #0]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007194:	2b20      	cmp	r3, #32
 8007196:	f040 80b6 	bne.w	8007306 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_UART_Receive+0x28>
 80071a0:	88fb      	ldrh	r3, [r7, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e0ae      	b.n	8007308 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2222      	movs	r2, #34	@ 0x22
 80071b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071c0:	f7fb fde2 	bl	8002d88 <HAL_GetTick>
 80071c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071de:	d10e      	bne.n	80071fe <HAL_UART_Receive+0x80>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_UART_Receive+0x76>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071f2:	e02d      	b.n	8007250 <HAL_UART_Receive+0xd2>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22ff      	movs	r2, #255	@ 0xff
 80071f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071fc:	e028      	b.n	8007250 <HAL_UART_Receive+0xd2>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <HAL_UART_Receive+0xa4>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <HAL_UART_Receive+0x9a>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	22ff      	movs	r2, #255	@ 0xff
 8007212:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007216:	e01b      	b.n	8007250 <HAL_UART_Receive+0xd2>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	227f      	movs	r2, #127	@ 0x7f
 800721c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007220:	e016      	b.n	8007250 <HAL_UART_Receive+0xd2>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800722a:	d10d      	bne.n	8007248 <HAL_UART_Receive+0xca>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <HAL_UART_Receive+0xc0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	227f      	movs	r2, #127	@ 0x7f
 8007238:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800723c:	e008      	b.n	8007250 <HAL_UART_Receive+0xd2>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	223f      	movs	r2, #63	@ 0x3f
 8007242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007246:	e003      	b.n	8007250 <HAL_UART_Receive+0xd2>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007256:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007260:	d108      	bne.n	8007274 <HAL_UART_Receive+0xf6>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e003      	b.n	800727c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800727c:	e037      	b.n	80072ee <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2120      	movs	r1, #32
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f841 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e033      	b.n	8007308 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10c      	bne.n	80072c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	8a7b      	ldrh	r3, [r7, #18]
 80072b0:	4013      	ands	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	3302      	adds	r3, #2
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e00d      	b.n	80072dc <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	8a7b      	ldrh	r3, [r7, #18]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4013      	ands	r3, r2
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	3301      	adds	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1c1      	bne.n	800727e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007320:	e04f      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007328:	d04b      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fb fd2d 	bl	8002d88 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <UART_WaitOnFlagUntilTimeout+0x30>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e04e      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d037      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b80      	cmp	r3, #128	@ 0x80
 8007356:	d034      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d031      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d110      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2208      	movs	r2, #8
 8007372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f838 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2208      	movs	r2, #8
 800737e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e029      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800739c:	d111      	bne.n	80073c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f81e 	bl	80073ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e00f      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4013      	ands	r3, r2
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d0a0      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b095      	sub	sp, #84	@ 0x54
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007410:	643b      	str	r3, [r7, #64]	@ 0x40
 8007412:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e6      	bne.n	80073f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	61fb      	str	r3, [r7, #28]
   return(result);
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f023 0301 	bic.w	r3, r3, #1
 800743a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007444:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007446:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800744a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e5      	bne.n	8007424 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745c:	2b01      	cmp	r3, #1
 800745e:	d118      	bne.n	8007492 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	60bb      	str	r3, [r7, #8]
   return(result);
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f023 0310 	bic.w	r3, r3, #16
 8007474:	647b      	str	r3, [r7, #68]	@ 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6979      	ldr	r1, [r7, #20]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	613b      	str	r3, [r7, #16]
   return(result);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e6      	bne.n	8007460 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074a6:	bf00      	nop
 80074a8:	3754      	adds	r7, #84	@ 0x54
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <__cvt>:
 80074b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b6:	ec57 6b10 	vmov	r6, r7, d0
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	460c      	mov	r4, r1
 80074be:	4619      	mov	r1, r3
 80074c0:	463b      	mov	r3, r7
 80074c2:	bfbb      	ittet	lt
 80074c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074c8:	461f      	movlt	r7, r3
 80074ca:	2300      	movge	r3, #0
 80074cc:	232d      	movlt	r3, #45	@ 0x2d
 80074ce:	700b      	strb	r3, [r1, #0]
 80074d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074d6:	4691      	mov	r9, r2
 80074d8:	f023 0820 	bic.w	r8, r3, #32
 80074dc:	bfbc      	itt	lt
 80074de:	4632      	movlt	r2, r6
 80074e0:	4616      	movlt	r6, r2
 80074e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074e6:	d005      	beq.n	80074f4 <__cvt+0x42>
 80074e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074ec:	d100      	bne.n	80074f0 <__cvt+0x3e>
 80074ee:	3401      	adds	r4, #1
 80074f0:	2102      	movs	r1, #2
 80074f2:	e000      	b.n	80074f6 <__cvt+0x44>
 80074f4:	2103      	movs	r1, #3
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	ab02      	add	r3, sp, #8
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	ec47 6b10 	vmov	d0, r6, r7
 8007502:	4653      	mov	r3, sl
 8007504:	4622      	mov	r2, r4
 8007506:	f000 fefb 	bl	8008300 <_dtoa_r>
 800750a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800750e:	4605      	mov	r5, r0
 8007510:	d119      	bne.n	8007546 <__cvt+0x94>
 8007512:	f019 0f01 	tst.w	r9, #1
 8007516:	d00e      	beq.n	8007536 <__cvt+0x84>
 8007518:	eb00 0904 	add.w	r9, r0, r4
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	f7f9 fae0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007528:	b108      	cbz	r0, 800752e <__cvt+0x7c>
 800752a:	f8cd 900c 	str.w	r9, [sp, #12]
 800752e:	2230      	movs	r2, #48	@ 0x30
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	454b      	cmp	r3, r9
 8007534:	d31e      	bcc.n	8007574 <__cvt+0xc2>
 8007536:	9b03      	ldr	r3, [sp, #12]
 8007538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800753a:	1b5b      	subs	r3, r3, r5
 800753c:	4628      	mov	r0, r5
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	b004      	add	sp, #16
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800754a:	eb00 0904 	add.w	r9, r0, r4
 800754e:	d1e5      	bne.n	800751c <__cvt+0x6a>
 8007550:	7803      	ldrb	r3, [r0, #0]
 8007552:	2b30      	cmp	r3, #48	@ 0x30
 8007554:	d10a      	bne.n	800756c <__cvt+0xba>
 8007556:	2200      	movs	r2, #0
 8007558:	2300      	movs	r3, #0
 800755a:	4630      	mov	r0, r6
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 fac3 	bl	8000ae8 <__aeabi_dcmpeq>
 8007562:	b918      	cbnz	r0, 800756c <__cvt+0xba>
 8007564:	f1c4 0401 	rsb	r4, r4, #1
 8007568:	f8ca 4000 	str.w	r4, [sl]
 800756c:	f8da 3000 	ldr.w	r3, [sl]
 8007570:	4499      	add	r9, r3
 8007572:	e7d3      	b.n	800751c <__cvt+0x6a>
 8007574:	1c59      	adds	r1, r3, #1
 8007576:	9103      	str	r1, [sp, #12]
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	e7d9      	b.n	8007530 <__cvt+0x7e>

0800757c <__exponent>:
 800757c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800757e:	2900      	cmp	r1, #0
 8007580:	bfba      	itte	lt
 8007582:	4249      	neglt	r1, r1
 8007584:	232d      	movlt	r3, #45	@ 0x2d
 8007586:	232b      	movge	r3, #43	@ 0x2b
 8007588:	2909      	cmp	r1, #9
 800758a:	7002      	strb	r2, [r0, #0]
 800758c:	7043      	strb	r3, [r0, #1]
 800758e:	dd29      	ble.n	80075e4 <__exponent+0x68>
 8007590:	f10d 0307 	add.w	r3, sp, #7
 8007594:	461d      	mov	r5, r3
 8007596:	270a      	movs	r7, #10
 8007598:	461a      	mov	r2, r3
 800759a:	fbb1 f6f7 	udiv	r6, r1, r7
 800759e:	fb07 1416 	mls	r4, r7, r6, r1
 80075a2:	3430      	adds	r4, #48	@ 0x30
 80075a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075a8:	460c      	mov	r4, r1
 80075aa:	2c63      	cmp	r4, #99	@ 0x63
 80075ac:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075b0:	4631      	mov	r1, r6
 80075b2:	dcf1      	bgt.n	8007598 <__exponent+0x1c>
 80075b4:	3130      	adds	r1, #48	@ 0x30
 80075b6:	1e94      	subs	r4, r2, #2
 80075b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075bc:	1c41      	adds	r1, r0, #1
 80075be:	4623      	mov	r3, r4
 80075c0:	42ab      	cmp	r3, r5
 80075c2:	d30a      	bcc.n	80075da <__exponent+0x5e>
 80075c4:	f10d 0309 	add.w	r3, sp, #9
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	42ac      	cmp	r4, r5
 80075cc:	bf88      	it	hi
 80075ce:	2300      	movhi	r3, #0
 80075d0:	3302      	adds	r3, #2
 80075d2:	4403      	add	r3, r0
 80075d4:	1a18      	subs	r0, r3, r0
 80075d6:	b003      	add	sp, #12
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075e2:	e7ed      	b.n	80075c0 <__exponent+0x44>
 80075e4:	2330      	movs	r3, #48	@ 0x30
 80075e6:	3130      	adds	r1, #48	@ 0x30
 80075e8:	7083      	strb	r3, [r0, #2]
 80075ea:	70c1      	strb	r1, [r0, #3]
 80075ec:	1d03      	adds	r3, r0, #4
 80075ee:	e7f1      	b.n	80075d4 <__exponent+0x58>

080075f0 <_printf_float>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	b08d      	sub	sp, #52	@ 0x34
 80075f6:	460c      	mov	r4, r1
 80075f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075fc:	4616      	mov	r6, r2
 80075fe:	461f      	mov	r7, r3
 8007600:	4605      	mov	r5, r0
 8007602:	f000 fd6f 	bl	80080e4 <_localeconv_r>
 8007606:	6803      	ldr	r3, [r0, #0]
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	4618      	mov	r0, r3
 800760c:	f7f8 fe40 	bl	8000290 <strlen>
 8007610:	2300      	movs	r3, #0
 8007612:	930a      	str	r3, [sp, #40]	@ 0x28
 8007614:	f8d8 3000 	ldr.w	r3, [r8]
 8007618:	9005      	str	r0, [sp, #20]
 800761a:	3307      	adds	r3, #7
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	f103 0208 	add.w	r2, r3, #8
 8007624:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007628:	f8d4 b000 	ldr.w	fp, [r4]
 800762c:	f8c8 2000 	str.w	r2, [r8]
 8007630:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007634:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007638:	9307      	str	r3, [sp, #28]
 800763a:	f8cd 8018 	str.w	r8, [sp, #24]
 800763e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007646:	4b9c      	ldr	r3, [pc, #624]	@ (80078b8 <_printf_float+0x2c8>)
 8007648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800764c:	f7f9 fa7e 	bl	8000b4c <__aeabi_dcmpun>
 8007650:	bb70      	cbnz	r0, 80076b0 <_printf_float+0xc0>
 8007652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007656:	4b98      	ldr	r3, [pc, #608]	@ (80078b8 <_printf_float+0x2c8>)
 8007658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800765c:	f7f9 fa58 	bl	8000b10 <__aeabi_dcmple>
 8007660:	bb30      	cbnz	r0, 80076b0 <_printf_float+0xc0>
 8007662:	2200      	movs	r2, #0
 8007664:	2300      	movs	r3, #0
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f9 fa47 	bl	8000afc <__aeabi_dcmplt>
 800766e:	b110      	cbz	r0, 8007676 <_printf_float+0x86>
 8007670:	232d      	movs	r3, #45	@ 0x2d
 8007672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007676:	4a91      	ldr	r2, [pc, #580]	@ (80078bc <_printf_float+0x2cc>)
 8007678:	4b91      	ldr	r3, [pc, #580]	@ (80078c0 <_printf_float+0x2d0>)
 800767a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800767e:	bf94      	ite	ls
 8007680:	4690      	movls	r8, r2
 8007682:	4698      	movhi	r8, r3
 8007684:	2303      	movs	r3, #3
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	f02b 0304 	bic.w	r3, fp, #4
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	f04f 0900 	mov.w	r9, #0
 8007692:	9700      	str	r7, [sp, #0]
 8007694:	4633      	mov	r3, r6
 8007696:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007698:	4621      	mov	r1, r4
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f9d2 	bl	8007a44 <_printf_common>
 80076a0:	3001      	adds	r0, #1
 80076a2:	f040 808d 	bne.w	80077c0 <_printf_float+0x1d0>
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076aa:	b00d      	add	sp, #52	@ 0x34
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7f9 fa48 	bl	8000b4c <__aeabi_dcmpun>
 80076bc:	b140      	cbz	r0, 80076d0 <_printf_float+0xe0>
 80076be:	464b      	mov	r3, r9
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	bfbc      	itt	lt
 80076c4:	232d      	movlt	r3, #45	@ 0x2d
 80076c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076ca:	4a7e      	ldr	r2, [pc, #504]	@ (80078c4 <_printf_float+0x2d4>)
 80076cc:	4b7e      	ldr	r3, [pc, #504]	@ (80078c8 <_printf_float+0x2d8>)
 80076ce:	e7d4      	b.n	800767a <_printf_float+0x8a>
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076d6:	9206      	str	r2, [sp, #24]
 80076d8:	1c5a      	adds	r2, r3, #1
 80076da:	d13b      	bne.n	8007754 <_printf_float+0x164>
 80076dc:	2306      	movs	r3, #6
 80076de:	6063      	str	r3, [r4, #4]
 80076e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076e4:	2300      	movs	r3, #0
 80076e6:	6022      	str	r2, [r4, #0]
 80076e8:	9303      	str	r3, [sp, #12]
 80076ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80076ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076f0:	ab09      	add	r3, sp, #36	@ 0x24
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	6861      	ldr	r1, [r4, #4]
 80076f6:	ec49 8b10 	vmov	d0, r8, r9
 80076fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076fe:	4628      	mov	r0, r5
 8007700:	f7ff fed7 	bl	80074b2 <__cvt>
 8007704:	9b06      	ldr	r3, [sp, #24]
 8007706:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007708:	2b47      	cmp	r3, #71	@ 0x47
 800770a:	4680      	mov	r8, r0
 800770c:	d129      	bne.n	8007762 <_printf_float+0x172>
 800770e:	1cc8      	adds	r0, r1, #3
 8007710:	db02      	blt.n	8007718 <_printf_float+0x128>
 8007712:	6863      	ldr	r3, [r4, #4]
 8007714:	4299      	cmp	r1, r3
 8007716:	dd41      	ble.n	800779c <_printf_float+0x1ac>
 8007718:	f1aa 0a02 	sub.w	sl, sl, #2
 800771c:	fa5f fa8a 	uxtb.w	sl, sl
 8007720:	3901      	subs	r1, #1
 8007722:	4652      	mov	r2, sl
 8007724:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007728:	9109      	str	r1, [sp, #36]	@ 0x24
 800772a:	f7ff ff27 	bl	800757c <__exponent>
 800772e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007730:	1813      	adds	r3, r2, r0
 8007732:	2a01      	cmp	r2, #1
 8007734:	4681      	mov	r9, r0
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	dc02      	bgt.n	8007740 <_printf_float+0x150>
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	07d2      	lsls	r2, r2, #31
 800773e:	d501      	bpl.n	8007744 <_printf_float+0x154>
 8007740:	3301      	adds	r3, #1
 8007742:	6123      	str	r3, [r4, #16]
 8007744:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0a2      	beq.n	8007692 <_printf_float+0xa2>
 800774c:	232d      	movs	r3, #45	@ 0x2d
 800774e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007752:	e79e      	b.n	8007692 <_printf_float+0xa2>
 8007754:	9a06      	ldr	r2, [sp, #24]
 8007756:	2a47      	cmp	r2, #71	@ 0x47
 8007758:	d1c2      	bne.n	80076e0 <_printf_float+0xf0>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1c0      	bne.n	80076e0 <_printf_float+0xf0>
 800775e:	2301      	movs	r3, #1
 8007760:	e7bd      	b.n	80076de <_printf_float+0xee>
 8007762:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007766:	d9db      	bls.n	8007720 <_printf_float+0x130>
 8007768:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800776c:	d118      	bne.n	80077a0 <_printf_float+0x1b0>
 800776e:	2900      	cmp	r1, #0
 8007770:	6863      	ldr	r3, [r4, #4]
 8007772:	dd0b      	ble.n	800778c <_printf_float+0x19c>
 8007774:	6121      	str	r1, [r4, #16]
 8007776:	b913      	cbnz	r3, 800777e <_printf_float+0x18e>
 8007778:	6822      	ldr	r2, [r4, #0]
 800777a:	07d0      	lsls	r0, r2, #31
 800777c:	d502      	bpl.n	8007784 <_printf_float+0x194>
 800777e:	3301      	adds	r3, #1
 8007780:	440b      	add	r3, r1
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007786:	f04f 0900 	mov.w	r9, #0
 800778a:	e7db      	b.n	8007744 <_printf_float+0x154>
 800778c:	b913      	cbnz	r3, 8007794 <_printf_float+0x1a4>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	07d2      	lsls	r2, r2, #31
 8007792:	d501      	bpl.n	8007798 <_printf_float+0x1a8>
 8007794:	3302      	adds	r3, #2
 8007796:	e7f4      	b.n	8007782 <_printf_float+0x192>
 8007798:	2301      	movs	r3, #1
 800779a:	e7f2      	b.n	8007782 <_printf_float+0x192>
 800779c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a2:	4299      	cmp	r1, r3
 80077a4:	db05      	blt.n	80077b2 <_printf_float+0x1c2>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	6121      	str	r1, [r4, #16]
 80077aa:	07d8      	lsls	r0, r3, #31
 80077ac:	d5ea      	bpl.n	8007784 <_printf_float+0x194>
 80077ae:	1c4b      	adds	r3, r1, #1
 80077b0:	e7e7      	b.n	8007782 <_printf_float+0x192>
 80077b2:	2900      	cmp	r1, #0
 80077b4:	bfd4      	ite	le
 80077b6:	f1c1 0202 	rsble	r2, r1, #2
 80077ba:	2201      	movgt	r2, #1
 80077bc:	4413      	add	r3, r2
 80077be:	e7e0      	b.n	8007782 <_printf_float+0x192>
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	055a      	lsls	r2, r3, #21
 80077c4:	d407      	bmi.n	80077d6 <_printf_float+0x1e6>
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	4642      	mov	r2, r8
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	d12b      	bne.n	800782c <_printf_float+0x23c>
 80077d4:	e767      	b.n	80076a6 <_printf_float+0xb6>
 80077d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077da:	f240 80dd 	bls.w	8007998 <_printf_float+0x3a8>
 80077de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	f7f9 f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d033      	beq.n	8007856 <_printf_float+0x266>
 80077ee:	4a37      	ldr	r2, [pc, #220]	@ (80078cc <_printf_float+0x2dc>)
 80077f0:	2301      	movs	r3, #1
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f af54 	beq.w	80076a6 <_printf_float+0xb6>
 80077fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007802:	4543      	cmp	r3, r8
 8007804:	db02      	blt.n	800780c <_printf_float+0x21c>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	07d8      	lsls	r0, r3, #31
 800780a:	d50f      	bpl.n	800782c <_printf_float+0x23c>
 800780c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af45 	beq.w	80076a6 <_printf_float+0xb6>
 800781c:	f04f 0900 	mov.w	r9, #0
 8007820:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007824:	f104 0a1a 	add.w	sl, r4, #26
 8007828:	45c8      	cmp	r8, r9
 800782a:	dc09      	bgt.n	8007840 <_printf_float+0x250>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	079b      	lsls	r3, r3, #30
 8007830:	f100 8103 	bmi.w	8007a3a <_printf_float+0x44a>
 8007834:	68e0      	ldr	r0, [r4, #12]
 8007836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007838:	4298      	cmp	r0, r3
 800783a:	bfb8      	it	lt
 800783c:	4618      	movlt	r0, r3
 800783e:	e734      	b.n	80076aa <_printf_float+0xba>
 8007840:	2301      	movs	r3, #1
 8007842:	4652      	mov	r2, sl
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	47b8      	blx	r7
 800784a:	3001      	adds	r0, #1
 800784c:	f43f af2b 	beq.w	80076a6 <_printf_float+0xb6>
 8007850:	f109 0901 	add.w	r9, r9, #1
 8007854:	e7e8      	b.n	8007828 <_printf_float+0x238>
 8007856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc39      	bgt.n	80078d0 <_printf_float+0x2e0>
 800785c:	4a1b      	ldr	r2, [pc, #108]	@ (80078cc <_printf_float+0x2dc>)
 800785e:	2301      	movs	r3, #1
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af1d 	beq.w	80076a6 <_printf_float+0xb6>
 800786c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007870:	ea59 0303 	orrs.w	r3, r9, r3
 8007874:	d102      	bne.n	800787c <_printf_float+0x28c>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	07d9      	lsls	r1, r3, #31
 800787a:	d5d7      	bpl.n	800782c <_printf_float+0x23c>
 800787c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f af0d 	beq.w	80076a6 <_printf_float+0xb6>
 800788c:	f04f 0a00 	mov.w	sl, #0
 8007890:	f104 0b1a 	add.w	fp, r4, #26
 8007894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007896:	425b      	negs	r3, r3
 8007898:	4553      	cmp	r3, sl
 800789a:	dc01      	bgt.n	80078a0 <_printf_float+0x2b0>
 800789c:	464b      	mov	r3, r9
 800789e:	e793      	b.n	80077c8 <_printf_float+0x1d8>
 80078a0:	2301      	movs	r3, #1
 80078a2:	465a      	mov	r2, fp
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f aefb 	beq.w	80076a6 <_printf_float+0xb6>
 80078b0:	f10a 0a01 	add.w	sl, sl, #1
 80078b4:	e7ee      	b.n	8007894 <_printf_float+0x2a4>
 80078b6:	bf00      	nop
 80078b8:	7fefffff 	.word	0x7fefffff
 80078bc:	08009f90 	.word	0x08009f90
 80078c0:	08009f94 	.word	0x08009f94
 80078c4:	08009f98 	.word	0x08009f98
 80078c8:	08009f9c 	.word	0x08009f9c
 80078cc:	08009fa0 	.word	0x08009fa0
 80078d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078d6:	4553      	cmp	r3, sl
 80078d8:	bfa8      	it	ge
 80078da:	4653      	movge	r3, sl
 80078dc:	2b00      	cmp	r3, #0
 80078de:	4699      	mov	r9, r3
 80078e0:	dc36      	bgt.n	8007950 <_printf_float+0x360>
 80078e2:	f04f 0b00 	mov.w	fp, #0
 80078e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ea:	f104 021a 	add.w	r2, r4, #26
 80078ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078f0:	9306      	str	r3, [sp, #24]
 80078f2:	eba3 0309 	sub.w	r3, r3, r9
 80078f6:	455b      	cmp	r3, fp
 80078f8:	dc31      	bgt.n	800795e <_printf_float+0x36e>
 80078fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fc:	459a      	cmp	sl, r3
 80078fe:	dc3a      	bgt.n	8007976 <_printf_float+0x386>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	07da      	lsls	r2, r3, #31
 8007904:	d437      	bmi.n	8007976 <_printf_float+0x386>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	ebaa 0903 	sub.w	r9, sl, r3
 800790c:	9b06      	ldr	r3, [sp, #24]
 800790e:	ebaa 0303 	sub.w	r3, sl, r3
 8007912:	4599      	cmp	r9, r3
 8007914:	bfa8      	it	ge
 8007916:	4699      	movge	r9, r3
 8007918:	f1b9 0f00 	cmp.w	r9, #0
 800791c:	dc33      	bgt.n	8007986 <_printf_float+0x396>
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007926:	f104 0b1a 	add.w	fp, r4, #26
 800792a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792c:	ebaa 0303 	sub.w	r3, sl, r3
 8007930:	eba3 0309 	sub.w	r3, r3, r9
 8007934:	4543      	cmp	r3, r8
 8007936:	f77f af79 	ble.w	800782c <_printf_float+0x23c>
 800793a:	2301      	movs	r3, #1
 800793c:	465a      	mov	r2, fp
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f aeae 	beq.w	80076a6 <_printf_float+0xb6>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	e7ec      	b.n	800792a <_printf_float+0x33a>
 8007950:	4642      	mov	r2, r8
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	d1c2      	bne.n	80078e2 <_printf_float+0x2f2>
 800795c:	e6a3      	b.n	80076a6 <_printf_float+0xb6>
 800795e:	2301      	movs	r3, #1
 8007960:	4631      	mov	r1, r6
 8007962:	4628      	mov	r0, r5
 8007964:	9206      	str	r2, [sp, #24]
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae9c 	beq.w	80076a6 <_printf_float+0xb6>
 800796e:	9a06      	ldr	r2, [sp, #24]
 8007970:	f10b 0b01 	add.w	fp, fp, #1
 8007974:	e7bb      	b.n	80078ee <_printf_float+0x2fe>
 8007976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	d1c0      	bne.n	8007906 <_printf_float+0x316>
 8007984:	e68f      	b.n	80076a6 <_printf_float+0xb6>
 8007986:	9a06      	ldr	r2, [sp, #24]
 8007988:	464b      	mov	r3, r9
 800798a:	4442      	add	r2, r8
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	d1c3      	bne.n	800791e <_printf_float+0x32e>
 8007996:	e686      	b.n	80076a6 <_printf_float+0xb6>
 8007998:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800799c:	f1ba 0f01 	cmp.w	sl, #1
 80079a0:	dc01      	bgt.n	80079a6 <_printf_float+0x3b6>
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d536      	bpl.n	8007a14 <_printf_float+0x424>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4642      	mov	r2, r8
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f ae78 	beq.w	80076a6 <_printf_float+0xb6>
 80079b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f ae70 	beq.w	80076a6 <_printf_float+0xb6>
 80079c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079ca:	2200      	movs	r2, #0
 80079cc:	2300      	movs	r3, #0
 80079ce:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80079d2:	f7f9 f889 	bl	8000ae8 <__aeabi_dcmpeq>
 80079d6:	b9c0      	cbnz	r0, 8007a0a <_printf_float+0x41a>
 80079d8:	4653      	mov	r3, sl
 80079da:	f108 0201 	add.w	r2, r8, #1
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b8      	blx	r7
 80079e4:	3001      	adds	r0, #1
 80079e6:	d10c      	bne.n	8007a02 <_printf_float+0x412>
 80079e8:	e65d      	b.n	80076a6 <_printf_float+0xb6>
 80079ea:	2301      	movs	r3, #1
 80079ec:	465a      	mov	r2, fp
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae56 	beq.w	80076a6 <_printf_float+0xb6>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	45d0      	cmp	r8, sl
 8007a00:	dbf3      	blt.n	80079ea <_printf_float+0x3fa>
 8007a02:	464b      	mov	r3, r9
 8007a04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a08:	e6df      	b.n	80077ca <_printf_float+0x1da>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 0b1a 	add.w	fp, r4, #26
 8007a12:	e7f4      	b.n	80079fe <_printf_float+0x40e>
 8007a14:	2301      	movs	r3, #1
 8007a16:	4642      	mov	r2, r8
 8007a18:	e7e1      	b.n	80079de <_printf_float+0x3ee>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	464a      	mov	r2, r9
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	f43f ae3e 	beq.w	80076a6 <_printf_float+0xb6>
 8007a2a:	f108 0801 	add.w	r8, r8, #1
 8007a2e:	68e3      	ldr	r3, [r4, #12]
 8007a30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a32:	1a5b      	subs	r3, r3, r1
 8007a34:	4543      	cmp	r3, r8
 8007a36:	dcf0      	bgt.n	8007a1a <_printf_float+0x42a>
 8007a38:	e6fc      	b.n	8007834 <_printf_float+0x244>
 8007a3a:	f04f 0800 	mov.w	r8, #0
 8007a3e:	f104 0919 	add.w	r9, r4, #25
 8007a42:	e7f4      	b.n	8007a2e <_printf_float+0x43e>

08007a44 <_printf_common>:
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	4616      	mov	r6, r2
 8007a4a:	4698      	mov	r8, r3
 8007a4c:	688a      	ldr	r2, [r1, #8]
 8007a4e:	690b      	ldr	r3, [r1, #16]
 8007a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bfb8      	it	lt
 8007a58:	4613      	movlt	r3, r2
 8007a5a:	6033      	str	r3, [r6, #0]
 8007a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a60:	4607      	mov	r7, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	b10a      	cbz	r2, 8007a6a <_printf_common+0x26>
 8007a66:	3301      	adds	r3, #1
 8007a68:	6033      	str	r3, [r6, #0]
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	0699      	lsls	r1, r3, #26
 8007a6e:	bf42      	ittt	mi
 8007a70:	6833      	ldrmi	r3, [r6, #0]
 8007a72:	3302      	addmi	r3, #2
 8007a74:	6033      	strmi	r3, [r6, #0]
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	f015 0506 	ands.w	r5, r5, #6
 8007a7c:	d106      	bne.n	8007a8c <_printf_common+0x48>
 8007a7e:	f104 0a19 	add.w	sl, r4, #25
 8007a82:	68e3      	ldr	r3, [r4, #12]
 8007a84:	6832      	ldr	r2, [r6, #0]
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	42ab      	cmp	r3, r5
 8007a8a:	dc26      	bgt.n	8007ada <_printf_common+0x96>
 8007a8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a90:	6822      	ldr	r2, [r4, #0]
 8007a92:	3b00      	subs	r3, #0
 8007a94:	bf18      	it	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	0692      	lsls	r2, r2, #26
 8007a9a:	d42b      	bmi.n	8007af4 <_printf_common+0xb0>
 8007a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	47c8      	blx	r9
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d01e      	beq.n	8007ae8 <_printf_common+0xa4>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	6922      	ldr	r2, [r4, #16]
 8007aae:	f003 0306 	and.w	r3, r3, #6
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	bf02      	ittt	eq
 8007ab6:	68e5      	ldreq	r5, [r4, #12]
 8007ab8:	6833      	ldreq	r3, [r6, #0]
 8007aba:	1aed      	subeq	r5, r5, r3
 8007abc:	68a3      	ldr	r3, [r4, #8]
 8007abe:	bf0c      	ite	eq
 8007ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac4:	2500      	movne	r5, #0
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	bfc4      	itt	gt
 8007aca:	1a9b      	subgt	r3, r3, r2
 8007acc:	18ed      	addgt	r5, r5, r3
 8007ace:	2600      	movs	r6, #0
 8007ad0:	341a      	adds	r4, #26
 8007ad2:	42b5      	cmp	r5, r6
 8007ad4:	d11a      	bne.n	8007b0c <_printf_common+0xc8>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e008      	b.n	8007aec <_printf_common+0xa8>
 8007ada:	2301      	movs	r3, #1
 8007adc:	4652      	mov	r2, sl
 8007ade:	4641      	mov	r1, r8
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	47c8      	blx	r9
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d103      	bne.n	8007af0 <_printf_common+0xac>
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	3501      	adds	r5, #1
 8007af2:	e7c6      	b.n	8007a82 <_printf_common+0x3e>
 8007af4:	18e1      	adds	r1, r4, r3
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	2030      	movs	r0, #48	@ 0x30
 8007afa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007afe:	4422      	add	r2, r4
 8007b00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b08:	3302      	adds	r3, #2
 8007b0a:	e7c7      	b.n	8007a9c <_printf_common+0x58>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4641      	mov	r1, r8
 8007b12:	4638      	mov	r0, r7
 8007b14:	47c8      	blx	r9
 8007b16:	3001      	adds	r0, #1
 8007b18:	d0e6      	beq.n	8007ae8 <_printf_common+0xa4>
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7d9      	b.n	8007ad2 <_printf_common+0x8e>
	...

08007b20 <_printf_i>:
 8007b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	7e0f      	ldrb	r7, [r1, #24]
 8007b26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b28:	2f78      	cmp	r7, #120	@ 0x78
 8007b2a:	4691      	mov	r9, r2
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	469a      	mov	sl, r3
 8007b32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b36:	d807      	bhi.n	8007b48 <_printf_i+0x28>
 8007b38:	2f62      	cmp	r7, #98	@ 0x62
 8007b3a:	d80a      	bhi.n	8007b52 <_printf_i+0x32>
 8007b3c:	2f00      	cmp	r7, #0
 8007b3e:	f000 80d2 	beq.w	8007ce6 <_printf_i+0x1c6>
 8007b42:	2f58      	cmp	r7, #88	@ 0x58
 8007b44:	f000 80b9 	beq.w	8007cba <_printf_i+0x19a>
 8007b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b50:	e03a      	b.n	8007bc8 <_printf_i+0xa8>
 8007b52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b56:	2b15      	cmp	r3, #21
 8007b58:	d8f6      	bhi.n	8007b48 <_printf_i+0x28>
 8007b5a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b60 <_printf_i+0x40>)
 8007b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b60:	08007bb9 	.word	0x08007bb9
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007b49 	.word	0x08007b49
 8007b6c:	08007b49 	.word	0x08007b49
 8007b70:	08007b49 	.word	0x08007b49
 8007b74:	08007b49 	.word	0x08007b49
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b49 	.word	0x08007b49
 8007b80:	08007b49 	.word	0x08007b49
 8007b84:	08007b49 	.word	0x08007b49
 8007b88:	08007b49 	.word	0x08007b49
 8007b8c:	08007ccd 	.word	0x08007ccd
 8007b90:	08007bf7 	.word	0x08007bf7
 8007b94:	08007c87 	.word	0x08007c87
 8007b98:	08007b49 	.word	0x08007b49
 8007b9c:	08007b49 	.word	0x08007b49
 8007ba0:	08007cef 	.word	0x08007cef
 8007ba4:	08007b49 	.word	0x08007b49
 8007ba8:	08007bf7 	.word	0x08007bf7
 8007bac:	08007b49 	.word	0x08007b49
 8007bb0:	08007b49 	.word	0x08007b49
 8007bb4:	08007c8f 	.word	0x08007c8f
 8007bb8:	6833      	ldr	r3, [r6, #0]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6032      	str	r2, [r6, #0]
 8007bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e09d      	b.n	8007d08 <_printf_i+0x1e8>
 8007bcc:	6833      	ldr	r3, [r6, #0]
 8007bce:	6820      	ldr	r0, [r4, #0]
 8007bd0:	1d19      	adds	r1, r3, #4
 8007bd2:	6031      	str	r1, [r6, #0]
 8007bd4:	0606      	lsls	r6, r0, #24
 8007bd6:	d501      	bpl.n	8007bdc <_printf_i+0xbc>
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	e003      	b.n	8007be4 <_printf_i+0xc4>
 8007bdc:	0645      	lsls	r5, r0, #25
 8007bde:	d5fb      	bpl.n	8007bd8 <_printf_i+0xb8>
 8007be0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	da03      	bge.n	8007bf0 <_printf_i+0xd0>
 8007be8:	232d      	movs	r3, #45	@ 0x2d
 8007bea:	426d      	negs	r5, r5
 8007bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bf0:	4859      	ldr	r0, [pc, #356]	@ (8007d58 <_printf_i+0x238>)
 8007bf2:	230a      	movs	r3, #10
 8007bf4:	e011      	b.n	8007c1a <_printf_i+0xfa>
 8007bf6:	6821      	ldr	r1, [r4, #0]
 8007bf8:	6833      	ldr	r3, [r6, #0]
 8007bfa:	0608      	lsls	r0, r1, #24
 8007bfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c00:	d402      	bmi.n	8007c08 <_printf_i+0xe8>
 8007c02:	0649      	lsls	r1, r1, #25
 8007c04:	bf48      	it	mi
 8007c06:	b2ad      	uxthmi	r5, r5
 8007c08:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c0a:	4853      	ldr	r0, [pc, #332]	@ (8007d58 <_printf_i+0x238>)
 8007c0c:	6033      	str	r3, [r6, #0]
 8007c0e:	bf14      	ite	ne
 8007c10:	230a      	movne	r3, #10
 8007c12:	2308      	moveq	r3, #8
 8007c14:	2100      	movs	r1, #0
 8007c16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c1a:	6866      	ldr	r6, [r4, #4]
 8007c1c:	60a6      	str	r6, [r4, #8]
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	bfa2      	ittt	ge
 8007c22:	6821      	ldrge	r1, [r4, #0]
 8007c24:	f021 0104 	bicge.w	r1, r1, #4
 8007c28:	6021      	strge	r1, [r4, #0]
 8007c2a:	b90d      	cbnz	r5, 8007c30 <_printf_i+0x110>
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	d04b      	beq.n	8007cc8 <_printf_i+0x1a8>
 8007c30:	4616      	mov	r6, r2
 8007c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c36:	fb03 5711 	mls	r7, r3, r1, r5
 8007c3a:	5dc7      	ldrb	r7, [r0, r7]
 8007c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c40:	462f      	mov	r7, r5
 8007c42:	42bb      	cmp	r3, r7
 8007c44:	460d      	mov	r5, r1
 8007c46:	d9f4      	bls.n	8007c32 <_printf_i+0x112>
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d10b      	bne.n	8007c64 <_printf_i+0x144>
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	07df      	lsls	r7, r3, #31
 8007c50:	d508      	bpl.n	8007c64 <_printf_i+0x144>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6861      	ldr	r1, [r4, #4]
 8007c56:	4299      	cmp	r1, r3
 8007c58:	bfde      	ittt	le
 8007c5a:	2330      	movle	r3, #48	@ 0x30
 8007c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c60:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007c64:	1b92      	subs	r2, r2, r6
 8007c66:	6122      	str	r2, [r4, #16]
 8007c68:	f8cd a000 	str.w	sl, [sp]
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	aa03      	add	r2, sp, #12
 8007c70:	4621      	mov	r1, r4
 8007c72:	4640      	mov	r0, r8
 8007c74:	f7ff fee6 	bl	8007a44 <_printf_common>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d14a      	bne.n	8007d12 <_printf_i+0x1f2>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c80:	b004      	add	sp, #16
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	f043 0320 	orr.w	r3, r3, #32
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	4833      	ldr	r0, [pc, #204]	@ (8007d5c <_printf_i+0x23c>)
 8007c90:	2778      	movs	r7, #120	@ 0x78
 8007c92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	6831      	ldr	r1, [r6, #0]
 8007c9a:	061f      	lsls	r7, r3, #24
 8007c9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ca0:	d402      	bmi.n	8007ca8 <_printf_i+0x188>
 8007ca2:	065f      	lsls	r7, r3, #25
 8007ca4:	bf48      	it	mi
 8007ca6:	b2ad      	uxthmi	r5, r5
 8007ca8:	6031      	str	r1, [r6, #0]
 8007caa:	07d9      	lsls	r1, r3, #31
 8007cac:	bf44      	itt	mi
 8007cae:	f043 0320 	orrmi.w	r3, r3, #32
 8007cb2:	6023      	strmi	r3, [r4, #0]
 8007cb4:	b11d      	cbz	r5, 8007cbe <_printf_i+0x19e>
 8007cb6:	2310      	movs	r3, #16
 8007cb8:	e7ac      	b.n	8007c14 <_printf_i+0xf4>
 8007cba:	4827      	ldr	r0, [pc, #156]	@ (8007d58 <_printf_i+0x238>)
 8007cbc:	e7e9      	b.n	8007c92 <_printf_i+0x172>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	f023 0320 	bic.w	r3, r3, #32
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	e7f6      	b.n	8007cb6 <_printf_i+0x196>
 8007cc8:	4616      	mov	r6, r2
 8007cca:	e7bd      	b.n	8007c48 <_printf_i+0x128>
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	6825      	ldr	r5, [r4, #0]
 8007cd0:	6961      	ldr	r1, [r4, #20]
 8007cd2:	1d18      	adds	r0, r3, #4
 8007cd4:	6030      	str	r0, [r6, #0]
 8007cd6:	062e      	lsls	r6, r5, #24
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	d501      	bpl.n	8007ce0 <_printf_i+0x1c0>
 8007cdc:	6019      	str	r1, [r3, #0]
 8007cde:	e002      	b.n	8007ce6 <_printf_i+0x1c6>
 8007ce0:	0668      	lsls	r0, r5, #25
 8007ce2:	d5fb      	bpl.n	8007cdc <_printf_i+0x1bc>
 8007ce4:	8019      	strh	r1, [r3, #0]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	4616      	mov	r6, r2
 8007cec:	e7bc      	b.n	8007c68 <_printf_i+0x148>
 8007cee:	6833      	ldr	r3, [r6, #0]
 8007cf0:	1d1a      	adds	r2, r3, #4
 8007cf2:	6032      	str	r2, [r6, #0]
 8007cf4:	681e      	ldr	r6, [r3, #0]
 8007cf6:	6862      	ldr	r2, [r4, #4]
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 fa78 	bl	80001f0 <memchr>
 8007d00:	b108      	cbz	r0, 8007d06 <_printf_i+0x1e6>
 8007d02:	1b80      	subs	r0, r0, r6
 8007d04:	6060      	str	r0, [r4, #4]
 8007d06:	6863      	ldr	r3, [r4, #4]
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d10:	e7aa      	b.n	8007c68 <_printf_i+0x148>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	4632      	mov	r2, r6
 8007d16:	4649      	mov	r1, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	47d0      	blx	sl
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d0ad      	beq.n	8007c7c <_printf_i+0x15c>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	079b      	lsls	r3, r3, #30
 8007d24:	d413      	bmi.n	8007d4e <_printf_i+0x22e>
 8007d26:	68e0      	ldr	r0, [r4, #12]
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	4298      	cmp	r0, r3
 8007d2c:	bfb8      	it	lt
 8007d2e:	4618      	movlt	r0, r3
 8007d30:	e7a6      	b.n	8007c80 <_printf_i+0x160>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4632      	mov	r2, r6
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	47d0      	blx	sl
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d09d      	beq.n	8007c7c <_printf_i+0x15c>
 8007d40:	3501      	adds	r5, #1
 8007d42:	68e3      	ldr	r3, [r4, #12]
 8007d44:	9903      	ldr	r1, [sp, #12]
 8007d46:	1a5b      	subs	r3, r3, r1
 8007d48:	42ab      	cmp	r3, r5
 8007d4a:	dcf2      	bgt.n	8007d32 <_printf_i+0x212>
 8007d4c:	e7eb      	b.n	8007d26 <_printf_i+0x206>
 8007d4e:	2500      	movs	r5, #0
 8007d50:	f104 0619 	add.w	r6, r4, #25
 8007d54:	e7f5      	b.n	8007d42 <_printf_i+0x222>
 8007d56:	bf00      	nop
 8007d58:	08009fa2 	.word	0x08009fa2
 8007d5c:	08009fb3 	.word	0x08009fb3

08007d60 <std>:
 8007d60:	2300      	movs	r3, #0
 8007d62:	b510      	push	{r4, lr}
 8007d64:	4604      	mov	r4, r0
 8007d66:	e9c0 3300 	strd	r3, r3, [r0]
 8007d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d6e:	6083      	str	r3, [r0, #8]
 8007d70:	8181      	strh	r1, [r0, #12]
 8007d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d74:	81c2      	strh	r2, [r0, #14]
 8007d76:	6183      	str	r3, [r0, #24]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	305c      	adds	r0, #92	@ 0x5c
 8007d7e:	f000 f9a8 	bl	80080d2 <memset>
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <std+0x58>)
 8007d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d86:	4b0d      	ldr	r3, [pc, #52]	@ (8007dbc <std+0x5c>)
 8007d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc0 <std+0x60>)
 8007d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <std+0x64>)
 8007d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d92:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <std+0x68>)
 8007d94:	6224      	str	r4, [r4, #32]
 8007d96:	429c      	cmp	r4, r3
 8007d98:	d006      	beq.n	8007da8 <std+0x48>
 8007d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d9e:	4294      	cmp	r4, r2
 8007da0:	d002      	beq.n	8007da8 <std+0x48>
 8007da2:	33d0      	adds	r3, #208	@ 0xd0
 8007da4:	429c      	cmp	r4, r3
 8007da6:	d105      	bne.n	8007db4 <std+0x54>
 8007da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db0:	f000 ba0c 	b.w	80081cc <__retarget_lock_init_recursive>
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	bf00      	nop
 8007db8:	0800804d 	.word	0x0800804d
 8007dbc:	0800806f 	.word	0x0800806f
 8007dc0:	080080a7 	.word	0x080080a7
 8007dc4:	080080cb 	.word	0x080080cb
 8007dc8:	200003f0 	.word	0x200003f0

08007dcc <stdio_exit_handler>:
 8007dcc:	4a02      	ldr	r2, [pc, #8]	@ (8007dd8 <stdio_exit_handler+0xc>)
 8007dce:	4903      	ldr	r1, [pc, #12]	@ (8007ddc <stdio_exit_handler+0x10>)
 8007dd0:	4803      	ldr	r0, [pc, #12]	@ (8007de0 <stdio_exit_handler+0x14>)
 8007dd2:	f000 b869 	b.w	8007ea8 <_fwalk_sglue>
 8007dd6:	bf00      	nop
 8007dd8:	2000000c 	.word	0x2000000c
 8007ddc:	08009895 	.word	0x08009895
 8007de0:	2000001c 	.word	0x2000001c

08007de4 <cleanup_stdio>:
 8007de4:	6841      	ldr	r1, [r0, #4]
 8007de6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <cleanup_stdio+0x34>)
 8007de8:	4299      	cmp	r1, r3
 8007dea:	b510      	push	{r4, lr}
 8007dec:	4604      	mov	r4, r0
 8007dee:	d001      	beq.n	8007df4 <cleanup_stdio+0x10>
 8007df0:	f001 fd50 	bl	8009894 <_fflush_r>
 8007df4:	68a1      	ldr	r1, [r4, #8]
 8007df6:	4b09      	ldr	r3, [pc, #36]	@ (8007e1c <cleanup_stdio+0x38>)
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	d002      	beq.n	8007e02 <cleanup_stdio+0x1e>
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f001 fd49 	bl	8009894 <_fflush_r>
 8007e02:	68e1      	ldr	r1, [r4, #12]
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <cleanup_stdio+0x3c>)
 8007e06:	4299      	cmp	r1, r3
 8007e08:	d004      	beq.n	8007e14 <cleanup_stdio+0x30>
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e10:	f001 bd40 	b.w	8009894 <_fflush_r>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	bf00      	nop
 8007e18:	200003f0 	.word	0x200003f0
 8007e1c:	20000458 	.word	0x20000458
 8007e20:	200004c0 	.word	0x200004c0

08007e24 <global_stdio_init.part.0>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4b0b      	ldr	r3, [pc, #44]	@ (8007e54 <global_stdio_init.part.0+0x30>)
 8007e28:	4c0b      	ldr	r4, [pc, #44]	@ (8007e58 <global_stdio_init.part.0+0x34>)
 8007e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e5c <global_stdio_init.part.0+0x38>)
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	2200      	movs	r2, #0
 8007e32:	2104      	movs	r1, #4
 8007e34:	f7ff ff94 	bl	8007d60 <std>
 8007e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	2109      	movs	r1, #9
 8007e40:	f7ff ff8e 	bl	8007d60 <std>
 8007e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e48:	2202      	movs	r2, #2
 8007e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4e:	2112      	movs	r1, #18
 8007e50:	f7ff bf86 	b.w	8007d60 <std>
 8007e54:	20000528 	.word	0x20000528
 8007e58:	200003f0 	.word	0x200003f0
 8007e5c:	08007dcd 	.word	0x08007dcd

08007e60 <__sfp_lock_acquire>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__sfp_lock_acquire+0x8>)
 8007e62:	f000 b9b4 	b.w	80081ce <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	20000531 	.word	0x20000531

08007e6c <__sfp_lock_release>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	@ (8007e74 <__sfp_lock_release+0x8>)
 8007e6e:	f000 b9af 	b.w	80081d0 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	20000531 	.word	0x20000531

08007e78 <__sinit>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	f7ff fff0 	bl	8007e60 <__sfp_lock_acquire>
 8007e80:	6a23      	ldr	r3, [r4, #32]
 8007e82:	b11b      	cbz	r3, 8007e8c <__sinit+0x14>
 8007e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e88:	f7ff bff0 	b.w	8007e6c <__sfp_lock_release>
 8007e8c:	4b04      	ldr	r3, [pc, #16]	@ (8007ea0 <__sinit+0x28>)
 8007e8e:	6223      	str	r3, [r4, #32]
 8007e90:	4b04      	ldr	r3, [pc, #16]	@ (8007ea4 <__sinit+0x2c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f5      	bne.n	8007e84 <__sinit+0xc>
 8007e98:	f7ff ffc4 	bl	8007e24 <global_stdio_init.part.0>
 8007e9c:	e7f2      	b.n	8007e84 <__sinit+0xc>
 8007e9e:	bf00      	nop
 8007ea0:	08007de5 	.word	0x08007de5
 8007ea4:	20000528 	.word	0x20000528

08007ea8 <_fwalk_sglue>:
 8007ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eac:	4607      	mov	r7, r0
 8007eae:	4688      	mov	r8, r1
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007ebc:	d505      	bpl.n	8007eca <_fwalk_sglue+0x22>
 8007ebe:	6824      	ldr	r4, [r4, #0]
 8007ec0:	2c00      	cmp	r4, #0
 8007ec2:	d1f7      	bne.n	8007eb4 <_fwalk_sglue+0xc>
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eca:	89ab      	ldrh	r3, [r5, #12]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d907      	bls.n	8007ee0 <_fwalk_sglue+0x38>
 8007ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	d003      	beq.n	8007ee0 <_fwalk_sglue+0x38>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	47c0      	blx	r8
 8007ede:	4306      	orrs	r6, r0
 8007ee0:	3568      	adds	r5, #104	@ 0x68
 8007ee2:	e7e9      	b.n	8007eb8 <_fwalk_sglue+0x10>

08007ee4 <setvbuf>:
 8007ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	461d      	mov	r5, r3
 8007eea:	4b57      	ldr	r3, [pc, #348]	@ (8008048 <setvbuf+0x164>)
 8007eec:	681f      	ldr	r7, [r3, #0]
 8007eee:	4604      	mov	r4, r0
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	b127      	cbz	r7, 8007f00 <setvbuf+0x1c>
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	b913      	cbnz	r3, 8007f00 <setvbuf+0x1c>
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ffbc 	bl	8007e78 <__sinit>
 8007f00:	f1b8 0f02 	cmp.w	r8, #2
 8007f04:	d006      	beq.n	8007f14 <setvbuf+0x30>
 8007f06:	f1b8 0f01 	cmp.w	r8, #1
 8007f0a:	f200 809a 	bhi.w	8008042 <setvbuf+0x15e>
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	f2c0 8097 	blt.w	8008042 <setvbuf+0x15e>
 8007f14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f16:	07d9      	lsls	r1, r3, #31
 8007f18:	d405      	bmi.n	8007f26 <setvbuf+0x42>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059a      	lsls	r2, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <setvbuf+0x42>
 8007f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f22:	f000 f954 	bl	80081ce <__retarget_lock_acquire_recursive>
 8007f26:	4621      	mov	r1, r4
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f001 fcb3 	bl	8009894 <_fflush_r>
 8007f2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f30:	b141      	cbz	r1, 8007f44 <setvbuf+0x60>
 8007f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f36:	4299      	cmp	r1, r3
 8007f38:	d002      	beq.n	8007f40 <setvbuf+0x5c>
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	f000 ffa4 	bl	8008e88 <_free_r>
 8007f40:	2300      	movs	r3, #0
 8007f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f44:	2300      	movs	r3, #0
 8007f46:	61a3      	str	r3, [r4, #24]
 8007f48:	6063      	str	r3, [r4, #4]
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	061b      	lsls	r3, r3, #24
 8007f4e:	d503      	bpl.n	8007f58 <setvbuf+0x74>
 8007f50:	6921      	ldr	r1, [r4, #16]
 8007f52:	4638      	mov	r0, r7
 8007f54:	f000 ff98 	bl	8008e88 <_free_r>
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	f1b8 0f02 	cmp.w	r8, #2
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	d061      	beq.n	800802e <setvbuf+0x14a>
 8007f6a:	ab01      	add	r3, sp, #4
 8007f6c:	466a      	mov	r2, sp
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4638      	mov	r0, r7
 8007f72:	f001 fcb7 	bl	80098e4 <__swhatbuf_r>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	4318      	orrs	r0, r3
 8007f7a:	81a0      	strh	r0, [r4, #12]
 8007f7c:	bb2d      	cbnz	r5, 8007fca <setvbuf+0xe6>
 8007f7e:	9d00      	ldr	r5, [sp, #0]
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 ffcb 	bl	8008f1c <malloc>
 8007f86:	4606      	mov	r6, r0
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d152      	bne.n	8008032 <setvbuf+0x14e>
 8007f8c:	f8dd 9000 	ldr.w	r9, [sp]
 8007f90:	45a9      	cmp	r9, r5
 8007f92:	d140      	bne.n	8008016 <setvbuf+0x132>
 8007f94:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9c:	f043 0202 	orr.w	r2, r3, #2
 8007fa0:	81a2      	strh	r2, [r4, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	60a2      	str	r2, [r4, #8]
 8007fa6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8007faa:	6022      	str	r2, [r4, #0]
 8007fac:	6122      	str	r2, [r4, #16]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	6162      	str	r2, [r4, #20]
 8007fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fb4:	07d6      	lsls	r6, r2, #31
 8007fb6:	d404      	bmi.n	8007fc2 <setvbuf+0xde>
 8007fb8:	0598      	lsls	r0, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <setvbuf+0xde>
 8007fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fbe:	f000 f907 	bl	80081d0 <__retarget_lock_release_recursive>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	b003      	add	sp, #12
 8007fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d0d8      	beq.n	8007f80 <setvbuf+0x9c>
 8007fce:	6a3b      	ldr	r3, [r7, #32]
 8007fd0:	b913      	cbnz	r3, 8007fd8 <setvbuf+0xf4>
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f7ff ff50 	bl	8007e78 <__sinit>
 8007fd8:	f1b8 0f01 	cmp.w	r8, #1
 8007fdc:	bf08      	it	eq
 8007fde:	89a3      	ldrheq	r3, [r4, #12]
 8007fe0:	6026      	str	r6, [r4, #0]
 8007fe2:	bf04      	itt	eq
 8007fe4:	f043 0301 	orreq.w	r3, r3, #1
 8007fe8:	81a3      	strheq	r3, [r4, #12]
 8007fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fee:	f013 0208 	ands.w	r2, r3, #8
 8007ff2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007ff6:	d01e      	beq.n	8008036 <setvbuf+0x152>
 8007ff8:	07d9      	lsls	r1, r3, #31
 8007ffa:	bf41      	itttt	mi
 8007ffc:	2200      	movmi	r2, #0
 8007ffe:	426d      	negmi	r5, r5
 8008000:	60a2      	strmi	r2, [r4, #8]
 8008002:	61a5      	strmi	r5, [r4, #24]
 8008004:	bf58      	it	pl
 8008006:	60a5      	strpl	r5, [r4, #8]
 8008008:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800800a:	07d2      	lsls	r2, r2, #31
 800800c:	d401      	bmi.n	8008012 <setvbuf+0x12e>
 800800e:	059b      	lsls	r3, r3, #22
 8008010:	d513      	bpl.n	800803a <setvbuf+0x156>
 8008012:	2500      	movs	r5, #0
 8008014:	e7d5      	b.n	8007fc2 <setvbuf+0xde>
 8008016:	4648      	mov	r0, r9
 8008018:	f000 ff80 	bl	8008f1c <malloc>
 800801c:	4606      	mov	r6, r0
 800801e:	2800      	cmp	r0, #0
 8008020:	d0b8      	beq.n	8007f94 <setvbuf+0xb0>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	464d      	mov	r5, r9
 800802c:	e7cf      	b.n	8007fce <setvbuf+0xea>
 800802e:	2500      	movs	r5, #0
 8008030:	e7b2      	b.n	8007f98 <setvbuf+0xb4>
 8008032:	46a9      	mov	r9, r5
 8008034:	e7f5      	b.n	8008022 <setvbuf+0x13e>
 8008036:	60a2      	str	r2, [r4, #8]
 8008038:	e7e6      	b.n	8008008 <setvbuf+0x124>
 800803a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800803c:	f000 f8c8 	bl	80081d0 <__retarget_lock_release_recursive>
 8008040:	e7e7      	b.n	8008012 <setvbuf+0x12e>
 8008042:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008046:	e7bc      	b.n	8007fc2 <setvbuf+0xde>
 8008048:	20000018 	.word	0x20000018

0800804c <__sread>:
 800804c:	b510      	push	{r4, lr}
 800804e:	460c      	mov	r4, r1
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	f000 f86c 	bl	8008130 <_read_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	bfab      	itete	ge
 800805c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800805e:	89a3      	ldrhlt	r3, [r4, #12]
 8008060:	181b      	addge	r3, r3, r0
 8008062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008066:	bfac      	ite	ge
 8008068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800806a:	81a3      	strhlt	r3, [r4, #12]
 800806c:	bd10      	pop	{r4, pc}

0800806e <__swrite>:
 800806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	461f      	mov	r7, r3
 8008074:	898b      	ldrh	r3, [r1, #12]
 8008076:	05db      	lsls	r3, r3, #23
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	4616      	mov	r6, r2
 800807e:	d505      	bpl.n	800808c <__swrite+0x1e>
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	2302      	movs	r3, #2
 8008086:	2200      	movs	r2, #0
 8008088:	f000 f840 	bl	800810c <_lseek_r>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	4632      	mov	r2, r6
 800809a:	463b      	mov	r3, r7
 800809c:	4628      	mov	r0, r5
 800809e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a2:	f000 b857 	b.w	8008154 <_write_r>

080080a6 <__sseek>:
 80080a6:	b510      	push	{r4, lr}
 80080a8:	460c      	mov	r4, r1
 80080aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ae:	f000 f82d 	bl	800810c <_lseek_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	bf15      	itete	ne
 80080b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080c2:	81a3      	strheq	r3, [r4, #12]
 80080c4:	bf18      	it	ne
 80080c6:	81a3      	strhne	r3, [r4, #12]
 80080c8:	bd10      	pop	{r4, pc}

080080ca <__sclose>:
 80080ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ce:	f000 b80d 	b.w	80080ec <_close_r>

080080d2 <memset>:
 80080d2:	4402      	add	r2, r0
 80080d4:	4603      	mov	r3, r0
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d100      	bne.n	80080dc <memset+0xa>
 80080da:	4770      	bx	lr
 80080dc:	f803 1b01 	strb.w	r1, [r3], #1
 80080e0:	e7f9      	b.n	80080d6 <memset+0x4>
	...

080080e4 <_localeconv_r>:
 80080e4:	4800      	ldr	r0, [pc, #0]	@ (80080e8 <_localeconv_r+0x4>)
 80080e6:	4770      	bx	lr
 80080e8:	20000158 	.word	0x20000158

080080ec <_close_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d06      	ldr	r5, [pc, #24]	@ (8008108 <_close_r+0x1c>)
 80080f0:	2300      	movs	r3, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	4608      	mov	r0, r1
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	f7f9 fb32 	bl	8001760 <_close>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_close_r+0x1a>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_close_r+0x1a>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	2000052c 	.word	0x2000052c

0800810c <_lseek_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d07      	ldr	r5, [pc, #28]	@ (800812c <_lseek_r+0x20>)
 8008110:	4604      	mov	r4, r0
 8008112:	4608      	mov	r0, r1
 8008114:	4611      	mov	r1, r2
 8008116:	2200      	movs	r2, #0
 8008118:	602a      	str	r2, [r5, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	f7f9 fb37 	bl	800178e <_lseek>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_lseek_r+0x1e>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_lseek_r+0x1e>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	2000052c 	.word	0x2000052c

08008130 <_read_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	@ (8008150 <_read_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7f9 fb36 	bl	80017b0 <_read>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_read_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_read_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	2000052c 	.word	0x2000052c

08008154 <_write_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	@ (8008174 <_write_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7f9 fad0 	bl	8001708 <_write>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_write_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_write_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2000052c 	.word	0x2000052c

08008178 <__errno>:
 8008178:	4b01      	ldr	r3, [pc, #4]	@ (8008180 <__errno+0x8>)
 800817a:	6818      	ldr	r0, [r3, #0]
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000018 	.word	0x20000018

08008184 <__libc_init_array>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4d0d      	ldr	r5, [pc, #52]	@ (80081bc <__libc_init_array+0x38>)
 8008188:	4c0d      	ldr	r4, [pc, #52]	@ (80081c0 <__libc_init_array+0x3c>)
 800818a:	1b64      	subs	r4, r4, r5
 800818c:	10a4      	asrs	r4, r4, #2
 800818e:	2600      	movs	r6, #0
 8008190:	42a6      	cmp	r6, r4
 8008192:	d109      	bne.n	80081a8 <__libc_init_array+0x24>
 8008194:	4d0b      	ldr	r5, [pc, #44]	@ (80081c4 <__libc_init_array+0x40>)
 8008196:	4c0c      	ldr	r4, [pc, #48]	@ (80081c8 <__libc_init_array+0x44>)
 8008198:	f001 fece 	bl	8009f38 <_init>
 800819c:	1b64      	subs	r4, r4, r5
 800819e:	10a4      	asrs	r4, r4, #2
 80081a0:	2600      	movs	r6, #0
 80081a2:	42a6      	cmp	r6, r4
 80081a4:	d105      	bne.n	80081b2 <__libc_init_array+0x2e>
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ac:	4798      	blx	r3
 80081ae:	3601      	adds	r6, #1
 80081b0:	e7ee      	b.n	8008190 <__libc_init_array+0xc>
 80081b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081b6:	4798      	blx	r3
 80081b8:	3601      	adds	r6, #1
 80081ba:	e7f2      	b.n	80081a2 <__libc_init_array+0x1e>
 80081bc:	0800a308 	.word	0x0800a308
 80081c0:	0800a308 	.word	0x0800a308
 80081c4:	0800a308 	.word	0x0800a308
 80081c8:	0800a30c 	.word	0x0800a30c

080081cc <__retarget_lock_init_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_acquire_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <__retarget_lock_release_recursive>:
 80081d0:	4770      	bx	lr

080081d2 <memcpy>:
 80081d2:	440a      	add	r2, r1
 80081d4:	4291      	cmp	r1, r2
 80081d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80081da:	d100      	bne.n	80081de <memcpy+0xc>
 80081dc:	4770      	bx	lr
 80081de:	b510      	push	{r4, lr}
 80081e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081e8:	4291      	cmp	r1, r2
 80081ea:	d1f9      	bne.n	80081e0 <memcpy+0xe>
 80081ec:	bd10      	pop	{r4, pc}

080081ee <quorem>:
 80081ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f2:	6903      	ldr	r3, [r0, #16]
 80081f4:	690c      	ldr	r4, [r1, #16]
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	4607      	mov	r7, r0
 80081fa:	db7e      	blt.n	80082fa <quorem+0x10c>
 80081fc:	3c01      	subs	r4, #1
 80081fe:	f101 0814 	add.w	r8, r1, #20
 8008202:	00a3      	lsls	r3, r4, #2
 8008204:	f100 0514 	add.w	r5, r0, #20
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008218:	3301      	adds	r3, #1
 800821a:	429a      	cmp	r2, r3
 800821c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008220:	fbb2 f6f3 	udiv	r6, r2, r3
 8008224:	d32e      	bcc.n	8008284 <quorem+0x96>
 8008226:	f04f 0a00 	mov.w	sl, #0
 800822a:	46c4      	mov	ip, r8
 800822c:	46ae      	mov	lr, r5
 800822e:	46d3      	mov	fp, sl
 8008230:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008234:	b298      	uxth	r0, r3
 8008236:	fb06 a000 	mla	r0, r6, r0, sl
 800823a:	0c02      	lsrs	r2, r0, #16
 800823c:	0c1b      	lsrs	r3, r3, #16
 800823e:	fb06 2303 	mla	r3, r6, r3, r2
 8008242:	f8de 2000 	ldr.w	r2, [lr]
 8008246:	b280      	uxth	r0, r0
 8008248:	b292      	uxth	r2, r2
 800824a:	1a12      	subs	r2, r2, r0
 800824c:	445a      	add	r2, fp
 800824e:	f8de 0000 	ldr.w	r0, [lr]
 8008252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008256:	b29b      	uxth	r3, r3
 8008258:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800825c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008260:	b292      	uxth	r2, r2
 8008262:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008266:	45e1      	cmp	r9, ip
 8008268:	f84e 2b04 	str.w	r2, [lr], #4
 800826c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008270:	d2de      	bcs.n	8008230 <quorem+0x42>
 8008272:	9b00      	ldr	r3, [sp, #0]
 8008274:	58eb      	ldr	r3, [r5, r3]
 8008276:	b92b      	cbnz	r3, 8008284 <quorem+0x96>
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	3b04      	subs	r3, #4
 800827c:	429d      	cmp	r5, r3
 800827e:	461a      	mov	r2, r3
 8008280:	d32f      	bcc.n	80082e2 <quorem+0xf4>
 8008282:	613c      	str	r4, [r7, #16]
 8008284:	4638      	mov	r0, r7
 8008286:	f001 f979 	bl	800957c <__mcmp>
 800828a:	2800      	cmp	r0, #0
 800828c:	db25      	blt.n	80082da <quorem+0xec>
 800828e:	4629      	mov	r1, r5
 8008290:	2000      	movs	r0, #0
 8008292:	f858 2b04 	ldr.w	r2, [r8], #4
 8008296:	f8d1 c000 	ldr.w	ip, [r1]
 800829a:	fa1f fe82 	uxth.w	lr, r2
 800829e:	fa1f f38c 	uxth.w	r3, ip
 80082a2:	eba3 030e 	sub.w	r3, r3, lr
 80082a6:	4403      	add	r3, r0
 80082a8:	0c12      	lsrs	r2, r2, #16
 80082aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80082ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082b8:	45c1      	cmp	r9, r8
 80082ba:	f841 3b04 	str.w	r3, [r1], #4
 80082be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80082c2:	d2e6      	bcs.n	8008292 <quorem+0xa4>
 80082c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082cc:	b922      	cbnz	r2, 80082d8 <quorem+0xea>
 80082ce:	3b04      	subs	r3, #4
 80082d0:	429d      	cmp	r5, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	d30b      	bcc.n	80082ee <quorem+0x100>
 80082d6:	613c      	str	r4, [r7, #16]
 80082d8:	3601      	adds	r6, #1
 80082da:	4630      	mov	r0, r6
 80082dc:	b003      	add	sp, #12
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	3b04      	subs	r3, #4
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d1cb      	bne.n	8008282 <quorem+0x94>
 80082ea:	3c01      	subs	r4, #1
 80082ec:	e7c6      	b.n	800827c <quorem+0x8e>
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d1ef      	bne.n	80082d6 <quorem+0xe8>
 80082f6:	3c01      	subs	r4, #1
 80082f8:	e7ea      	b.n	80082d0 <quorem+0xe2>
 80082fa:	2000      	movs	r0, #0
 80082fc:	e7ee      	b.n	80082dc <quorem+0xee>
	...

08008300 <_dtoa_r>:
 8008300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008304:	69c7      	ldr	r7, [r0, #28]
 8008306:	b099      	sub	sp, #100	@ 0x64
 8008308:	ed8d 0b02 	vstr	d0, [sp, #8]
 800830c:	ec55 4b10 	vmov	r4, r5, d0
 8008310:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008312:	9109      	str	r1, [sp, #36]	@ 0x24
 8008314:	4683      	mov	fp, r0
 8008316:	920e      	str	r2, [sp, #56]	@ 0x38
 8008318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800831a:	b97f      	cbnz	r7, 800833c <_dtoa_r+0x3c>
 800831c:	2010      	movs	r0, #16
 800831e:	f000 fdfd 	bl	8008f1c <malloc>
 8008322:	4602      	mov	r2, r0
 8008324:	f8cb 001c 	str.w	r0, [fp, #28]
 8008328:	b920      	cbnz	r0, 8008334 <_dtoa_r+0x34>
 800832a:	4ba7      	ldr	r3, [pc, #668]	@ (80085c8 <_dtoa_r+0x2c8>)
 800832c:	21ef      	movs	r1, #239	@ 0xef
 800832e:	48a7      	ldr	r0, [pc, #668]	@ (80085cc <_dtoa_r+0x2cc>)
 8008330:	f001 fb6c 	bl	8009a0c <__assert_func>
 8008334:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008338:	6007      	str	r7, [r0, #0]
 800833a:	60c7      	str	r7, [r0, #12]
 800833c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008340:	6819      	ldr	r1, [r3, #0]
 8008342:	b159      	cbz	r1, 800835c <_dtoa_r+0x5c>
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	604a      	str	r2, [r1, #4]
 8008348:	2301      	movs	r3, #1
 800834a:	4093      	lsls	r3, r2
 800834c:	608b      	str	r3, [r1, #8]
 800834e:	4658      	mov	r0, fp
 8008350:	f000 feda 	bl	8009108 <_Bfree>
 8008354:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	1e2b      	subs	r3, r5, #0
 800835e:	bfb9      	ittee	lt
 8008360:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008364:	9303      	strlt	r3, [sp, #12]
 8008366:	2300      	movge	r3, #0
 8008368:	6033      	strge	r3, [r6, #0]
 800836a:	9f03      	ldr	r7, [sp, #12]
 800836c:	4b98      	ldr	r3, [pc, #608]	@ (80085d0 <_dtoa_r+0x2d0>)
 800836e:	bfbc      	itt	lt
 8008370:	2201      	movlt	r2, #1
 8008372:	6032      	strlt	r2, [r6, #0]
 8008374:	43bb      	bics	r3, r7
 8008376:	d112      	bne.n	800839e <_dtoa_r+0x9e>
 8008378:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800837a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008384:	4323      	orrs	r3, r4
 8008386:	f000 854d 	beq.w	8008e24 <_dtoa_r+0xb24>
 800838a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800838c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80085e4 <_dtoa_r+0x2e4>
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 854f 	beq.w	8008e34 <_dtoa_r+0xb34>
 8008396:	f10a 0303 	add.w	r3, sl, #3
 800839a:	f000 bd49 	b.w	8008e30 <_dtoa_r+0xb30>
 800839e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	ec51 0b17 	vmov	r0, r1, d7
 80083a8:	2300      	movs	r3, #0
 80083aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80083ae:	f7f8 fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80083b2:	4680      	mov	r8, r0
 80083b4:	b158      	cbz	r0, 80083ce <_dtoa_r+0xce>
 80083b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80083b8:	2301      	movs	r3, #1
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083be:	b113      	cbz	r3, 80083c6 <_dtoa_r+0xc6>
 80083c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083c2:	4b84      	ldr	r3, [pc, #528]	@ (80085d4 <_dtoa_r+0x2d4>)
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80085e8 <_dtoa_r+0x2e8>
 80083ca:	f000 bd33 	b.w	8008e34 <_dtoa_r+0xb34>
 80083ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80083d2:	aa16      	add	r2, sp, #88	@ 0x58
 80083d4:	a917      	add	r1, sp, #92	@ 0x5c
 80083d6:	4658      	mov	r0, fp
 80083d8:	f001 f980 	bl	80096dc <__d2b>
 80083dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80083e0:	4681      	mov	r9, r0
 80083e2:	2e00      	cmp	r6, #0
 80083e4:	d077      	beq.n	80084d6 <_dtoa_r+0x1d6>
 80083e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80083ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008400:	4619      	mov	r1, r3
 8008402:	2200      	movs	r2, #0
 8008404:	4b74      	ldr	r3, [pc, #464]	@ (80085d8 <_dtoa_r+0x2d8>)
 8008406:	f7f7 ff4f 	bl	80002a8 <__aeabi_dsub>
 800840a:	a369      	add	r3, pc, #420	@ (adr r3, 80085b0 <_dtoa_r+0x2b0>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f8 f902 	bl	8000618 <__aeabi_dmul>
 8008414:	a368      	add	r3, pc, #416	@ (adr r3, 80085b8 <_dtoa_r+0x2b8>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff47 	bl	80002ac <__adddf3>
 800841e:	4604      	mov	r4, r0
 8008420:	4630      	mov	r0, r6
 8008422:	460d      	mov	r5, r1
 8008424:	f7f8 f88e 	bl	8000544 <__aeabi_i2d>
 8008428:	a365      	add	r3, pc, #404	@ (adr r3, 80085c0 <_dtoa_r+0x2c0>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f8f3 	bl	8000618 <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f7 ff37 	bl	80002ac <__adddf3>
 800843e:	4604      	mov	r4, r0
 8008440:	460d      	mov	r5, r1
 8008442:	f7f8 fb99 	bl	8000b78 <__aeabi_d2iz>
 8008446:	2200      	movs	r2, #0
 8008448:	4607      	mov	r7, r0
 800844a:	2300      	movs	r3, #0
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	f7f8 fb54 	bl	8000afc <__aeabi_dcmplt>
 8008454:	b140      	cbz	r0, 8008468 <_dtoa_r+0x168>
 8008456:	4638      	mov	r0, r7
 8008458:	f7f8 f874 	bl	8000544 <__aeabi_i2d>
 800845c:	4622      	mov	r2, r4
 800845e:	462b      	mov	r3, r5
 8008460:	f7f8 fb42 	bl	8000ae8 <__aeabi_dcmpeq>
 8008464:	b900      	cbnz	r0, 8008468 <_dtoa_r+0x168>
 8008466:	3f01      	subs	r7, #1
 8008468:	2f16      	cmp	r7, #22
 800846a:	d851      	bhi.n	8008510 <_dtoa_r+0x210>
 800846c:	4b5b      	ldr	r3, [pc, #364]	@ (80085dc <_dtoa_r+0x2dc>)
 800846e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847a:	f7f8 fb3f 	bl	8000afc <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	d048      	beq.n	8008514 <_dtoa_r+0x214>
 8008482:	3f01      	subs	r7, #1
 8008484:	2300      	movs	r3, #0
 8008486:	9312      	str	r3, [sp, #72]	@ 0x48
 8008488:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800848a:	1b9b      	subs	r3, r3, r6
 800848c:	1e5a      	subs	r2, r3, #1
 800848e:	bf44      	itt	mi
 8008490:	f1c3 0801 	rsbmi	r8, r3, #1
 8008494:	2300      	movmi	r3, #0
 8008496:	9208      	str	r2, [sp, #32]
 8008498:	bf54      	ite	pl
 800849a:	f04f 0800 	movpl.w	r8, #0
 800849e:	9308      	strmi	r3, [sp, #32]
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	db39      	blt.n	8008518 <_dtoa_r+0x218>
 80084a4:	9b08      	ldr	r3, [sp, #32]
 80084a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80084a8:	443b      	add	r3, r7
 80084aa:	9308      	str	r3, [sp, #32]
 80084ac:	2300      	movs	r3, #0
 80084ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80084b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b2:	2b09      	cmp	r3, #9
 80084b4:	d864      	bhi.n	8008580 <_dtoa_r+0x280>
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	bfc4      	itt	gt
 80084ba:	3b04      	subgt	r3, #4
 80084bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80084be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c0:	f1a3 0302 	sub.w	r3, r3, #2
 80084c4:	bfcc      	ite	gt
 80084c6:	2400      	movgt	r4, #0
 80084c8:	2401      	movle	r4, #1
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d863      	bhi.n	8008596 <_dtoa_r+0x296>
 80084ce:	e8df f003 	tbb	[pc, r3]
 80084d2:	372a      	.short	0x372a
 80084d4:	5535      	.short	0x5535
 80084d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80084da:	441e      	add	r6, r3
 80084dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	bfc1      	itttt	gt
 80084e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80084e8:	409f      	lslgt	r7, r3
 80084ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084f2:	bfd6      	itet	le
 80084f4:	f1c3 0320 	rsble	r3, r3, #32
 80084f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80084fc:	fa04 f003 	lslle.w	r0, r4, r3
 8008500:	f7f8 f810 	bl	8000524 <__aeabi_ui2d>
 8008504:	2201      	movs	r2, #1
 8008506:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800850a:	3e01      	subs	r6, #1
 800850c:	9214      	str	r2, [sp, #80]	@ 0x50
 800850e:	e777      	b.n	8008400 <_dtoa_r+0x100>
 8008510:	2301      	movs	r3, #1
 8008512:	e7b8      	b.n	8008486 <_dtoa_r+0x186>
 8008514:	9012      	str	r0, [sp, #72]	@ 0x48
 8008516:	e7b7      	b.n	8008488 <_dtoa_r+0x188>
 8008518:	427b      	negs	r3, r7
 800851a:	930a      	str	r3, [sp, #40]	@ 0x28
 800851c:	2300      	movs	r3, #0
 800851e:	eba8 0807 	sub.w	r8, r8, r7
 8008522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008524:	e7c4      	b.n	80084b0 <_dtoa_r+0x1b0>
 8008526:	2300      	movs	r3, #0
 8008528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800852a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800852c:	2b00      	cmp	r3, #0
 800852e:	dc35      	bgt.n	800859c <_dtoa_r+0x29c>
 8008530:	2301      	movs	r3, #1
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	461a      	mov	r2, r3
 8008538:	920e      	str	r2, [sp, #56]	@ 0x38
 800853a:	e00b      	b.n	8008554 <_dtoa_r+0x254>
 800853c:	2301      	movs	r3, #1
 800853e:	e7f3      	b.n	8008528 <_dtoa_r+0x228>
 8008540:	2300      	movs	r3, #0
 8008542:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008544:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008546:	18fb      	adds	r3, r7, r3
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	3301      	adds	r3, #1
 800854c:	2b01      	cmp	r3, #1
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	bfb8      	it	lt
 8008552:	2301      	movlt	r3, #1
 8008554:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008558:	2100      	movs	r1, #0
 800855a:	2204      	movs	r2, #4
 800855c:	f102 0514 	add.w	r5, r2, #20
 8008560:	429d      	cmp	r5, r3
 8008562:	d91f      	bls.n	80085a4 <_dtoa_r+0x2a4>
 8008564:	6041      	str	r1, [r0, #4]
 8008566:	4658      	mov	r0, fp
 8008568:	f000 fd8e 	bl	8009088 <_Balloc>
 800856c:	4682      	mov	sl, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	d13c      	bne.n	80085ec <_dtoa_r+0x2ec>
 8008572:	4b1b      	ldr	r3, [pc, #108]	@ (80085e0 <_dtoa_r+0x2e0>)
 8008574:	4602      	mov	r2, r0
 8008576:	f240 11af 	movw	r1, #431	@ 0x1af
 800857a:	e6d8      	b.n	800832e <_dtoa_r+0x2e>
 800857c:	2301      	movs	r3, #1
 800857e:	e7e0      	b.n	8008542 <_dtoa_r+0x242>
 8008580:	2401      	movs	r4, #1
 8008582:	2300      	movs	r3, #0
 8008584:	9309      	str	r3, [sp, #36]	@ 0x24
 8008586:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	9307      	str	r3, [sp, #28]
 8008590:	2200      	movs	r2, #0
 8008592:	2312      	movs	r3, #18
 8008594:	e7d0      	b.n	8008538 <_dtoa_r+0x238>
 8008596:	2301      	movs	r3, #1
 8008598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800859a:	e7f5      	b.n	8008588 <_dtoa_r+0x288>
 800859c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	e7d7      	b.n	8008554 <_dtoa_r+0x254>
 80085a4:	3101      	adds	r1, #1
 80085a6:	0052      	lsls	r2, r2, #1
 80085a8:	e7d8      	b.n	800855c <_dtoa_r+0x25c>
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w
 80085b0:	636f4361 	.word	0x636f4361
 80085b4:	3fd287a7 	.word	0x3fd287a7
 80085b8:	8b60c8b3 	.word	0x8b60c8b3
 80085bc:	3fc68a28 	.word	0x3fc68a28
 80085c0:	509f79fb 	.word	0x509f79fb
 80085c4:	3fd34413 	.word	0x3fd34413
 80085c8:	08009fd1 	.word	0x08009fd1
 80085cc:	08009fe8 	.word	0x08009fe8
 80085d0:	7ff00000 	.word	0x7ff00000
 80085d4:	08009fa1 	.word	0x08009fa1
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	0800a0e0 	.word	0x0800a0e0
 80085e0:	0800a040 	.word	0x0800a040
 80085e4:	08009fcd 	.word	0x08009fcd
 80085e8:	08009fa0 	.word	0x08009fa0
 80085ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085f0:	6018      	str	r0, [r3, #0]
 80085f2:	9b07      	ldr	r3, [sp, #28]
 80085f4:	2b0e      	cmp	r3, #14
 80085f6:	f200 80a4 	bhi.w	8008742 <_dtoa_r+0x442>
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	f000 80a1 	beq.w	8008742 <_dtoa_r+0x442>
 8008600:	2f00      	cmp	r7, #0
 8008602:	dd33      	ble.n	800866c <_dtoa_r+0x36c>
 8008604:	4bad      	ldr	r3, [pc, #692]	@ (80088bc <_dtoa_r+0x5bc>)
 8008606:	f007 020f 	and.w	r2, r7, #15
 800860a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800860e:	ed93 7b00 	vldr	d7, [r3]
 8008612:	05f8      	lsls	r0, r7, #23
 8008614:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800861c:	d516      	bpl.n	800864c <_dtoa_r+0x34c>
 800861e:	4ba8      	ldr	r3, [pc, #672]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008620:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008628:	f7f8 f920 	bl	800086c <__aeabi_ddiv>
 800862c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008630:	f004 040f 	and.w	r4, r4, #15
 8008634:	2603      	movs	r6, #3
 8008636:	4da2      	ldr	r5, [pc, #648]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008638:	b954      	cbnz	r4, 8008650 <_dtoa_r+0x350>
 800863a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008642:	f7f8 f913 	bl	800086c <__aeabi_ddiv>
 8008646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800864a:	e028      	b.n	800869e <_dtoa_r+0x39e>
 800864c:	2602      	movs	r6, #2
 800864e:	e7f2      	b.n	8008636 <_dtoa_r+0x336>
 8008650:	07e1      	lsls	r1, r4, #31
 8008652:	d508      	bpl.n	8008666 <_dtoa_r+0x366>
 8008654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800865c:	f7f7 ffdc 	bl	8000618 <__aeabi_dmul>
 8008660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008664:	3601      	adds	r6, #1
 8008666:	1064      	asrs	r4, r4, #1
 8008668:	3508      	adds	r5, #8
 800866a:	e7e5      	b.n	8008638 <_dtoa_r+0x338>
 800866c:	f000 80d2 	beq.w	8008814 <_dtoa_r+0x514>
 8008670:	427c      	negs	r4, r7
 8008672:	4b92      	ldr	r3, [pc, #584]	@ (80088bc <_dtoa_r+0x5bc>)
 8008674:	4d92      	ldr	r5, [pc, #584]	@ (80088c0 <_dtoa_r+0x5c0>)
 8008676:	f004 020f 	and.w	r2, r4, #15
 800867a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008686:	f7f7 ffc7 	bl	8000618 <__aeabi_dmul>
 800868a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800868e:	1124      	asrs	r4, r4, #4
 8008690:	2300      	movs	r3, #0
 8008692:	2602      	movs	r6, #2
 8008694:	2c00      	cmp	r4, #0
 8008696:	f040 80b2 	bne.w	80087fe <_dtoa_r+0x4fe>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1d3      	bne.n	8008646 <_dtoa_r+0x346>
 800869e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80086a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80b7 	beq.w	8008818 <_dtoa_r+0x518>
 80086aa:	4b86      	ldr	r3, [pc, #536]	@ (80088c4 <_dtoa_r+0x5c4>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa23 	bl	8000afc <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f000 80ae 	beq.w	8008818 <_dtoa_r+0x518>
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 80aa 	beq.w	8008818 <_dtoa_r+0x518>
 80086c4:	9b00      	ldr	r3, [sp, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	dd37      	ble.n	800873a <_dtoa_r+0x43a>
 80086ca:	1e7b      	subs	r3, r7, #1
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	4620      	mov	r0, r4
 80086d0:	4b7d      	ldr	r3, [pc, #500]	@ (80088c8 <_dtoa_r+0x5c8>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 ff9f 	bl	8000618 <__aeabi_dmul>
 80086da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086de:	9c00      	ldr	r4, [sp, #0]
 80086e0:	3601      	adds	r6, #1
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7f7 ff2e 	bl	8000544 <__aeabi_i2d>
 80086e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ec:	f7f7 ff94 	bl	8000618 <__aeabi_dmul>
 80086f0:	4b76      	ldr	r3, [pc, #472]	@ (80088cc <_dtoa_r+0x5cc>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	f7f7 fdda 	bl	80002ac <__adddf3>
 80086f8:	4605      	mov	r5, r0
 80086fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086fe:	2c00      	cmp	r4, #0
 8008700:	f040 808d 	bne.w	800881e <_dtoa_r+0x51e>
 8008704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008708:	4b71      	ldr	r3, [pc, #452]	@ (80088d0 <_dtoa_r+0x5d0>)
 800870a:	2200      	movs	r2, #0
 800870c:	f7f7 fdcc 	bl	80002a8 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008718:	462a      	mov	r2, r5
 800871a:	4633      	mov	r3, r6
 800871c:	f7f8 fa0c 	bl	8000b38 <__aeabi_dcmpgt>
 8008720:	2800      	cmp	r0, #0
 8008722:	f040 828b 	bne.w	8008c3c <_dtoa_r+0x93c>
 8008726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800872a:	462a      	mov	r2, r5
 800872c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008730:	f7f8 f9e4 	bl	8000afc <__aeabi_dcmplt>
 8008734:	2800      	cmp	r0, #0
 8008736:	f040 8128 	bne.w	800898a <_dtoa_r+0x68a>
 800873a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800873e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008742:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008744:	2b00      	cmp	r3, #0
 8008746:	f2c0 815a 	blt.w	80089fe <_dtoa_r+0x6fe>
 800874a:	2f0e      	cmp	r7, #14
 800874c:	f300 8157 	bgt.w	80089fe <_dtoa_r+0x6fe>
 8008750:	4b5a      	ldr	r3, [pc, #360]	@ (80088bc <_dtoa_r+0x5bc>)
 8008752:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008756:	ed93 7b00 	vldr	d7, [r3]
 800875a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	ed8d 7b00 	vstr	d7, [sp]
 8008762:	da03      	bge.n	800876c <_dtoa_r+0x46c>
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f340 8101 	ble.w	800896e <_dtoa_r+0x66e>
 800876c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008770:	4656      	mov	r6, sl
 8008772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f8 f877 	bl	800086c <__aeabi_ddiv>
 800877e:	f7f8 f9fb 	bl	8000b78 <__aeabi_d2iz>
 8008782:	4680      	mov	r8, r0
 8008784:	f7f7 fede 	bl	8000544 <__aeabi_i2d>
 8008788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878c:	f7f7 ff44 	bl	8000618 <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800879c:	f7f7 fd84 	bl	80002a8 <__aeabi_dsub>
 80087a0:	f806 4b01 	strb.w	r4, [r6], #1
 80087a4:	9d07      	ldr	r5, [sp, #28]
 80087a6:	eba6 040a 	sub.w	r4, r6, sl
 80087aa:	42a5      	cmp	r5, r4
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	f040 8117 	bne.w	80089e2 <_dtoa_r+0x6e2>
 80087b4:	f7f7 fd7a 	bl	80002ac <__adddf3>
 80087b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	f7f8 f9ba 	bl	8000b38 <__aeabi_dcmpgt>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	f040 80f9 	bne.w	80089bc <_dtoa_r+0x6bc>
 80087ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7f8 f989 	bl	8000ae8 <__aeabi_dcmpeq>
 80087d6:	b118      	cbz	r0, 80087e0 <_dtoa_r+0x4e0>
 80087d8:	f018 0f01 	tst.w	r8, #1
 80087dc:	f040 80ee 	bne.w	80089bc <_dtoa_r+0x6bc>
 80087e0:	4649      	mov	r1, r9
 80087e2:	4658      	mov	r0, fp
 80087e4:	f000 fc90 	bl	8009108 <_Bfree>
 80087e8:	2300      	movs	r3, #0
 80087ea:	7033      	strb	r3, [r6, #0]
 80087ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087ee:	3701      	adds	r7, #1
 80087f0:	601f      	str	r7, [r3, #0]
 80087f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 831d 	beq.w	8008e34 <_dtoa_r+0xb34>
 80087fa:	601e      	str	r6, [r3, #0]
 80087fc:	e31a      	b.n	8008e34 <_dtoa_r+0xb34>
 80087fe:	07e2      	lsls	r2, r4, #31
 8008800:	d505      	bpl.n	800880e <_dtoa_r+0x50e>
 8008802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008806:	f7f7 ff07 	bl	8000618 <__aeabi_dmul>
 800880a:	3601      	adds	r6, #1
 800880c:	2301      	movs	r3, #1
 800880e:	1064      	asrs	r4, r4, #1
 8008810:	3508      	adds	r5, #8
 8008812:	e73f      	b.n	8008694 <_dtoa_r+0x394>
 8008814:	2602      	movs	r6, #2
 8008816:	e742      	b.n	800869e <_dtoa_r+0x39e>
 8008818:	9c07      	ldr	r4, [sp, #28]
 800881a:	9704      	str	r7, [sp, #16]
 800881c:	e761      	b.n	80086e2 <_dtoa_r+0x3e2>
 800881e:	4b27      	ldr	r3, [pc, #156]	@ (80088bc <_dtoa_r+0x5bc>)
 8008820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008822:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008826:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800882a:	4454      	add	r4, sl
 800882c:	2900      	cmp	r1, #0
 800882e:	d053      	beq.n	80088d8 <_dtoa_r+0x5d8>
 8008830:	4928      	ldr	r1, [pc, #160]	@ (80088d4 <_dtoa_r+0x5d4>)
 8008832:	2000      	movs	r0, #0
 8008834:	f7f8 f81a 	bl	800086c <__aeabi_ddiv>
 8008838:	4633      	mov	r3, r6
 800883a:	462a      	mov	r2, r5
 800883c:	f7f7 fd34 	bl	80002a8 <__aeabi_dsub>
 8008840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008844:	4656      	mov	r6, sl
 8008846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884a:	f7f8 f995 	bl	8000b78 <__aeabi_d2iz>
 800884e:	4605      	mov	r5, r0
 8008850:	f7f7 fe78 	bl	8000544 <__aeabi_i2d>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800885c:	f7f7 fd24 	bl	80002a8 <__aeabi_dsub>
 8008860:	3530      	adds	r5, #48	@ 0x30
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800886a:	f806 5b01 	strb.w	r5, [r6], #1
 800886e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008872:	f7f8 f943 	bl	8000afc <__aeabi_dcmplt>
 8008876:	2800      	cmp	r0, #0
 8008878:	d171      	bne.n	800895e <_dtoa_r+0x65e>
 800887a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800887e:	4911      	ldr	r1, [pc, #68]	@ (80088c4 <_dtoa_r+0x5c4>)
 8008880:	2000      	movs	r0, #0
 8008882:	f7f7 fd11 	bl	80002a8 <__aeabi_dsub>
 8008886:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800888a:	f7f8 f937 	bl	8000afc <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	f040 8095 	bne.w	80089be <_dtoa_r+0x6be>
 8008894:	42a6      	cmp	r6, r4
 8008896:	f43f af50 	beq.w	800873a <_dtoa_r+0x43a>
 800889a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <_dtoa_r+0x5c8>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	f7f7 feb9 	bl	8000618 <__aeabi_dmul>
 80088a6:	4b08      	ldr	r3, [pc, #32]	@ (80088c8 <_dtoa_r+0x5c8>)
 80088a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088ac:	2200      	movs	r2, #0
 80088ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b2:	f7f7 feb1 	bl	8000618 <__aeabi_dmul>
 80088b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ba:	e7c4      	b.n	8008846 <_dtoa_r+0x546>
 80088bc:	0800a0e0 	.word	0x0800a0e0
 80088c0:	0800a0b8 	.word	0x0800a0b8
 80088c4:	3ff00000 	.word	0x3ff00000
 80088c8:	40240000 	.word	0x40240000
 80088cc:	401c0000 	.word	0x401c0000
 80088d0:	40140000 	.word	0x40140000
 80088d4:	3fe00000 	.word	0x3fe00000
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	f7f7 fe9c 	bl	8000618 <__aeabi_dmul>
 80088e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80088e6:	4656      	mov	r6, sl
 80088e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ec:	f7f8 f944 	bl	8000b78 <__aeabi_d2iz>
 80088f0:	4605      	mov	r5, r0
 80088f2:	f7f7 fe27 	bl	8000544 <__aeabi_i2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088fe:	f7f7 fcd3 	bl	80002a8 <__aeabi_dsub>
 8008902:	3530      	adds	r5, #48	@ 0x30
 8008904:	f806 5b01 	strb.w	r5, [r6], #1
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	42a6      	cmp	r6, r4
 800890e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008912:	f04f 0200 	mov.w	r2, #0
 8008916:	d124      	bne.n	8008962 <_dtoa_r+0x662>
 8008918:	4bac      	ldr	r3, [pc, #688]	@ (8008bcc <_dtoa_r+0x8cc>)
 800891a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800891e:	f7f7 fcc5 	bl	80002ac <__adddf3>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	f7f8 f905 	bl	8000b38 <__aeabi_dcmpgt>
 800892e:	2800      	cmp	r0, #0
 8008930:	d145      	bne.n	80089be <_dtoa_r+0x6be>
 8008932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008936:	49a5      	ldr	r1, [pc, #660]	@ (8008bcc <_dtoa_r+0x8cc>)
 8008938:	2000      	movs	r0, #0
 800893a:	f7f7 fcb5 	bl	80002a8 <__aeabi_dsub>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008946:	f7f8 f8d9 	bl	8000afc <__aeabi_dcmplt>
 800894a:	2800      	cmp	r0, #0
 800894c:	f43f aef5 	beq.w	800873a <_dtoa_r+0x43a>
 8008950:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008952:	1e73      	subs	r3, r6, #1
 8008954:	9315      	str	r3, [sp, #84]	@ 0x54
 8008956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800895a:	2b30      	cmp	r3, #48	@ 0x30
 800895c:	d0f8      	beq.n	8008950 <_dtoa_r+0x650>
 800895e:	9f04      	ldr	r7, [sp, #16]
 8008960:	e73e      	b.n	80087e0 <_dtoa_r+0x4e0>
 8008962:	4b9b      	ldr	r3, [pc, #620]	@ (8008bd0 <_dtoa_r+0x8d0>)
 8008964:	f7f7 fe58 	bl	8000618 <__aeabi_dmul>
 8008968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896c:	e7bc      	b.n	80088e8 <_dtoa_r+0x5e8>
 800896e:	d10c      	bne.n	800898a <_dtoa_r+0x68a>
 8008970:	4b98      	ldr	r3, [pc, #608]	@ (8008bd4 <_dtoa_r+0x8d4>)
 8008972:	2200      	movs	r2, #0
 8008974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008978:	f7f7 fe4e 	bl	8000618 <__aeabi_dmul>
 800897c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008980:	f7f8 f8d0 	bl	8000b24 <__aeabi_dcmpge>
 8008984:	2800      	cmp	r0, #0
 8008986:	f000 8157 	beq.w	8008c38 <_dtoa_r+0x938>
 800898a:	2400      	movs	r4, #0
 800898c:	4625      	mov	r5, r4
 800898e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008990:	43db      	mvns	r3, r3
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	4656      	mov	r6, sl
 8008996:	2700      	movs	r7, #0
 8008998:	4621      	mov	r1, r4
 800899a:	4658      	mov	r0, fp
 800899c:	f000 fbb4 	bl	8009108 <_Bfree>
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	d0dc      	beq.n	800895e <_dtoa_r+0x65e>
 80089a4:	b12f      	cbz	r7, 80089b2 <_dtoa_r+0x6b2>
 80089a6:	42af      	cmp	r7, r5
 80089a8:	d003      	beq.n	80089b2 <_dtoa_r+0x6b2>
 80089aa:	4639      	mov	r1, r7
 80089ac:	4658      	mov	r0, fp
 80089ae:	f000 fbab 	bl	8009108 <_Bfree>
 80089b2:	4629      	mov	r1, r5
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fba7 	bl	8009108 <_Bfree>
 80089ba:	e7d0      	b.n	800895e <_dtoa_r+0x65e>
 80089bc:	9704      	str	r7, [sp, #16]
 80089be:	4633      	mov	r3, r6
 80089c0:	461e      	mov	r6, r3
 80089c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c6:	2a39      	cmp	r2, #57	@ 0x39
 80089c8:	d107      	bne.n	80089da <_dtoa_r+0x6da>
 80089ca:	459a      	cmp	sl, r3
 80089cc:	d1f8      	bne.n	80089c0 <_dtoa_r+0x6c0>
 80089ce:	9a04      	ldr	r2, [sp, #16]
 80089d0:	3201      	adds	r2, #1
 80089d2:	9204      	str	r2, [sp, #16]
 80089d4:	2230      	movs	r2, #48	@ 0x30
 80089d6:	f88a 2000 	strb.w	r2, [sl]
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	3201      	adds	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	e7bd      	b.n	800895e <_dtoa_r+0x65e>
 80089e2:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd0 <_dtoa_r+0x8d0>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	f7f7 fe17 	bl	8000618 <__aeabi_dmul>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	f7f8 f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f43f aebb 	beq.w	8008772 <_dtoa_r+0x472>
 80089fc:	e6f0      	b.n	80087e0 <_dtoa_r+0x4e0>
 80089fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	f000 80db 	beq.w	8008bbc <_dtoa_r+0x8bc>
 8008a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a08:	2a01      	cmp	r2, #1
 8008a0a:	f300 80bf 	bgt.w	8008b8c <_dtoa_r+0x88c>
 8008a0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	f000 80b7 	beq.w	8008b84 <_dtoa_r+0x884>
 8008a16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008a1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a1c:	4646      	mov	r6, r8
 8008a1e:	9a08      	ldr	r2, [sp, #32]
 8008a20:	2101      	movs	r1, #1
 8008a22:	441a      	add	r2, r3
 8008a24:	4658      	mov	r0, fp
 8008a26:	4498      	add	r8, r3
 8008a28:	9208      	str	r2, [sp, #32]
 8008a2a:	f000 fc21 	bl	8009270 <__i2b>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b15e      	cbz	r6, 8008a4a <_dtoa_r+0x74a>
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dd08      	ble.n	8008a4a <_dtoa_r+0x74a>
 8008a38:	42b3      	cmp	r3, r6
 8008a3a:	9a08      	ldr	r2, [sp, #32]
 8008a3c:	bfa8      	it	ge
 8008a3e:	4633      	movge	r3, r6
 8008a40:	eba8 0803 	sub.w	r8, r8, r3
 8008a44:	1af6      	subs	r6, r6, r3
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	9308      	str	r3, [sp, #32]
 8008a4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a4c:	b1f3      	cbz	r3, 8008a8c <_dtoa_r+0x78c>
 8008a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 80b7 	beq.w	8008bc4 <_dtoa_r+0x8c4>
 8008a56:	b18c      	cbz	r4, 8008a7c <_dtoa_r+0x77c>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	f000 fcc7 	bl	80093f0 <__pow5mult>
 8008a62:	464a      	mov	r2, r9
 8008a64:	4601      	mov	r1, r0
 8008a66:	4605      	mov	r5, r0
 8008a68:	4658      	mov	r0, fp
 8008a6a:	f000 fc17 	bl	800929c <__multiply>
 8008a6e:	4649      	mov	r1, r9
 8008a70:	9004      	str	r0, [sp, #16]
 8008a72:	4658      	mov	r0, fp
 8008a74:	f000 fb48 	bl	8009108 <_Bfree>
 8008a78:	9b04      	ldr	r3, [sp, #16]
 8008a7a:	4699      	mov	r9, r3
 8008a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7e:	1b1a      	subs	r2, r3, r4
 8008a80:	d004      	beq.n	8008a8c <_dtoa_r+0x78c>
 8008a82:	4649      	mov	r1, r9
 8008a84:	4658      	mov	r0, fp
 8008a86:	f000 fcb3 	bl	80093f0 <__pow5mult>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	4658      	mov	r0, fp
 8008a90:	f000 fbee 	bl	8009270 <__i2b>
 8008a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a96:	4604      	mov	r4, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 81cf 	beq.w	8008e3c <_dtoa_r+0xb3c>
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4658      	mov	r0, fp
 8008aa4:	f000 fca4 	bl	80093f0 <__pow5mult>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	4604      	mov	r4, r0
 8008aae:	f300 8095 	bgt.w	8008bdc <_dtoa_r+0x8dc>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8087 	bne.w	8008bc8 <_dtoa_r+0x8c8>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 8089 	bne.w	8008bd8 <_dtoa_r+0x8d8>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008acc:	0d1b      	lsrs	r3, r3, #20
 8008ace:	051b      	lsls	r3, r3, #20
 8008ad0:	b12b      	cbz	r3, 8008ade <_dtoa_r+0x7de>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	9308      	str	r3, [sp, #32]
 8008ad8:	f108 0801 	add.w	r8, r8, #1
 8008adc:	2301      	movs	r3, #1
 8008ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 81b0 	beq.w	8008e48 <_dtoa_r+0xb48>
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008aee:	6918      	ldr	r0, [r3, #16]
 8008af0:	f000 fb72 	bl	80091d8 <__hi0bits>
 8008af4:	f1c0 0020 	rsb	r0, r0, #32
 8008af8:	9b08      	ldr	r3, [sp, #32]
 8008afa:	4418      	add	r0, r3
 8008afc:	f010 001f 	ands.w	r0, r0, #31
 8008b00:	d077      	beq.n	8008bf2 <_dtoa_r+0x8f2>
 8008b02:	f1c0 0320 	rsb	r3, r0, #32
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	dd6b      	ble.n	8008be2 <_dtoa_r+0x8e2>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	f1c0 001c 	rsb	r0, r0, #28
 8008b10:	4403      	add	r3, r0
 8008b12:	4480      	add	r8, r0
 8008b14:	4406      	add	r6, r0
 8008b16:	9308      	str	r3, [sp, #32]
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	dd05      	ble.n	8008b2a <_dtoa_r+0x82a>
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4642      	mov	r2, r8
 8008b22:	4658      	mov	r0, fp
 8008b24:	f000 fcbe 	bl	80094a4 <__lshift>
 8008b28:	4681      	mov	r9, r0
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dd05      	ble.n	8008b3c <_dtoa_r+0x83c>
 8008b30:	4621      	mov	r1, r4
 8008b32:	461a      	mov	r2, r3
 8008b34:	4658      	mov	r0, fp
 8008b36:	f000 fcb5 	bl	80094a4 <__lshift>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d059      	beq.n	8008bf6 <_dtoa_r+0x8f6>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4648      	mov	r0, r9
 8008b46:	f000 fd19 	bl	800957c <__mcmp>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	da53      	bge.n	8008bf6 <_dtoa_r+0x8f6>
 8008b4e:	1e7b      	subs	r3, r7, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	4649      	mov	r1, r9
 8008b54:	2300      	movs	r3, #0
 8008b56:	220a      	movs	r2, #10
 8008b58:	4658      	mov	r0, fp
 8008b5a:	f000 faf7 	bl	800914c <__multadd>
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b60:	4681      	mov	r9, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 8172 	beq.w	8008e4c <_dtoa_r+0xb4c>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	220a      	movs	r2, #10
 8008b6e:	4658      	mov	r0, fp
 8008b70:	f000 faec 	bl	800914c <__multadd>
 8008b74:	9b00      	ldr	r3, [sp, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	4605      	mov	r5, r0
 8008b7a:	dc67      	bgt.n	8008c4c <_dtoa_r+0x94c>
 8008b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	dc41      	bgt.n	8008c06 <_dtoa_r+0x906>
 8008b82:	e063      	b.n	8008c4c <_dtoa_r+0x94c>
 8008b84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b8a:	e746      	b.n	8008a1a <_dtoa_r+0x71a>
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	1e5c      	subs	r4, r3, #1
 8008b90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	bfbf      	itttt	lt
 8008b96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008b9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b9c:	1ae3      	sublt	r3, r4, r3
 8008b9e:	bfb4      	ite	lt
 8008ba0:	18d2      	addlt	r2, r2, r3
 8008ba2:	1b1c      	subge	r4, r3, r4
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	bfbc      	itt	lt
 8008ba8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008baa:	2400      	movlt	r4, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfb5      	itete	lt
 8008bb0:	eba8 0603 	sublt.w	r6, r8, r3
 8008bb4:	9b07      	ldrge	r3, [sp, #28]
 8008bb6:	2300      	movlt	r3, #0
 8008bb8:	4646      	movge	r6, r8
 8008bba:	e730      	b.n	8008a1e <_dtoa_r+0x71e>
 8008bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008bc0:	4646      	mov	r6, r8
 8008bc2:	e735      	b.n	8008a30 <_dtoa_r+0x730>
 8008bc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bc6:	e75c      	b.n	8008a82 <_dtoa_r+0x782>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e788      	b.n	8008ade <_dtoa_r+0x7de>
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	40240000 	.word	0x40240000
 8008bd4:	40140000 	.word	0x40140000
 8008bd8:	9b02      	ldr	r3, [sp, #8]
 8008bda:	e780      	b.n	8008ade <_dtoa_r+0x7de>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be0:	e782      	b.n	8008ae8 <_dtoa_r+0x7e8>
 8008be2:	d099      	beq.n	8008b18 <_dtoa_r+0x818>
 8008be4:	9a08      	ldr	r2, [sp, #32]
 8008be6:	331c      	adds	r3, #28
 8008be8:	441a      	add	r2, r3
 8008bea:	4498      	add	r8, r3
 8008bec:	441e      	add	r6, r3
 8008bee:	9208      	str	r2, [sp, #32]
 8008bf0:	e792      	b.n	8008b18 <_dtoa_r+0x818>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	e7f6      	b.n	8008be4 <_dtoa_r+0x8e4>
 8008bf6:	9b07      	ldr	r3, [sp, #28]
 8008bf8:	9704      	str	r7, [sp, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dc20      	bgt.n	8008c40 <_dtoa_r+0x940>
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	dd1e      	ble.n	8008c44 <_dtoa_r+0x944>
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f47f aec0 	bne.w	800898e <_dtoa_r+0x68e>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	2205      	movs	r2, #5
 8008c12:	4658      	mov	r0, fp
 8008c14:	f000 fa9a 	bl	800914c <__multadd>
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fcad 	bl	800957c <__mcmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f77f aeb3 	ble.w	800898e <_dtoa_r+0x68e>
 8008c28:	4656      	mov	r6, sl
 8008c2a:	2331      	movs	r3, #49	@ 0x31
 8008c2c:	f806 3b01 	strb.w	r3, [r6], #1
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	3301      	adds	r3, #1
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	e6ae      	b.n	8008996 <_dtoa_r+0x696>
 8008c38:	9c07      	ldr	r4, [sp, #28]
 8008c3a:	9704      	str	r7, [sp, #16]
 8008c3c:	4625      	mov	r5, r4
 8008c3e:	e7f3      	b.n	8008c28 <_dtoa_r+0x928>
 8008c40:	9b07      	ldr	r3, [sp, #28]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 8104 	beq.w	8008e54 <_dtoa_r+0xb54>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	dd05      	ble.n	8008c5c <_dtoa_r+0x95c>
 8008c50:	4629      	mov	r1, r5
 8008c52:	4632      	mov	r2, r6
 8008c54:	4658      	mov	r0, fp
 8008c56:	f000 fc25 	bl	80094a4 <__lshift>
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d05a      	beq.n	8008d18 <_dtoa_r+0xa18>
 8008c62:	6869      	ldr	r1, [r5, #4]
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 fa0f 	bl	8009088 <_Balloc>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	b928      	cbnz	r0, 8008c7a <_dtoa_r+0x97a>
 8008c6e:	4b84      	ldr	r3, [pc, #528]	@ (8008e80 <_dtoa_r+0xb80>)
 8008c70:	4602      	mov	r2, r0
 8008c72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c76:	f7ff bb5a 	b.w	800832e <_dtoa_r+0x2e>
 8008c7a:	692a      	ldr	r2, [r5, #16]
 8008c7c:	3202      	adds	r2, #2
 8008c7e:	0092      	lsls	r2, r2, #2
 8008c80:	f105 010c 	add.w	r1, r5, #12
 8008c84:	300c      	adds	r0, #12
 8008c86:	f7ff faa4 	bl	80081d2 <memcpy>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f000 fc08 	bl	80094a4 <__lshift>
 8008c94:	f10a 0301 	add.w	r3, sl, #1
 8008c98:	9307      	str	r3, [sp, #28]
 8008c9a:	9b00      	ldr	r3, [sp, #0]
 8008c9c:	4453      	add	r3, sl
 8008c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	462f      	mov	r7, r5
 8008ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008caa:	4605      	mov	r5, r0
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	4621      	mov	r1, r4
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	4648      	mov	r0, r9
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f7ff fa9a 	bl	80081ee <quorem>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	f000 fc5a 	bl	800957c <__mcmp>
 8008cc8:	462a      	mov	r2, r5
 8008cca:	9008      	str	r0, [sp, #32]
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4658      	mov	r0, fp
 8008cd0:	f000 fc70 	bl	80095b4 <__mdiff>
 8008cd4:	68c2      	ldr	r2, [r0, #12]
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	bb02      	cbnz	r2, 8008d1c <_dtoa_r+0xa1c>
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4648      	mov	r0, r9
 8008cde:	f000 fc4d 	bl	800957c <__mcmp>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cea:	f000 fa0d 	bl	8009108 <_Bfree>
 8008cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cf2:	9e07      	ldr	r6, [sp, #28]
 8008cf4:	ea43 0102 	orr.w	r1, r3, r2
 8008cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cfa:	4319      	orrs	r1, r3
 8008cfc:	d110      	bne.n	8008d20 <_dtoa_r+0xa20>
 8008cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d02:	d029      	beq.n	8008d58 <_dtoa_r+0xa58>
 8008d04:	9b08      	ldr	r3, [sp, #32]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dd02      	ble.n	8008d10 <_dtoa_r+0xa10>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	f883 8000 	strb.w	r8, [r3]
 8008d16:	e63f      	b.n	8008998 <_dtoa_r+0x698>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	e7bb      	b.n	8008c94 <_dtoa_r+0x994>
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	e7e1      	b.n	8008ce4 <_dtoa_r+0x9e4>
 8008d20:	9b08      	ldr	r3, [sp, #32]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	db04      	blt.n	8008d30 <_dtoa_r+0xa30>
 8008d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	d120      	bne.n	8008d72 <_dtoa_r+0xa72>
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	dded      	ble.n	8008d10 <_dtoa_r+0xa10>
 8008d34:	4649      	mov	r1, r9
 8008d36:	2201      	movs	r2, #1
 8008d38:	4658      	mov	r0, fp
 8008d3a:	f000 fbb3 	bl	80094a4 <__lshift>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4681      	mov	r9, r0
 8008d42:	f000 fc1b 	bl	800957c <__mcmp>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	dc03      	bgt.n	8008d52 <_dtoa_r+0xa52>
 8008d4a:	d1e1      	bne.n	8008d10 <_dtoa_r+0xa10>
 8008d4c:	f018 0f01 	tst.w	r8, #1
 8008d50:	d0de      	beq.n	8008d10 <_dtoa_r+0xa10>
 8008d52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d56:	d1d8      	bne.n	8008d0a <_dtoa_r+0xa0a>
 8008d58:	9a00      	ldr	r2, [sp, #0]
 8008d5a:	2339      	movs	r3, #57	@ 0x39
 8008d5c:	7013      	strb	r3, [r2, #0]
 8008d5e:	4633      	mov	r3, r6
 8008d60:	461e      	mov	r6, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d68:	2a39      	cmp	r2, #57	@ 0x39
 8008d6a:	d052      	beq.n	8008e12 <_dtoa_r+0xb12>
 8008d6c:	3201      	adds	r2, #1
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e612      	b.n	8008998 <_dtoa_r+0x698>
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	dd07      	ble.n	8008d86 <_dtoa_r+0xa86>
 8008d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d7a:	d0ed      	beq.n	8008d58 <_dtoa_r+0xa58>
 8008d7c:	9a00      	ldr	r2, [sp, #0]
 8008d7e:	f108 0301 	add.w	r3, r8, #1
 8008d82:	7013      	strb	r3, [r2, #0]
 8008d84:	e608      	b.n	8008998 <_dtoa_r+0x698>
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	9a07      	ldr	r2, [sp, #28]
 8008d8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d028      	beq.n	8008de6 <_dtoa_r+0xae6>
 8008d94:	4649      	mov	r1, r9
 8008d96:	2300      	movs	r3, #0
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 f9d6 	bl	800914c <__multadd>
 8008da0:	42af      	cmp	r7, r5
 8008da2:	4681      	mov	r9, r0
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	f04f 020a 	mov.w	r2, #10
 8008dac:	4639      	mov	r1, r7
 8008dae:	4658      	mov	r0, fp
 8008db0:	d107      	bne.n	8008dc2 <_dtoa_r+0xac2>
 8008db2:	f000 f9cb 	bl	800914c <__multadd>
 8008db6:	4607      	mov	r7, r0
 8008db8:	4605      	mov	r5, r0
 8008dba:	9b07      	ldr	r3, [sp, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	e774      	b.n	8008cac <_dtoa_r+0x9ac>
 8008dc2:	f000 f9c3 	bl	800914c <__multadd>
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	4607      	mov	r7, r0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	220a      	movs	r2, #10
 8008dce:	4658      	mov	r0, fp
 8008dd0:	f000 f9bc 	bl	800914c <__multadd>
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	e7f0      	b.n	8008dba <_dtoa_r+0xaba>
 8008dd8:	9b00      	ldr	r3, [sp, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfcc      	ite	gt
 8008dde:	461e      	movgt	r6, r3
 8008de0:	2601      	movle	r6, #1
 8008de2:	4456      	add	r6, sl
 8008de4:	2700      	movs	r7, #0
 8008de6:	4649      	mov	r1, r9
 8008de8:	2201      	movs	r2, #1
 8008dea:	4658      	mov	r0, fp
 8008dec:	f000 fb5a 	bl	80094a4 <__lshift>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4681      	mov	r9, r0
 8008df4:	f000 fbc2 	bl	800957c <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dcb0      	bgt.n	8008d5e <_dtoa_r+0xa5e>
 8008dfc:	d102      	bne.n	8008e04 <_dtoa_r+0xb04>
 8008dfe:	f018 0f01 	tst.w	r8, #1
 8008e02:	d1ac      	bne.n	8008d5e <_dtoa_r+0xa5e>
 8008e04:	4633      	mov	r3, r6
 8008e06:	461e      	mov	r6, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a30      	cmp	r2, #48	@ 0x30
 8008e0e:	d0fa      	beq.n	8008e06 <_dtoa_r+0xb06>
 8008e10:	e5c2      	b.n	8008998 <_dtoa_r+0x698>
 8008e12:	459a      	cmp	sl, r3
 8008e14:	d1a4      	bne.n	8008d60 <_dtoa_r+0xa60>
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	2331      	movs	r3, #49	@ 0x31
 8008e1e:	f88a 3000 	strb.w	r3, [sl]
 8008e22:	e5b9      	b.n	8008998 <_dtoa_r+0x698>
 8008e24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e84 <_dtoa_r+0xb84>
 8008e2a:	b11b      	cbz	r3, 8008e34 <_dtoa_r+0xb34>
 8008e2c:	f10a 0308 	add.w	r3, sl, #8
 8008e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	4650      	mov	r0, sl
 8008e36:	b019      	add	sp, #100	@ 0x64
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	f77f ae37 	ble.w	8008ab2 <_dtoa_r+0x7b2>
 8008e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e48:	2001      	movs	r0, #1
 8008e4a:	e655      	b.n	8008af8 <_dtoa_r+0x7f8>
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f77f aed6 	ble.w	8008c00 <_dtoa_r+0x900>
 8008e54:	4656      	mov	r6, sl
 8008e56:	4621      	mov	r1, r4
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f7ff f9c8 	bl	80081ee <quorem>
 8008e5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e62:	f806 8b01 	strb.w	r8, [r6], #1
 8008e66:	9b00      	ldr	r3, [sp, #0]
 8008e68:	eba6 020a 	sub.w	r2, r6, sl
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	ddb3      	ble.n	8008dd8 <_dtoa_r+0xad8>
 8008e70:	4649      	mov	r1, r9
 8008e72:	2300      	movs	r3, #0
 8008e74:	220a      	movs	r2, #10
 8008e76:	4658      	mov	r0, fp
 8008e78:	f000 f968 	bl	800914c <__multadd>
 8008e7c:	4681      	mov	r9, r0
 8008e7e:	e7ea      	b.n	8008e56 <_dtoa_r+0xb56>
 8008e80:	0800a040 	.word	0x0800a040
 8008e84:	08009fc4 	.word	0x08009fc4

08008e88 <_free_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d041      	beq.n	8008f14 <_free_r+0x8c>
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f0c      	subs	r4, r1, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfb8      	it	lt
 8008e9a:	18e4      	addlt	r4, r4, r3
 8008e9c:	f000 f8e8 	bl	8009070 <__malloc_lock>
 8008ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f18 <_free_r+0x90>)
 8008ea2:	6813      	ldr	r3, [r2, #0]
 8008ea4:	b933      	cbnz	r3, 8008eb4 <_free_r+0x2c>
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	6014      	str	r4, [r2, #0]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb0:	f000 b8e4 	b.w	800907c <__malloc_unlock>
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d908      	bls.n	8008eca <_free_r+0x42>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	1821      	adds	r1, r4, r0
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	bf01      	itttt	eq
 8008ec0:	6819      	ldreq	r1, [r3, #0]
 8008ec2:	685b      	ldreq	r3, [r3, #4]
 8008ec4:	1809      	addeq	r1, r1, r0
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	e7ed      	b.n	8008ea6 <_free_r+0x1e>
 8008eca:	461a      	mov	r2, r3
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	b10b      	cbz	r3, 8008ed4 <_free_r+0x4c>
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d9fa      	bls.n	8008eca <_free_r+0x42>
 8008ed4:	6811      	ldr	r1, [r2, #0]
 8008ed6:	1850      	adds	r0, r2, r1
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d10b      	bne.n	8008ef4 <_free_r+0x6c>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	4401      	add	r1, r0
 8008ee0:	1850      	adds	r0, r2, r1
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	d1e0      	bne.n	8008eaa <_free_r+0x22>
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	6053      	str	r3, [r2, #4]
 8008eee:	4408      	add	r0, r1
 8008ef0:	6010      	str	r0, [r2, #0]
 8008ef2:	e7da      	b.n	8008eaa <_free_r+0x22>
 8008ef4:	d902      	bls.n	8008efc <_free_r+0x74>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	602b      	str	r3, [r5, #0]
 8008efa:	e7d6      	b.n	8008eaa <_free_r+0x22>
 8008efc:	6820      	ldr	r0, [r4, #0]
 8008efe:	1821      	adds	r1, r4, r0
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf04      	itt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	6063      	str	r3, [r4, #4]
 8008f0a:	bf04      	itt	eq
 8008f0c:	1809      	addeq	r1, r1, r0
 8008f0e:	6021      	streq	r1, [r4, #0]
 8008f10:	6054      	str	r4, [r2, #4]
 8008f12:	e7ca      	b.n	8008eaa <_free_r+0x22>
 8008f14:	bd38      	pop	{r3, r4, r5, pc}
 8008f16:	bf00      	nop
 8008f18:	20000538 	.word	0x20000538

08008f1c <malloc>:
 8008f1c:	4b02      	ldr	r3, [pc, #8]	@ (8008f28 <malloc+0xc>)
 8008f1e:	4601      	mov	r1, r0
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	f000 b825 	b.w	8008f70 <_malloc_r>
 8008f26:	bf00      	nop
 8008f28:	20000018 	.word	0x20000018

08008f2c <sbrk_aligned>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4e0f      	ldr	r6, [pc, #60]	@ (8008f6c <sbrk_aligned+0x40>)
 8008f30:	460c      	mov	r4, r1
 8008f32:	6831      	ldr	r1, [r6, #0]
 8008f34:	4605      	mov	r5, r0
 8008f36:	b911      	cbnz	r1, 8008f3e <sbrk_aligned+0x12>
 8008f38:	f000 fd58 	bl	80099ec <_sbrk_r>
 8008f3c:	6030      	str	r0, [r6, #0]
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	f000 fd53 	bl	80099ec <_sbrk_r>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d103      	bne.n	8008f52 <sbrk_aligned+0x26>
 8008f4a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f4e:	4620      	mov	r0, r4
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	1cc4      	adds	r4, r0, #3
 8008f54:	f024 0403 	bic.w	r4, r4, #3
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d0f8      	beq.n	8008f4e <sbrk_aligned+0x22>
 8008f5c:	1a21      	subs	r1, r4, r0
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 fd44 	bl	80099ec <_sbrk_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d1f2      	bne.n	8008f4e <sbrk_aligned+0x22>
 8008f68:	e7ef      	b.n	8008f4a <sbrk_aligned+0x1e>
 8008f6a:	bf00      	nop
 8008f6c:	20000534 	.word	0x20000534

08008f70 <_malloc_r>:
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f74:	1ccd      	adds	r5, r1, #3
 8008f76:	f025 0503 	bic.w	r5, r5, #3
 8008f7a:	3508      	adds	r5, #8
 8008f7c:	2d0c      	cmp	r5, #12
 8008f7e:	bf38      	it	cc
 8008f80:	250c      	movcc	r5, #12
 8008f82:	2d00      	cmp	r5, #0
 8008f84:	4606      	mov	r6, r0
 8008f86:	db01      	blt.n	8008f8c <_malloc_r+0x1c>
 8008f88:	42a9      	cmp	r1, r5
 8008f8a:	d904      	bls.n	8008f96 <_malloc_r+0x26>
 8008f8c:	230c      	movs	r3, #12
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	2000      	movs	r0, #0
 8008f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800906c <_malloc_r+0xfc>
 8008f9a:	f000 f869 	bl	8009070 <__malloc_lock>
 8008f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	bb44      	cbnz	r4, 8008ff8 <_malloc_r+0x88>
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff ffbf 	bl	8008f2c <sbrk_aligned>
 8008fae:	1c43      	adds	r3, r0, #1
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	d158      	bne.n	8009066 <_malloc_r+0xf6>
 8008fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8008fb8:	4627      	mov	r7, r4
 8008fba:	2f00      	cmp	r7, #0
 8008fbc:	d143      	bne.n	8009046 <_malloc_r+0xd6>
 8008fbe:	2c00      	cmp	r4, #0
 8008fc0:	d04b      	beq.n	800905a <_malloc_r+0xea>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	eb04 0903 	add.w	r9, r4, r3
 8008fcc:	f000 fd0e 	bl	80099ec <_sbrk_r>
 8008fd0:	4581      	cmp	r9, r0
 8008fd2:	d142      	bne.n	800905a <_malloc_r+0xea>
 8008fd4:	6821      	ldr	r1, [r4, #0]
 8008fd6:	1a6d      	subs	r5, r5, r1
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ffa6 	bl	8008f2c <sbrk_aligned>
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d03a      	beq.n	800905a <_malloc_r+0xea>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	442b      	add	r3, r5
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	f8d8 3000 	ldr.w	r3, [r8]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	bb62      	cbnz	r2, 800904c <_malloc_r+0xdc>
 8008ff2:	f8c8 7000 	str.w	r7, [r8]
 8008ff6:	e00f      	b.n	8009018 <_malloc_r+0xa8>
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	1b52      	subs	r2, r2, r5
 8008ffc:	d420      	bmi.n	8009040 <_malloc_r+0xd0>
 8008ffe:	2a0b      	cmp	r2, #11
 8009000:	d917      	bls.n	8009032 <_malloc_r+0xc2>
 8009002:	1961      	adds	r1, r4, r5
 8009004:	42a3      	cmp	r3, r4
 8009006:	6025      	str	r5, [r4, #0]
 8009008:	bf18      	it	ne
 800900a:	6059      	strne	r1, [r3, #4]
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	bf08      	it	eq
 8009010:	f8c8 1000 	streq.w	r1, [r8]
 8009014:	5162      	str	r2, [r4, r5]
 8009016:	604b      	str	r3, [r1, #4]
 8009018:	4630      	mov	r0, r6
 800901a:	f000 f82f 	bl	800907c <__malloc_unlock>
 800901e:	f104 000b 	add.w	r0, r4, #11
 8009022:	1d23      	adds	r3, r4, #4
 8009024:	f020 0007 	bic.w	r0, r0, #7
 8009028:	1ac2      	subs	r2, r0, r3
 800902a:	bf1c      	itt	ne
 800902c:	1a1b      	subne	r3, r3, r0
 800902e:	50a3      	strne	r3, [r4, r2]
 8009030:	e7af      	b.n	8008f92 <_malloc_r+0x22>
 8009032:	6862      	ldr	r2, [r4, #4]
 8009034:	42a3      	cmp	r3, r4
 8009036:	bf0c      	ite	eq
 8009038:	f8c8 2000 	streq.w	r2, [r8]
 800903c:	605a      	strne	r2, [r3, #4]
 800903e:	e7eb      	b.n	8009018 <_malloc_r+0xa8>
 8009040:	4623      	mov	r3, r4
 8009042:	6864      	ldr	r4, [r4, #4]
 8009044:	e7ae      	b.n	8008fa4 <_malloc_r+0x34>
 8009046:	463c      	mov	r4, r7
 8009048:	687f      	ldr	r7, [r7, #4]
 800904a:	e7b6      	b.n	8008fba <_malloc_r+0x4a>
 800904c:	461a      	mov	r2, r3
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	42a3      	cmp	r3, r4
 8009052:	d1fb      	bne.n	800904c <_malloc_r+0xdc>
 8009054:	2300      	movs	r3, #0
 8009056:	6053      	str	r3, [r2, #4]
 8009058:	e7de      	b.n	8009018 <_malloc_r+0xa8>
 800905a:	230c      	movs	r3, #12
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	4630      	mov	r0, r6
 8009060:	f000 f80c 	bl	800907c <__malloc_unlock>
 8009064:	e794      	b.n	8008f90 <_malloc_r+0x20>
 8009066:	6005      	str	r5, [r0, #0]
 8009068:	e7d6      	b.n	8009018 <_malloc_r+0xa8>
 800906a:	bf00      	nop
 800906c:	20000538 	.word	0x20000538

08009070 <__malloc_lock>:
 8009070:	4801      	ldr	r0, [pc, #4]	@ (8009078 <__malloc_lock+0x8>)
 8009072:	f7ff b8ac 	b.w	80081ce <__retarget_lock_acquire_recursive>
 8009076:	bf00      	nop
 8009078:	20000530 	.word	0x20000530

0800907c <__malloc_unlock>:
 800907c:	4801      	ldr	r0, [pc, #4]	@ (8009084 <__malloc_unlock+0x8>)
 800907e:	f7ff b8a7 	b.w	80081d0 <__retarget_lock_release_recursive>
 8009082:	bf00      	nop
 8009084:	20000530 	.word	0x20000530

08009088 <_Balloc>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	69c6      	ldr	r6, [r0, #28]
 800908c:	4604      	mov	r4, r0
 800908e:	460d      	mov	r5, r1
 8009090:	b976      	cbnz	r6, 80090b0 <_Balloc+0x28>
 8009092:	2010      	movs	r0, #16
 8009094:	f7ff ff42 	bl	8008f1c <malloc>
 8009098:	4602      	mov	r2, r0
 800909a:	61e0      	str	r0, [r4, #28]
 800909c:	b920      	cbnz	r0, 80090a8 <_Balloc+0x20>
 800909e:	4b18      	ldr	r3, [pc, #96]	@ (8009100 <_Balloc+0x78>)
 80090a0:	4818      	ldr	r0, [pc, #96]	@ (8009104 <_Balloc+0x7c>)
 80090a2:	216b      	movs	r1, #107	@ 0x6b
 80090a4:	f000 fcb2 	bl	8009a0c <__assert_func>
 80090a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090ac:	6006      	str	r6, [r0, #0]
 80090ae:	60c6      	str	r6, [r0, #12]
 80090b0:	69e6      	ldr	r6, [r4, #28]
 80090b2:	68f3      	ldr	r3, [r6, #12]
 80090b4:	b183      	cbz	r3, 80090d8 <_Balloc+0x50>
 80090b6:	69e3      	ldr	r3, [r4, #28]
 80090b8:	68db      	ldr	r3, [r3, #12]
 80090ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090be:	b9b8      	cbnz	r0, 80090f0 <_Balloc+0x68>
 80090c0:	2101      	movs	r1, #1
 80090c2:	fa01 f605 	lsl.w	r6, r1, r5
 80090c6:	1d72      	adds	r2, r6, #5
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fcbc 	bl	8009a48 <_calloc_r>
 80090d0:	b160      	cbz	r0, 80090ec <_Balloc+0x64>
 80090d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090d6:	e00e      	b.n	80090f6 <_Balloc+0x6e>
 80090d8:	2221      	movs	r2, #33	@ 0x21
 80090da:	2104      	movs	r1, #4
 80090dc:	4620      	mov	r0, r4
 80090de:	f000 fcb3 	bl	8009a48 <_calloc_r>
 80090e2:	69e3      	ldr	r3, [r4, #28]
 80090e4:	60f0      	str	r0, [r6, #12]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e4      	bne.n	80090b6 <_Balloc+0x2e>
 80090ec:	2000      	movs	r0, #0
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	6802      	ldr	r2, [r0, #0]
 80090f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090f6:	2300      	movs	r3, #0
 80090f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090fc:	e7f7      	b.n	80090ee <_Balloc+0x66>
 80090fe:	bf00      	nop
 8009100:	08009fd1 	.word	0x08009fd1
 8009104:	0800a051 	.word	0x0800a051

08009108 <_Bfree>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	69c6      	ldr	r6, [r0, #28]
 800910c:	4605      	mov	r5, r0
 800910e:	460c      	mov	r4, r1
 8009110:	b976      	cbnz	r6, 8009130 <_Bfree+0x28>
 8009112:	2010      	movs	r0, #16
 8009114:	f7ff ff02 	bl	8008f1c <malloc>
 8009118:	4602      	mov	r2, r0
 800911a:	61e8      	str	r0, [r5, #28]
 800911c:	b920      	cbnz	r0, 8009128 <_Bfree+0x20>
 800911e:	4b09      	ldr	r3, [pc, #36]	@ (8009144 <_Bfree+0x3c>)
 8009120:	4809      	ldr	r0, [pc, #36]	@ (8009148 <_Bfree+0x40>)
 8009122:	218f      	movs	r1, #143	@ 0x8f
 8009124:	f000 fc72 	bl	8009a0c <__assert_func>
 8009128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800912c:	6006      	str	r6, [r0, #0]
 800912e:	60c6      	str	r6, [r0, #12]
 8009130:	b13c      	cbz	r4, 8009142 <_Bfree+0x3a>
 8009132:	69eb      	ldr	r3, [r5, #28]
 8009134:	6862      	ldr	r2, [r4, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800913c:	6021      	str	r1, [r4, #0]
 800913e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009142:	bd70      	pop	{r4, r5, r6, pc}
 8009144:	08009fd1 	.word	0x08009fd1
 8009148:	0800a051 	.word	0x0800a051

0800914c <__multadd>:
 800914c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009150:	690d      	ldr	r5, [r1, #16]
 8009152:	4607      	mov	r7, r0
 8009154:	460c      	mov	r4, r1
 8009156:	461e      	mov	r6, r3
 8009158:	f101 0c14 	add.w	ip, r1, #20
 800915c:	2000      	movs	r0, #0
 800915e:	f8dc 3000 	ldr.w	r3, [ip]
 8009162:	b299      	uxth	r1, r3
 8009164:	fb02 6101 	mla	r1, r2, r1, r6
 8009168:	0c1e      	lsrs	r6, r3, #16
 800916a:	0c0b      	lsrs	r3, r1, #16
 800916c:	fb02 3306 	mla	r3, r2, r6, r3
 8009170:	b289      	uxth	r1, r1
 8009172:	3001      	adds	r0, #1
 8009174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009178:	4285      	cmp	r5, r0
 800917a:	f84c 1b04 	str.w	r1, [ip], #4
 800917e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009182:	dcec      	bgt.n	800915e <__multadd+0x12>
 8009184:	b30e      	cbz	r6, 80091ca <__multadd+0x7e>
 8009186:	68a3      	ldr	r3, [r4, #8]
 8009188:	42ab      	cmp	r3, r5
 800918a:	dc19      	bgt.n	80091c0 <__multadd+0x74>
 800918c:	6861      	ldr	r1, [r4, #4]
 800918e:	4638      	mov	r0, r7
 8009190:	3101      	adds	r1, #1
 8009192:	f7ff ff79 	bl	8009088 <_Balloc>
 8009196:	4680      	mov	r8, r0
 8009198:	b928      	cbnz	r0, 80091a6 <__multadd+0x5a>
 800919a:	4602      	mov	r2, r0
 800919c:	4b0c      	ldr	r3, [pc, #48]	@ (80091d0 <__multadd+0x84>)
 800919e:	480d      	ldr	r0, [pc, #52]	@ (80091d4 <__multadd+0x88>)
 80091a0:	21ba      	movs	r1, #186	@ 0xba
 80091a2:	f000 fc33 	bl	8009a0c <__assert_func>
 80091a6:	6922      	ldr	r2, [r4, #16]
 80091a8:	3202      	adds	r2, #2
 80091aa:	f104 010c 	add.w	r1, r4, #12
 80091ae:	0092      	lsls	r2, r2, #2
 80091b0:	300c      	adds	r0, #12
 80091b2:	f7ff f80e 	bl	80081d2 <memcpy>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4638      	mov	r0, r7
 80091ba:	f7ff ffa5 	bl	8009108 <_Bfree>
 80091be:	4644      	mov	r4, r8
 80091c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091c4:	3501      	adds	r5, #1
 80091c6:	615e      	str	r6, [r3, #20]
 80091c8:	6125      	str	r5, [r4, #16]
 80091ca:	4620      	mov	r0, r4
 80091cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d0:	0800a040 	.word	0x0800a040
 80091d4:	0800a051 	.word	0x0800a051

080091d8 <__hi0bits>:
 80091d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091dc:	4603      	mov	r3, r0
 80091de:	bf36      	itet	cc
 80091e0:	0403      	lslcc	r3, r0, #16
 80091e2:	2000      	movcs	r0, #0
 80091e4:	2010      	movcc	r0, #16
 80091e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091ea:	bf3c      	itt	cc
 80091ec:	021b      	lslcc	r3, r3, #8
 80091ee:	3008      	addcc	r0, #8
 80091f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091f4:	bf3c      	itt	cc
 80091f6:	011b      	lslcc	r3, r3, #4
 80091f8:	3004      	addcc	r0, #4
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091fe:	bf3c      	itt	cc
 8009200:	009b      	lslcc	r3, r3, #2
 8009202:	3002      	addcc	r0, #2
 8009204:	2b00      	cmp	r3, #0
 8009206:	db05      	blt.n	8009214 <__hi0bits+0x3c>
 8009208:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800920c:	f100 0001 	add.w	r0, r0, #1
 8009210:	bf08      	it	eq
 8009212:	2020      	moveq	r0, #32
 8009214:	4770      	bx	lr

08009216 <__lo0bits>:
 8009216:	6803      	ldr	r3, [r0, #0]
 8009218:	4602      	mov	r2, r0
 800921a:	f013 0007 	ands.w	r0, r3, #7
 800921e:	d00b      	beq.n	8009238 <__lo0bits+0x22>
 8009220:	07d9      	lsls	r1, r3, #31
 8009222:	d421      	bmi.n	8009268 <__lo0bits+0x52>
 8009224:	0798      	lsls	r0, r3, #30
 8009226:	bf49      	itett	mi
 8009228:	085b      	lsrmi	r3, r3, #1
 800922a:	089b      	lsrpl	r3, r3, #2
 800922c:	2001      	movmi	r0, #1
 800922e:	6013      	strmi	r3, [r2, #0]
 8009230:	bf5c      	itt	pl
 8009232:	6013      	strpl	r3, [r2, #0]
 8009234:	2002      	movpl	r0, #2
 8009236:	4770      	bx	lr
 8009238:	b299      	uxth	r1, r3
 800923a:	b909      	cbnz	r1, 8009240 <__lo0bits+0x2a>
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	2010      	movs	r0, #16
 8009240:	b2d9      	uxtb	r1, r3
 8009242:	b909      	cbnz	r1, 8009248 <__lo0bits+0x32>
 8009244:	3008      	adds	r0, #8
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	0719      	lsls	r1, r3, #28
 800924a:	bf04      	itt	eq
 800924c:	091b      	lsreq	r3, r3, #4
 800924e:	3004      	addeq	r0, #4
 8009250:	0799      	lsls	r1, r3, #30
 8009252:	bf04      	itt	eq
 8009254:	089b      	lsreq	r3, r3, #2
 8009256:	3002      	addeq	r0, #2
 8009258:	07d9      	lsls	r1, r3, #31
 800925a:	d403      	bmi.n	8009264 <__lo0bits+0x4e>
 800925c:	085b      	lsrs	r3, r3, #1
 800925e:	f100 0001 	add.w	r0, r0, #1
 8009262:	d003      	beq.n	800926c <__lo0bits+0x56>
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	4770      	bx	lr
 8009268:	2000      	movs	r0, #0
 800926a:	4770      	bx	lr
 800926c:	2020      	movs	r0, #32
 800926e:	4770      	bx	lr

08009270 <__i2b>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	2101      	movs	r1, #1
 8009276:	f7ff ff07 	bl	8009088 <_Balloc>
 800927a:	4602      	mov	r2, r0
 800927c:	b928      	cbnz	r0, 800928a <__i2b+0x1a>
 800927e:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <__i2b+0x24>)
 8009280:	4805      	ldr	r0, [pc, #20]	@ (8009298 <__i2b+0x28>)
 8009282:	f240 1145 	movw	r1, #325	@ 0x145
 8009286:	f000 fbc1 	bl	8009a0c <__assert_func>
 800928a:	2301      	movs	r3, #1
 800928c:	6144      	str	r4, [r0, #20]
 800928e:	6103      	str	r3, [r0, #16]
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	0800a040 	.word	0x0800a040
 8009298:	0800a051 	.word	0x0800a051

0800929c <__multiply>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	4614      	mov	r4, r2
 80092a2:	690a      	ldr	r2, [r1, #16]
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	bfa8      	it	ge
 80092aa:	4623      	movge	r3, r4
 80092ac:	460f      	mov	r7, r1
 80092ae:	bfa4      	itt	ge
 80092b0:	460c      	movge	r4, r1
 80092b2:	461f      	movge	r7, r3
 80092b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	6861      	ldr	r1, [r4, #4]
 80092c0:	eb0a 0609 	add.w	r6, sl, r9
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	b085      	sub	sp, #20
 80092c8:	bfb8      	it	lt
 80092ca:	3101      	addlt	r1, #1
 80092cc:	f7ff fedc 	bl	8009088 <_Balloc>
 80092d0:	b930      	cbnz	r0, 80092e0 <__multiply+0x44>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b44      	ldr	r3, [pc, #272]	@ (80093e8 <__multiply+0x14c>)
 80092d6:	4845      	ldr	r0, [pc, #276]	@ (80093ec <__multiply+0x150>)
 80092d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092dc:	f000 fb96 	bl	8009a0c <__assert_func>
 80092e0:	f100 0514 	add.w	r5, r0, #20
 80092e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092e8:	462b      	mov	r3, r5
 80092ea:	2200      	movs	r2, #0
 80092ec:	4543      	cmp	r3, r8
 80092ee:	d321      	bcc.n	8009334 <__multiply+0x98>
 80092f0:	f107 0114 	add.w	r1, r7, #20
 80092f4:	f104 0214 	add.w	r2, r4, #20
 80092f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80092fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009300:	9302      	str	r3, [sp, #8]
 8009302:	1b13      	subs	r3, r2, r4
 8009304:	3b15      	subs	r3, #21
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	3304      	adds	r3, #4
 800930c:	f104 0715 	add.w	r7, r4, #21
 8009310:	42ba      	cmp	r2, r7
 8009312:	bf38      	it	cc
 8009314:	2304      	movcc	r3, #4
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	9103      	str	r1, [sp, #12]
 800931c:	428b      	cmp	r3, r1
 800931e:	d80c      	bhi.n	800933a <__multiply+0x9e>
 8009320:	2e00      	cmp	r6, #0
 8009322:	dd03      	ble.n	800932c <__multiply+0x90>
 8009324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009328:	2b00      	cmp	r3, #0
 800932a:	d05b      	beq.n	80093e4 <__multiply+0x148>
 800932c:	6106      	str	r6, [r0, #16]
 800932e:	b005      	add	sp, #20
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	f843 2b04 	str.w	r2, [r3], #4
 8009338:	e7d8      	b.n	80092ec <__multiply+0x50>
 800933a:	f8b1 a000 	ldrh.w	sl, [r1]
 800933e:	f1ba 0f00 	cmp.w	sl, #0
 8009342:	d024      	beq.n	800938e <__multiply+0xf2>
 8009344:	f104 0e14 	add.w	lr, r4, #20
 8009348:	46a9      	mov	r9, r5
 800934a:	f04f 0c00 	mov.w	ip, #0
 800934e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009352:	f8d9 3000 	ldr.w	r3, [r9]
 8009356:	fa1f fb87 	uxth.w	fp, r7
 800935a:	b29b      	uxth	r3, r3
 800935c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009360:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009364:	f8d9 7000 	ldr.w	r7, [r9]
 8009368:	4463      	add	r3, ip
 800936a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800936e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009372:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009376:	b29b      	uxth	r3, r3
 8009378:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800937c:	4572      	cmp	r2, lr
 800937e:	f849 3b04 	str.w	r3, [r9], #4
 8009382:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009386:	d8e2      	bhi.n	800934e <__multiply+0xb2>
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	f845 c003 	str.w	ip, [r5, r3]
 800938e:	9b03      	ldr	r3, [sp, #12]
 8009390:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009394:	3104      	adds	r1, #4
 8009396:	f1b9 0f00 	cmp.w	r9, #0
 800939a:	d021      	beq.n	80093e0 <__multiply+0x144>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	f104 0c14 	add.w	ip, r4, #20
 80093a2:	46ae      	mov	lr, r5
 80093a4:	f04f 0a00 	mov.w	sl, #0
 80093a8:	f8bc b000 	ldrh.w	fp, [ip]
 80093ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093b0:	fb09 770b 	mla	r7, r9, fp, r7
 80093b4:	4457      	add	r7, sl
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093bc:	f84e 3b04 	str.w	r3, [lr], #4
 80093c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093c8:	f8be 3000 	ldrh.w	r3, [lr]
 80093cc:	fb09 330a 	mla	r3, r9, sl, r3
 80093d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80093d4:	4562      	cmp	r2, ip
 80093d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093da:	d8e5      	bhi.n	80093a8 <__multiply+0x10c>
 80093dc:	9f01      	ldr	r7, [sp, #4]
 80093de:	51eb      	str	r3, [r5, r7]
 80093e0:	3504      	adds	r5, #4
 80093e2:	e799      	b.n	8009318 <__multiply+0x7c>
 80093e4:	3e01      	subs	r6, #1
 80093e6:	e79b      	b.n	8009320 <__multiply+0x84>
 80093e8:	0800a040 	.word	0x0800a040
 80093ec:	0800a051 	.word	0x0800a051

080093f0 <__pow5mult>:
 80093f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	4615      	mov	r5, r2
 80093f6:	f012 0203 	ands.w	r2, r2, #3
 80093fa:	4607      	mov	r7, r0
 80093fc:	460e      	mov	r6, r1
 80093fe:	d007      	beq.n	8009410 <__pow5mult+0x20>
 8009400:	4c25      	ldr	r4, [pc, #148]	@ (8009498 <__pow5mult+0xa8>)
 8009402:	3a01      	subs	r2, #1
 8009404:	2300      	movs	r3, #0
 8009406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800940a:	f7ff fe9f 	bl	800914c <__multadd>
 800940e:	4606      	mov	r6, r0
 8009410:	10ad      	asrs	r5, r5, #2
 8009412:	d03d      	beq.n	8009490 <__pow5mult+0xa0>
 8009414:	69fc      	ldr	r4, [r7, #28]
 8009416:	b97c      	cbnz	r4, 8009438 <__pow5mult+0x48>
 8009418:	2010      	movs	r0, #16
 800941a:	f7ff fd7f 	bl	8008f1c <malloc>
 800941e:	4602      	mov	r2, r0
 8009420:	61f8      	str	r0, [r7, #28]
 8009422:	b928      	cbnz	r0, 8009430 <__pow5mult+0x40>
 8009424:	4b1d      	ldr	r3, [pc, #116]	@ (800949c <__pow5mult+0xac>)
 8009426:	481e      	ldr	r0, [pc, #120]	@ (80094a0 <__pow5mult+0xb0>)
 8009428:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800942c:	f000 faee 	bl	8009a0c <__assert_func>
 8009430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009434:	6004      	str	r4, [r0, #0]
 8009436:	60c4      	str	r4, [r0, #12]
 8009438:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800943c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009440:	b94c      	cbnz	r4, 8009456 <__pow5mult+0x66>
 8009442:	f240 2171 	movw	r1, #625	@ 0x271
 8009446:	4638      	mov	r0, r7
 8009448:	f7ff ff12 	bl	8009270 <__i2b>
 800944c:	2300      	movs	r3, #0
 800944e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009452:	4604      	mov	r4, r0
 8009454:	6003      	str	r3, [r0, #0]
 8009456:	f04f 0900 	mov.w	r9, #0
 800945a:	07eb      	lsls	r3, r5, #31
 800945c:	d50a      	bpl.n	8009474 <__pow5mult+0x84>
 800945e:	4631      	mov	r1, r6
 8009460:	4622      	mov	r2, r4
 8009462:	4638      	mov	r0, r7
 8009464:	f7ff ff1a 	bl	800929c <__multiply>
 8009468:	4631      	mov	r1, r6
 800946a:	4680      	mov	r8, r0
 800946c:	4638      	mov	r0, r7
 800946e:	f7ff fe4b 	bl	8009108 <_Bfree>
 8009472:	4646      	mov	r6, r8
 8009474:	106d      	asrs	r5, r5, #1
 8009476:	d00b      	beq.n	8009490 <__pow5mult+0xa0>
 8009478:	6820      	ldr	r0, [r4, #0]
 800947a:	b938      	cbnz	r0, 800948c <__pow5mult+0x9c>
 800947c:	4622      	mov	r2, r4
 800947e:	4621      	mov	r1, r4
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff ff0b 	bl	800929c <__multiply>
 8009486:	6020      	str	r0, [r4, #0]
 8009488:	f8c0 9000 	str.w	r9, [r0]
 800948c:	4604      	mov	r4, r0
 800948e:	e7e4      	b.n	800945a <__pow5mult+0x6a>
 8009490:	4630      	mov	r0, r6
 8009492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009496:	bf00      	nop
 8009498:	0800a0ac 	.word	0x0800a0ac
 800949c:	08009fd1 	.word	0x08009fd1
 80094a0:	0800a051 	.word	0x0800a051

080094a4 <__lshift>:
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	6849      	ldr	r1, [r1, #4]
 80094ac:	6923      	ldr	r3, [r4, #16]
 80094ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094b2:	68a3      	ldr	r3, [r4, #8]
 80094b4:	4607      	mov	r7, r0
 80094b6:	4691      	mov	r9, r2
 80094b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094bc:	f108 0601 	add.w	r6, r8, #1
 80094c0:	42b3      	cmp	r3, r6
 80094c2:	db0b      	blt.n	80094dc <__lshift+0x38>
 80094c4:	4638      	mov	r0, r7
 80094c6:	f7ff fddf 	bl	8009088 <_Balloc>
 80094ca:	4605      	mov	r5, r0
 80094cc:	b948      	cbnz	r0, 80094e2 <__lshift+0x3e>
 80094ce:	4602      	mov	r2, r0
 80094d0:	4b28      	ldr	r3, [pc, #160]	@ (8009574 <__lshift+0xd0>)
 80094d2:	4829      	ldr	r0, [pc, #164]	@ (8009578 <__lshift+0xd4>)
 80094d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80094d8:	f000 fa98 	bl	8009a0c <__assert_func>
 80094dc:	3101      	adds	r1, #1
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	e7ee      	b.n	80094c0 <__lshift+0x1c>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f100 0114 	add.w	r1, r0, #20
 80094e8:	f100 0210 	add.w	r2, r0, #16
 80094ec:	4618      	mov	r0, r3
 80094ee:	4553      	cmp	r3, sl
 80094f0:	db33      	blt.n	800955a <__lshift+0xb6>
 80094f2:	6920      	ldr	r0, [r4, #16]
 80094f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094f8:	f104 0314 	add.w	r3, r4, #20
 80094fc:	f019 091f 	ands.w	r9, r9, #31
 8009500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009508:	d02b      	beq.n	8009562 <__lshift+0xbe>
 800950a:	f1c9 0e20 	rsb	lr, r9, #32
 800950e:	468a      	mov	sl, r1
 8009510:	2200      	movs	r2, #0
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	fa00 f009 	lsl.w	r0, r0, r9
 8009518:	4310      	orrs	r0, r2
 800951a:	f84a 0b04 	str.w	r0, [sl], #4
 800951e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009522:	459c      	cmp	ip, r3
 8009524:	fa22 f20e 	lsr.w	r2, r2, lr
 8009528:	d8f3      	bhi.n	8009512 <__lshift+0x6e>
 800952a:	ebac 0304 	sub.w	r3, ip, r4
 800952e:	3b15      	subs	r3, #21
 8009530:	f023 0303 	bic.w	r3, r3, #3
 8009534:	3304      	adds	r3, #4
 8009536:	f104 0015 	add.w	r0, r4, #21
 800953a:	4584      	cmp	ip, r0
 800953c:	bf38      	it	cc
 800953e:	2304      	movcc	r3, #4
 8009540:	50ca      	str	r2, [r1, r3]
 8009542:	b10a      	cbz	r2, 8009548 <__lshift+0xa4>
 8009544:	f108 0602 	add.w	r6, r8, #2
 8009548:	3e01      	subs	r6, #1
 800954a:	4638      	mov	r0, r7
 800954c:	612e      	str	r6, [r5, #16]
 800954e:	4621      	mov	r1, r4
 8009550:	f7ff fdda 	bl	8009108 <_Bfree>
 8009554:	4628      	mov	r0, r5
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	f842 0f04 	str.w	r0, [r2, #4]!
 800955e:	3301      	adds	r3, #1
 8009560:	e7c5      	b.n	80094ee <__lshift+0x4a>
 8009562:	3904      	subs	r1, #4
 8009564:	f853 2b04 	ldr.w	r2, [r3], #4
 8009568:	f841 2f04 	str.w	r2, [r1, #4]!
 800956c:	459c      	cmp	ip, r3
 800956e:	d8f9      	bhi.n	8009564 <__lshift+0xc0>
 8009570:	e7ea      	b.n	8009548 <__lshift+0xa4>
 8009572:	bf00      	nop
 8009574:	0800a040 	.word	0x0800a040
 8009578:	0800a051 	.word	0x0800a051

0800957c <__mcmp>:
 800957c:	690a      	ldr	r2, [r1, #16]
 800957e:	4603      	mov	r3, r0
 8009580:	6900      	ldr	r0, [r0, #16]
 8009582:	1a80      	subs	r0, r0, r2
 8009584:	b530      	push	{r4, r5, lr}
 8009586:	d10e      	bne.n	80095a6 <__mcmp+0x2a>
 8009588:	3314      	adds	r3, #20
 800958a:	3114      	adds	r1, #20
 800958c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009590:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800959c:	4295      	cmp	r5, r2
 800959e:	d003      	beq.n	80095a8 <__mcmp+0x2c>
 80095a0:	d205      	bcs.n	80095ae <__mcmp+0x32>
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095a6:	bd30      	pop	{r4, r5, pc}
 80095a8:	42a3      	cmp	r3, r4
 80095aa:	d3f3      	bcc.n	8009594 <__mcmp+0x18>
 80095ac:	e7fb      	b.n	80095a6 <__mcmp+0x2a>
 80095ae:	2001      	movs	r0, #1
 80095b0:	e7f9      	b.n	80095a6 <__mcmp+0x2a>
	...

080095b4 <__mdiff>:
 80095b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	4689      	mov	r9, r1
 80095ba:	4606      	mov	r6, r0
 80095bc:	4611      	mov	r1, r2
 80095be:	4648      	mov	r0, r9
 80095c0:	4614      	mov	r4, r2
 80095c2:	f7ff ffdb 	bl	800957c <__mcmp>
 80095c6:	1e05      	subs	r5, r0, #0
 80095c8:	d112      	bne.n	80095f0 <__mdiff+0x3c>
 80095ca:	4629      	mov	r1, r5
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff fd5b 	bl	8009088 <_Balloc>
 80095d2:	4602      	mov	r2, r0
 80095d4:	b928      	cbnz	r0, 80095e2 <__mdiff+0x2e>
 80095d6:	4b3f      	ldr	r3, [pc, #252]	@ (80096d4 <__mdiff+0x120>)
 80095d8:	f240 2137 	movw	r1, #567	@ 0x237
 80095dc:	483e      	ldr	r0, [pc, #248]	@ (80096d8 <__mdiff+0x124>)
 80095de:	f000 fa15 	bl	8009a0c <__assert_func>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095e8:	4610      	mov	r0, r2
 80095ea:	b003      	add	sp, #12
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	bfbc      	itt	lt
 80095f2:	464b      	movlt	r3, r9
 80095f4:	46a1      	movlt	r9, r4
 80095f6:	4630      	mov	r0, r6
 80095f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095fc:	bfba      	itte	lt
 80095fe:	461c      	movlt	r4, r3
 8009600:	2501      	movlt	r5, #1
 8009602:	2500      	movge	r5, #0
 8009604:	f7ff fd40 	bl	8009088 <_Balloc>
 8009608:	4602      	mov	r2, r0
 800960a:	b918      	cbnz	r0, 8009614 <__mdiff+0x60>
 800960c:	4b31      	ldr	r3, [pc, #196]	@ (80096d4 <__mdiff+0x120>)
 800960e:	f240 2145 	movw	r1, #581	@ 0x245
 8009612:	e7e3      	b.n	80095dc <__mdiff+0x28>
 8009614:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009618:	6926      	ldr	r6, [r4, #16]
 800961a:	60c5      	str	r5, [r0, #12]
 800961c:	f109 0310 	add.w	r3, r9, #16
 8009620:	f109 0514 	add.w	r5, r9, #20
 8009624:	f104 0e14 	add.w	lr, r4, #20
 8009628:	f100 0b14 	add.w	fp, r0, #20
 800962c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009630:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	46d9      	mov	r9, fp
 8009638:	f04f 0c00 	mov.w	ip, #0
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009642:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	fa1f f38a 	uxth.w	r3, sl
 800964c:	4619      	mov	r1, r3
 800964e:	b283      	uxth	r3, r0
 8009650:	1acb      	subs	r3, r1, r3
 8009652:	0c00      	lsrs	r0, r0, #16
 8009654:	4463      	add	r3, ip
 8009656:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800965a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800965e:	b29b      	uxth	r3, r3
 8009660:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009664:	4576      	cmp	r6, lr
 8009666:	f849 3b04 	str.w	r3, [r9], #4
 800966a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800966e:	d8e5      	bhi.n	800963c <__mdiff+0x88>
 8009670:	1b33      	subs	r3, r6, r4
 8009672:	3b15      	subs	r3, #21
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	3415      	adds	r4, #21
 800967a:	3304      	adds	r3, #4
 800967c:	42a6      	cmp	r6, r4
 800967e:	bf38      	it	cc
 8009680:	2304      	movcc	r3, #4
 8009682:	441d      	add	r5, r3
 8009684:	445b      	add	r3, fp
 8009686:	461e      	mov	r6, r3
 8009688:	462c      	mov	r4, r5
 800968a:	4544      	cmp	r4, r8
 800968c:	d30e      	bcc.n	80096ac <__mdiff+0xf8>
 800968e:	f108 0103 	add.w	r1, r8, #3
 8009692:	1b49      	subs	r1, r1, r5
 8009694:	f021 0103 	bic.w	r1, r1, #3
 8009698:	3d03      	subs	r5, #3
 800969a:	45a8      	cmp	r8, r5
 800969c:	bf38      	it	cc
 800969e:	2100      	movcc	r1, #0
 80096a0:	440b      	add	r3, r1
 80096a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096a6:	b191      	cbz	r1, 80096ce <__mdiff+0x11a>
 80096a8:	6117      	str	r7, [r2, #16]
 80096aa:	e79d      	b.n	80095e8 <__mdiff+0x34>
 80096ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80096b0:	46e6      	mov	lr, ip
 80096b2:	0c08      	lsrs	r0, r1, #16
 80096b4:	fa1c fc81 	uxtah	ip, ip, r1
 80096b8:	4471      	add	r1, lr
 80096ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096be:	b289      	uxth	r1, r1
 80096c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096c4:	f846 1b04 	str.w	r1, [r6], #4
 80096c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096cc:	e7dd      	b.n	800968a <__mdiff+0xd6>
 80096ce:	3f01      	subs	r7, #1
 80096d0:	e7e7      	b.n	80096a2 <__mdiff+0xee>
 80096d2:	bf00      	nop
 80096d4:	0800a040 	.word	0x0800a040
 80096d8:	0800a051 	.word	0x0800a051

080096dc <__d2b>:
 80096dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096e0:	460f      	mov	r7, r1
 80096e2:	2101      	movs	r1, #1
 80096e4:	ec59 8b10 	vmov	r8, r9, d0
 80096e8:	4616      	mov	r6, r2
 80096ea:	f7ff fccd 	bl	8009088 <_Balloc>
 80096ee:	4604      	mov	r4, r0
 80096f0:	b930      	cbnz	r0, 8009700 <__d2b+0x24>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b23      	ldr	r3, [pc, #140]	@ (8009784 <__d2b+0xa8>)
 80096f6:	4824      	ldr	r0, [pc, #144]	@ (8009788 <__d2b+0xac>)
 80096f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80096fc:	f000 f986 	bl	8009a0c <__assert_func>
 8009700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009708:	b10d      	cbz	r5, 800970e <__d2b+0x32>
 800970a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	f1b8 0300 	subs.w	r3, r8, #0
 8009714:	d023      	beq.n	800975e <__d2b+0x82>
 8009716:	4668      	mov	r0, sp
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	f7ff fd7c 	bl	8009216 <__lo0bits>
 800971e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009722:	b1d0      	cbz	r0, 800975a <__d2b+0x7e>
 8009724:	f1c0 0320 	rsb	r3, r0, #32
 8009728:	fa02 f303 	lsl.w	r3, r2, r3
 800972c:	430b      	orrs	r3, r1
 800972e:	40c2      	lsrs	r2, r0
 8009730:	6163      	str	r3, [r4, #20]
 8009732:	9201      	str	r2, [sp, #4]
 8009734:	9b01      	ldr	r3, [sp, #4]
 8009736:	61a3      	str	r3, [r4, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf0c      	ite	eq
 800973c:	2201      	moveq	r2, #1
 800973e:	2202      	movne	r2, #2
 8009740:	6122      	str	r2, [r4, #16]
 8009742:	b1a5      	cbz	r5, 800976e <__d2b+0x92>
 8009744:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009748:	4405      	add	r5, r0
 800974a:	603d      	str	r5, [r7, #0]
 800974c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009750:	6030      	str	r0, [r6, #0]
 8009752:	4620      	mov	r0, r4
 8009754:	b003      	add	sp, #12
 8009756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800975a:	6161      	str	r1, [r4, #20]
 800975c:	e7ea      	b.n	8009734 <__d2b+0x58>
 800975e:	a801      	add	r0, sp, #4
 8009760:	f7ff fd59 	bl	8009216 <__lo0bits>
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	3020      	adds	r0, #32
 800976a:	2201      	movs	r2, #1
 800976c:	e7e8      	b.n	8009740 <__d2b+0x64>
 800976e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009772:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009776:	6038      	str	r0, [r7, #0]
 8009778:	6918      	ldr	r0, [r3, #16]
 800977a:	f7ff fd2d 	bl	80091d8 <__hi0bits>
 800977e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009782:	e7e5      	b.n	8009750 <__d2b+0x74>
 8009784:	0800a040 	.word	0x0800a040
 8009788:	0800a051 	.word	0x0800a051

0800978c <__sflush_r>:
 800978c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	0716      	lsls	r6, r2, #28
 8009796:	4605      	mov	r5, r0
 8009798:	460c      	mov	r4, r1
 800979a:	d454      	bmi.n	8009846 <__sflush_r+0xba>
 800979c:	684b      	ldr	r3, [r1, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dc02      	bgt.n	80097a8 <__sflush_r+0x1c>
 80097a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dd48      	ble.n	800983a <__sflush_r+0xae>
 80097a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	d045      	beq.n	800983a <__sflush_r+0xae>
 80097ae:	2300      	movs	r3, #0
 80097b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097b4:	682f      	ldr	r7, [r5, #0]
 80097b6:	6a21      	ldr	r1, [r4, #32]
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	d030      	beq.n	800981e <__sflush_r+0x92>
 80097bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	0759      	lsls	r1, r3, #29
 80097c2:	d505      	bpl.n	80097d0 <__sflush_r+0x44>
 80097c4:	6863      	ldr	r3, [r4, #4]
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097ca:	b10b      	cbz	r3, 80097d0 <__sflush_r+0x44>
 80097cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097ce:	1ad2      	subs	r2, r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b0      	blx	r6
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	d106      	bne.n	80097ee <__sflush_r+0x62>
 80097e0:	6829      	ldr	r1, [r5, #0]
 80097e2:	291d      	cmp	r1, #29
 80097e4:	d82b      	bhi.n	800983e <__sflush_r+0xb2>
 80097e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <__sflush_r+0x104>)
 80097e8:	410a      	asrs	r2, r1
 80097ea:	07d6      	lsls	r6, r2, #31
 80097ec:	d427      	bmi.n	800983e <__sflush_r+0xb2>
 80097ee:	2200      	movs	r2, #0
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	04d9      	lsls	r1, r3, #19
 80097f4:	6922      	ldr	r2, [r4, #16]
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	d504      	bpl.n	8009804 <__sflush_r+0x78>
 80097fa:	1c42      	adds	r2, r0, #1
 80097fc:	d101      	bne.n	8009802 <__sflush_r+0x76>
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	b903      	cbnz	r3, 8009804 <__sflush_r+0x78>
 8009802:	6560      	str	r0, [r4, #84]	@ 0x54
 8009804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009806:	602f      	str	r7, [r5, #0]
 8009808:	b1b9      	cbz	r1, 800983a <__sflush_r+0xae>
 800980a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800980e:	4299      	cmp	r1, r3
 8009810:	d002      	beq.n	8009818 <__sflush_r+0x8c>
 8009812:	4628      	mov	r0, r5
 8009814:	f7ff fb38 	bl	8008e88 <_free_r>
 8009818:	2300      	movs	r3, #0
 800981a:	6363      	str	r3, [r4, #52]	@ 0x34
 800981c:	e00d      	b.n	800983a <__sflush_r+0xae>
 800981e:	2301      	movs	r3, #1
 8009820:	4628      	mov	r0, r5
 8009822:	47b0      	blx	r6
 8009824:	4602      	mov	r2, r0
 8009826:	1c50      	adds	r0, r2, #1
 8009828:	d1c9      	bne.n	80097be <__sflush_r+0x32>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d0c6      	beq.n	80097be <__sflush_r+0x32>
 8009830:	2b1d      	cmp	r3, #29
 8009832:	d001      	beq.n	8009838 <__sflush_r+0xac>
 8009834:	2b16      	cmp	r3, #22
 8009836:	d11e      	bne.n	8009876 <__sflush_r+0xea>
 8009838:	602f      	str	r7, [r5, #0]
 800983a:	2000      	movs	r0, #0
 800983c:	e022      	b.n	8009884 <__sflush_r+0xf8>
 800983e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009842:	b21b      	sxth	r3, r3
 8009844:	e01b      	b.n	800987e <__sflush_r+0xf2>
 8009846:	690f      	ldr	r7, [r1, #16]
 8009848:	2f00      	cmp	r7, #0
 800984a:	d0f6      	beq.n	800983a <__sflush_r+0xae>
 800984c:	0793      	lsls	r3, r2, #30
 800984e:	680e      	ldr	r6, [r1, #0]
 8009850:	bf08      	it	eq
 8009852:	694b      	ldreq	r3, [r1, #20]
 8009854:	600f      	str	r7, [r1, #0]
 8009856:	bf18      	it	ne
 8009858:	2300      	movne	r3, #0
 800985a:	eba6 0807 	sub.w	r8, r6, r7
 800985e:	608b      	str	r3, [r1, #8]
 8009860:	f1b8 0f00 	cmp.w	r8, #0
 8009864:	dde9      	ble.n	800983a <__sflush_r+0xae>
 8009866:	6a21      	ldr	r1, [r4, #32]
 8009868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800986a:	4643      	mov	r3, r8
 800986c:	463a      	mov	r2, r7
 800986e:	4628      	mov	r0, r5
 8009870:	47b0      	blx	r6
 8009872:	2800      	cmp	r0, #0
 8009874:	dc08      	bgt.n	8009888 <__sflush_r+0xfc>
 8009876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	4407      	add	r7, r0
 800988a:	eba8 0800 	sub.w	r8, r8, r0
 800988e:	e7e7      	b.n	8009860 <__sflush_r+0xd4>
 8009890:	dfbffffe 	.word	0xdfbffffe

08009894 <_fflush_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	690b      	ldr	r3, [r1, #16]
 8009898:	4605      	mov	r5, r0
 800989a:	460c      	mov	r4, r1
 800989c:	b913      	cbnz	r3, 80098a4 <_fflush_r+0x10>
 800989e:	2500      	movs	r5, #0
 80098a0:	4628      	mov	r0, r5
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	b118      	cbz	r0, 80098ae <_fflush_r+0x1a>
 80098a6:	6a03      	ldr	r3, [r0, #32]
 80098a8:	b90b      	cbnz	r3, 80098ae <_fflush_r+0x1a>
 80098aa:	f7fe fae5 	bl	8007e78 <__sinit>
 80098ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d0f3      	beq.n	800989e <_fflush_r+0xa>
 80098b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098b8:	07d0      	lsls	r0, r2, #31
 80098ba:	d404      	bmi.n	80098c6 <_fflush_r+0x32>
 80098bc:	0599      	lsls	r1, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_fflush_r+0x32>
 80098c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098c2:	f7fe fc84 	bl	80081ce <__retarget_lock_acquire_recursive>
 80098c6:	4628      	mov	r0, r5
 80098c8:	4621      	mov	r1, r4
 80098ca:	f7ff ff5f 	bl	800978c <__sflush_r>
 80098ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098d0:	07da      	lsls	r2, r3, #31
 80098d2:	4605      	mov	r5, r0
 80098d4:	d4e4      	bmi.n	80098a0 <_fflush_r+0xc>
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	059b      	lsls	r3, r3, #22
 80098da:	d4e1      	bmi.n	80098a0 <_fflush_r+0xc>
 80098dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098de:	f7fe fc77 	bl	80081d0 <__retarget_lock_release_recursive>
 80098e2:	e7dd      	b.n	80098a0 <_fflush_r+0xc>

080098e4 <__swhatbuf_r>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	2900      	cmp	r1, #0
 80098ee:	b096      	sub	sp, #88	@ 0x58
 80098f0:	4615      	mov	r5, r2
 80098f2:	461e      	mov	r6, r3
 80098f4:	da0d      	bge.n	8009912 <__swhatbuf_r+0x2e>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098fc:	f04f 0100 	mov.w	r1, #0
 8009900:	bf14      	ite	ne
 8009902:	2340      	movne	r3, #64	@ 0x40
 8009904:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009908:	2000      	movs	r0, #0
 800990a:	6031      	str	r1, [r6, #0]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	b016      	add	sp, #88	@ 0x58
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	466a      	mov	r2, sp
 8009914:	f000 f848 	bl	80099a8 <_fstat_r>
 8009918:	2800      	cmp	r0, #0
 800991a:	dbec      	blt.n	80098f6 <__swhatbuf_r+0x12>
 800991c:	9901      	ldr	r1, [sp, #4]
 800991e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009922:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009926:	4259      	negs	r1, r3
 8009928:	4159      	adcs	r1, r3
 800992a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992e:	e7eb      	b.n	8009908 <__swhatbuf_r+0x24>

08009930 <__smakebuf_r>:
 8009930:	898b      	ldrh	r3, [r1, #12]
 8009932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009934:	079d      	lsls	r5, r3, #30
 8009936:	4606      	mov	r6, r0
 8009938:	460c      	mov	r4, r1
 800993a:	d507      	bpl.n	800994c <__smakebuf_r+0x1c>
 800993c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	6123      	str	r3, [r4, #16]
 8009944:	2301      	movs	r3, #1
 8009946:	6163      	str	r3, [r4, #20]
 8009948:	b003      	add	sp, #12
 800994a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994c:	ab01      	add	r3, sp, #4
 800994e:	466a      	mov	r2, sp
 8009950:	f7ff ffc8 	bl	80098e4 <__swhatbuf_r>
 8009954:	9f00      	ldr	r7, [sp, #0]
 8009956:	4605      	mov	r5, r0
 8009958:	4639      	mov	r1, r7
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff fb08 	bl	8008f70 <_malloc_r>
 8009960:	b948      	cbnz	r0, 8009976 <__smakebuf_r+0x46>
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	059a      	lsls	r2, r3, #22
 8009968:	d4ee      	bmi.n	8009948 <__smakebuf_r+0x18>
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	f043 0302 	orr.w	r3, r3, #2
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	e7e2      	b.n	800993c <__smakebuf_r+0xc>
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	6020      	str	r0, [r4, #0]
 800997a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009986:	b15b      	cbz	r3, 80099a0 <__smakebuf_r+0x70>
 8009988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998c:	4630      	mov	r0, r6
 800998e:	f000 f81d 	bl	80099cc <_isatty_r>
 8009992:	b128      	cbz	r0, 80099a0 <__smakebuf_r+0x70>
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	431d      	orrs	r5, r3
 80099a4:	81a5      	strh	r5, [r4, #12]
 80099a6:	e7cf      	b.n	8009948 <__smakebuf_r+0x18>

080099a8 <_fstat_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	@ (80099c8 <_fstat_r+0x20>)
 80099ac:	2300      	movs	r3, #0
 80099ae:	4604      	mov	r4, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	4611      	mov	r1, r2
 80099b4:	602b      	str	r3, [r5, #0]
 80099b6:	f7f7 ff23 	bl	8001800 <_fstat>
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d102      	bne.n	80099c4 <_fstat_r+0x1c>
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	b103      	cbz	r3, 80099c4 <_fstat_r+0x1c>
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	2000052c 	.word	0x2000052c

080099cc <_isatty_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	@ (80099e8 <_isatty_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f7 fe80 	bl	80016dc <_isatty>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_isatty_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_isatty_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	2000052c 	.word	0x2000052c

080099ec <_sbrk_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d06      	ldr	r5, [pc, #24]	@ (8009a08 <_sbrk_r+0x1c>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	f7f9 f858 	bl	8002aac <_sbrk>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_sbrk_r+0x1a>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_sbrk_r+0x1a>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	2000052c 	.word	0x2000052c

08009a0c <__assert_func>:
 8009a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a0e:	4614      	mov	r4, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b09      	ldr	r3, [pc, #36]	@ (8009a38 <__assert_func+0x2c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4605      	mov	r5, r0
 8009a18:	68d8      	ldr	r0, [r3, #12]
 8009a1a:	b954      	cbnz	r4, 8009a32 <__assert_func+0x26>
 8009a1c:	4b07      	ldr	r3, [pc, #28]	@ (8009a3c <__assert_func+0x30>)
 8009a1e:	461c      	mov	r4, r3
 8009a20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a24:	9100      	str	r1, [sp, #0]
 8009a26:	462b      	mov	r3, r5
 8009a28:	4905      	ldr	r1, [pc, #20]	@ (8009a40 <__assert_func+0x34>)
 8009a2a:	f000 f841 	bl	8009ab0 <fiprintf>
 8009a2e:	f000 f851 	bl	8009ad4 <abort>
 8009a32:	4b04      	ldr	r3, [pc, #16]	@ (8009a44 <__assert_func+0x38>)
 8009a34:	e7f4      	b.n	8009a20 <__assert_func+0x14>
 8009a36:	bf00      	nop
 8009a38:	20000018 	.word	0x20000018
 8009a3c:	0800a1ed 	.word	0x0800a1ed
 8009a40:	0800a1bf 	.word	0x0800a1bf
 8009a44:	0800a1b2 	.word	0x0800a1b2

08009a48 <_calloc_r>:
 8009a48:	b570      	push	{r4, r5, r6, lr}
 8009a4a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a4e:	b93c      	cbnz	r4, 8009a60 <_calloc_r+0x18>
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7ff fa8d 	bl	8008f70 <_malloc_r>
 8009a56:	4606      	mov	r6, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <_calloc_r+0x1e>
 8009a5a:	2600      	movs	r6, #0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}
 8009a60:	220c      	movs	r2, #12
 8009a62:	6002      	str	r2, [r0, #0]
 8009a64:	e7f9      	b.n	8009a5a <_calloc_r+0x12>
 8009a66:	462a      	mov	r2, r5
 8009a68:	4621      	mov	r1, r4
 8009a6a:	f7fe fb32 	bl	80080d2 <memset>
 8009a6e:	e7f5      	b.n	8009a5c <_calloc_r+0x14>

08009a70 <__ascii_mbtowc>:
 8009a70:	b082      	sub	sp, #8
 8009a72:	b901      	cbnz	r1, 8009a76 <__ascii_mbtowc+0x6>
 8009a74:	a901      	add	r1, sp, #4
 8009a76:	b142      	cbz	r2, 8009a8a <__ascii_mbtowc+0x1a>
 8009a78:	b14b      	cbz	r3, 8009a8e <__ascii_mbtowc+0x1e>
 8009a7a:	7813      	ldrb	r3, [r2, #0]
 8009a7c:	600b      	str	r3, [r1, #0]
 8009a7e:	7812      	ldrb	r2, [r2, #0]
 8009a80:	1e10      	subs	r0, r2, #0
 8009a82:	bf18      	it	ne
 8009a84:	2001      	movne	r0, #1
 8009a86:	b002      	add	sp, #8
 8009a88:	4770      	bx	lr
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	e7fb      	b.n	8009a86 <__ascii_mbtowc+0x16>
 8009a8e:	f06f 0001 	mvn.w	r0, #1
 8009a92:	e7f8      	b.n	8009a86 <__ascii_mbtowc+0x16>

08009a94 <__ascii_wctomb>:
 8009a94:	4603      	mov	r3, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	b141      	cbz	r1, 8009aac <__ascii_wctomb+0x18>
 8009a9a:	2aff      	cmp	r2, #255	@ 0xff
 8009a9c:	d904      	bls.n	8009aa8 <__ascii_wctomb+0x14>
 8009a9e:	228a      	movs	r2, #138	@ 0x8a
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009aa6:	4770      	bx	lr
 8009aa8:	700a      	strb	r2, [r1, #0]
 8009aaa:	2001      	movs	r0, #1
 8009aac:	4770      	bx	lr
	...

08009ab0 <fiprintf>:
 8009ab0:	b40e      	push	{r1, r2, r3}
 8009ab2:	b503      	push	{r0, r1, lr}
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	ab03      	add	r3, sp, #12
 8009ab8:	4805      	ldr	r0, [pc, #20]	@ (8009ad0 <fiprintf+0x20>)
 8009aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abe:	6800      	ldr	r0, [r0, #0]
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	f000 f837 	bl	8009b34 <_vfiprintf_r>
 8009ac6:	b002      	add	sp, #8
 8009ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009acc:	b003      	add	sp, #12
 8009ace:	4770      	bx	lr
 8009ad0:	20000018 	.word	0x20000018

08009ad4 <abort>:
 8009ad4:	b508      	push	{r3, lr}
 8009ad6:	2006      	movs	r0, #6
 8009ad8:	f000 fa00 	bl	8009edc <raise>
 8009adc:	2001      	movs	r0, #1
 8009ade:	f000 fa29 	bl	8009f34 <_exit>

08009ae2 <__sfputc_r>:
 8009ae2:	6893      	ldr	r3, [r2, #8]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	b410      	push	{r4}
 8009aea:	6093      	str	r3, [r2, #8]
 8009aec:	da08      	bge.n	8009b00 <__sfputc_r+0x1e>
 8009aee:	6994      	ldr	r4, [r2, #24]
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	db01      	blt.n	8009af8 <__sfputc_r+0x16>
 8009af4:	290a      	cmp	r1, #10
 8009af6:	d103      	bne.n	8009b00 <__sfputc_r+0x1e>
 8009af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afc:	f000 b932 	b.w	8009d64 <__swbuf_r>
 8009b00:	6813      	ldr	r3, [r2, #0]
 8009b02:	1c58      	adds	r0, r3, #1
 8009b04:	6010      	str	r0, [r2, #0]
 8009b06:	7019      	strb	r1, [r3, #0]
 8009b08:	4608      	mov	r0, r1
 8009b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <__sfputs_r>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	4606      	mov	r6, r0
 8009b14:	460f      	mov	r7, r1
 8009b16:	4614      	mov	r4, r2
 8009b18:	18d5      	adds	r5, r2, r3
 8009b1a:	42ac      	cmp	r4, r5
 8009b1c:	d101      	bne.n	8009b22 <__sfputs_r+0x12>
 8009b1e:	2000      	movs	r0, #0
 8009b20:	e007      	b.n	8009b32 <__sfputs_r+0x22>
 8009b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b26:	463a      	mov	r2, r7
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7ff ffda 	bl	8009ae2 <__sfputc_r>
 8009b2e:	1c43      	adds	r3, r0, #1
 8009b30:	d1f3      	bne.n	8009b1a <__sfputs_r+0xa>
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b34 <_vfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	460d      	mov	r5, r1
 8009b3a:	b09d      	sub	sp, #116	@ 0x74
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	4698      	mov	r8, r3
 8009b40:	4606      	mov	r6, r0
 8009b42:	b118      	cbz	r0, 8009b4c <_vfiprintf_r+0x18>
 8009b44:	6a03      	ldr	r3, [r0, #32]
 8009b46:	b90b      	cbnz	r3, 8009b4c <_vfiprintf_r+0x18>
 8009b48:	f7fe f996 	bl	8007e78 <__sinit>
 8009b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b4e:	07d9      	lsls	r1, r3, #31
 8009b50:	d405      	bmi.n	8009b5e <_vfiprintf_r+0x2a>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	059a      	lsls	r2, r3, #22
 8009b56:	d402      	bmi.n	8009b5e <_vfiprintf_r+0x2a>
 8009b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b5a:	f7fe fb38 	bl	80081ce <__retarget_lock_acquire_recursive>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	071b      	lsls	r3, r3, #28
 8009b62:	d501      	bpl.n	8009b68 <_vfiprintf_r+0x34>
 8009b64:	692b      	ldr	r3, [r5, #16]
 8009b66:	b99b      	cbnz	r3, 8009b90 <_vfiprintf_r+0x5c>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 f938 	bl	8009de0 <__swsetup_r>
 8009b70:	b170      	cbz	r0, 8009b90 <_vfiprintf_r+0x5c>
 8009b72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b74:	07dc      	lsls	r4, r3, #31
 8009b76:	d504      	bpl.n	8009b82 <_vfiprintf_r+0x4e>
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b7c:	b01d      	add	sp, #116	@ 0x74
 8009b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	0598      	lsls	r0, r3, #22
 8009b86:	d4f7      	bmi.n	8009b78 <_vfiprintf_r+0x44>
 8009b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b8a:	f7fe fb21 	bl	80081d0 <__retarget_lock_release_recursive>
 8009b8e:	e7f3      	b.n	8009b78 <_vfiprintf_r+0x44>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b94:	2320      	movs	r3, #32
 8009b96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9e:	2330      	movs	r3, #48	@ 0x30
 8009ba0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d50 <_vfiprintf_r+0x21c>
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ba8:	f04f 0901 	mov.w	r9, #1
 8009bac:	4623      	mov	r3, r4
 8009bae:	469a      	mov	sl, r3
 8009bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb4:	b10a      	cbz	r2, 8009bba <_vfiprintf_r+0x86>
 8009bb6:	2a25      	cmp	r2, #37	@ 0x25
 8009bb8:	d1f9      	bne.n	8009bae <_vfiprintf_r+0x7a>
 8009bba:	ebba 0b04 	subs.w	fp, sl, r4
 8009bbe:	d00b      	beq.n	8009bd8 <_vfiprintf_r+0xa4>
 8009bc0:	465b      	mov	r3, fp
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ffa2 	bl	8009b10 <__sfputs_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f000 80a7 	beq.w	8009d20 <_vfiprintf_r+0x1ec>
 8009bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bd4:	445a      	add	r2, fp
 8009bd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 809f 	beq.w	8009d20 <_vfiprintf_r+0x1ec>
 8009be2:	2300      	movs	r3, #0
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bec:	f10a 0a01 	add.w	sl, sl, #1
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9307      	str	r3, [sp, #28]
 8009bf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bfa:	4654      	mov	r4, sl
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4853      	ldr	r0, [pc, #332]	@ (8009d50 <_vfiprintf_r+0x21c>)
 8009c04:	f7f6 faf4 	bl	80001f0 <memchr>
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	b9d8      	cbnz	r0, 8009c44 <_vfiprintf_r+0x110>
 8009c0c:	06d1      	lsls	r1, r2, #27
 8009c0e:	bf44      	itt	mi
 8009c10:	2320      	movmi	r3, #32
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c16:	0713      	lsls	r3, r2, #28
 8009c18:	bf44      	itt	mi
 8009c1a:	232b      	movmi	r3, #43	@ 0x2b
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c26:	d015      	beq.n	8009c54 <_vfiprintf_r+0x120>
 8009c28:	9a07      	ldr	r2, [sp, #28]
 8009c2a:	4654      	mov	r4, sl
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4621      	mov	r1, r4
 8009c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c38:	3b30      	subs	r3, #48	@ 0x30
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d94b      	bls.n	8009cd6 <_vfiprintf_r+0x1a2>
 8009c3e:	b1b0      	cbz	r0, 8009c6e <_vfiprintf_r+0x13a>
 8009c40:	9207      	str	r2, [sp, #28]
 8009c42:	e014      	b.n	8009c6e <_vfiprintf_r+0x13a>
 8009c44:	eba0 0308 	sub.w	r3, r0, r8
 8009c48:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	46a2      	mov	sl, r4
 8009c52:	e7d2      	b.n	8009bfa <_vfiprintf_r+0xc6>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d19      	adds	r1, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9103      	str	r1, [sp, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbb      	ittet	lt
 8009c60:	425b      	neglt	r3, r3
 8009c62:	f042 0202 	orrlt.w	r2, r2, #2
 8009c66:	9307      	strge	r3, [sp, #28]
 8009c68:	9307      	strlt	r3, [sp, #28]
 8009c6a:	bfb8      	it	lt
 8009c6c:	9204      	strlt	r2, [sp, #16]
 8009c6e:	7823      	ldrb	r3, [r4, #0]
 8009c70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c72:	d10a      	bne.n	8009c8a <_vfiprintf_r+0x156>
 8009c74:	7863      	ldrb	r3, [r4, #1]
 8009c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c78:	d132      	bne.n	8009ce0 <_vfiprintf_r+0x1ac>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	1d1a      	adds	r2, r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9203      	str	r2, [sp, #12]
 8009c82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c86:	3402      	adds	r4, #2
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d60 <_vfiprintf_r+0x22c>
 8009c8e:	7821      	ldrb	r1, [r4, #0]
 8009c90:	2203      	movs	r2, #3
 8009c92:	4650      	mov	r0, sl
 8009c94:	f7f6 faac 	bl	80001f0 <memchr>
 8009c98:	b138      	cbz	r0, 8009caa <_vfiprintf_r+0x176>
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ca0:	2240      	movs	r2, #64	@ 0x40
 8009ca2:	4082      	lsls	r2, r0
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	3401      	adds	r4, #1
 8009ca8:	9304      	str	r3, [sp, #16]
 8009caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cae:	4829      	ldr	r0, [pc, #164]	@ (8009d54 <_vfiprintf_r+0x220>)
 8009cb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cb4:	2206      	movs	r2, #6
 8009cb6:	f7f6 fa9b 	bl	80001f0 <memchr>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d03f      	beq.n	8009d3e <_vfiprintf_r+0x20a>
 8009cbe:	4b26      	ldr	r3, [pc, #152]	@ (8009d58 <_vfiprintf_r+0x224>)
 8009cc0:	bb1b      	cbnz	r3, 8009d0a <_vfiprintf_r+0x1d6>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	3307      	adds	r3, #7
 8009cc6:	f023 0307 	bic.w	r3, r3, #7
 8009cca:	3308      	adds	r3, #8
 8009ccc:	9303      	str	r3, [sp, #12]
 8009cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd0:	443b      	add	r3, r7
 8009cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cd4:	e76a      	b.n	8009bac <_vfiprintf_r+0x78>
 8009cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cda:	460c      	mov	r4, r1
 8009cdc:	2001      	movs	r0, #1
 8009cde:	e7a8      	b.n	8009c32 <_vfiprintf_r+0xfe>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	3401      	adds	r4, #1
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	f04f 0c0a 	mov.w	ip, #10
 8009cec:	4620      	mov	r0, r4
 8009cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf2:	3a30      	subs	r2, #48	@ 0x30
 8009cf4:	2a09      	cmp	r2, #9
 8009cf6:	d903      	bls.n	8009d00 <_vfiprintf_r+0x1cc>
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0c6      	beq.n	8009c8a <_vfiprintf_r+0x156>
 8009cfc:	9105      	str	r1, [sp, #20]
 8009cfe:	e7c4      	b.n	8009c8a <_vfiprintf_r+0x156>
 8009d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d04:	4604      	mov	r4, r0
 8009d06:	2301      	movs	r3, #1
 8009d08:	e7f0      	b.n	8009cec <_vfiprintf_r+0x1b8>
 8009d0a:	ab03      	add	r3, sp, #12
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	462a      	mov	r2, r5
 8009d10:	4b12      	ldr	r3, [pc, #72]	@ (8009d5c <_vfiprintf_r+0x228>)
 8009d12:	a904      	add	r1, sp, #16
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7fd fc6b 	bl	80075f0 <_printf_float>
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	1c78      	adds	r0, r7, #1
 8009d1e:	d1d6      	bne.n	8009cce <_vfiprintf_r+0x19a>
 8009d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d22:	07d9      	lsls	r1, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <_vfiprintf_r+0x1fe>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	059a      	lsls	r2, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_vfiprintf_r+0x1fe>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d2e:	f7fe fa4f 	bl	80081d0 <__retarget_lock_release_recursive>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	065b      	lsls	r3, r3, #25
 8009d36:	f53f af1f 	bmi.w	8009b78 <_vfiprintf_r+0x44>
 8009d3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d3c:	e71e      	b.n	8009b7c <_vfiprintf_r+0x48>
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	462a      	mov	r2, r5
 8009d44:	4b05      	ldr	r3, [pc, #20]	@ (8009d5c <_vfiprintf_r+0x228>)
 8009d46:	a904      	add	r1, sp, #16
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7fd fee9 	bl	8007b20 <_printf_i>
 8009d4e:	e7e4      	b.n	8009d1a <_vfiprintf_r+0x1e6>
 8009d50:	0800a2ef 	.word	0x0800a2ef
 8009d54:	0800a2f9 	.word	0x0800a2f9
 8009d58:	080075f1 	.word	0x080075f1
 8009d5c:	08009b11 	.word	0x08009b11
 8009d60:	0800a2f5 	.word	0x0800a2f5

08009d64 <__swbuf_r>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	460e      	mov	r6, r1
 8009d68:	4614      	mov	r4, r2
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	b118      	cbz	r0, 8009d76 <__swbuf_r+0x12>
 8009d6e:	6a03      	ldr	r3, [r0, #32]
 8009d70:	b90b      	cbnz	r3, 8009d76 <__swbuf_r+0x12>
 8009d72:	f7fe f881 	bl	8007e78 <__sinit>
 8009d76:	69a3      	ldr	r3, [r4, #24]
 8009d78:	60a3      	str	r3, [r4, #8]
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	071a      	lsls	r2, r3, #28
 8009d7e:	d501      	bpl.n	8009d84 <__swbuf_r+0x20>
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	b943      	cbnz	r3, 8009d96 <__swbuf_r+0x32>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 f82a 	bl	8009de0 <__swsetup_r>
 8009d8c:	b118      	cbz	r0, 8009d96 <__swbuf_r+0x32>
 8009d8e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009d92:	4638      	mov	r0, r7
 8009d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	6922      	ldr	r2, [r4, #16]
 8009d9a:	1a98      	subs	r0, r3, r2
 8009d9c:	6963      	ldr	r3, [r4, #20]
 8009d9e:	b2f6      	uxtb	r6, r6
 8009da0:	4283      	cmp	r3, r0
 8009da2:	4637      	mov	r7, r6
 8009da4:	dc05      	bgt.n	8009db2 <__swbuf_r+0x4e>
 8009da6:	4621      	mov	r1, r4
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7ff fd73 	bl	8009894 <_fflush_r>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d1ed      	bne.n	8009d8e <__swbuf_r+0x2a>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	701e      	strb	r6, [r3, #0]
 8009dc0:	6962      	ldr	r2, [r4, #20]
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d004      	beq.n	8009dd2 <__swbuf_r+0x6e>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	07db      	lsls	r3, r3, #31
 8009dcc:	d5e1      	bpl.n	8009d92 <__swbuf_r+0x2e>
 8009dce:	2e0a      	cmp	r6, #10
 8009dd0:	d1df      	bne.n	8009d92 <__swbuf_r+0x2e>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f7ff fd5d 	bl	8009894 <_fflush_r>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d0d9      	beq.n	8009d92 <__swbuf_r+0x2e>
 8009dde:	e7d6      	b.n	8009d8e <__swbuf_r+0x2a>

08009de0 <__swsetup_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4b29      	ldr	r3, [pc, #164]	@ (8009e88 <__swsetup_r+0xa8>)
 8009de4:	4605      	mov	r5, r0
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	460c      	mov	r4, r1
 8009dea:	b118      	cbz	r0, 8009df4 <__swsetup_r+0x14>
 8009dec:	6a03      	ldr	r3, [r0, #32]
 8009dee:	b90b      	cbnz	r3, 8009df4 <__swsetup_r+0x14>
 8009df0:	f7fe f842 	bl	8007e78 <__sinit>
 8009df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009df8:	0719      	lsls	r1, r3, #28
 8009dfa:	d422      	bmi.n	8009e42 <__swsetup_r+0x62>
 8009dfc:	06da      	lsls	r2, r3, #27
 8009dfe:	d407      	bmi.n	8009e10 <__swsetup_r+0x30>
 8009e00:	2209      	movs	r2, #9
 8009e02:	602a      	str	r2, [r5, #0]
 8009e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e08:	81a3      	strh	r3, [r4, #12]
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e0e:	e033      	b.n	8009e78 <__swsetup_r+0x98>
 8009e10:	0758      	lsls	r0, r3, #29
 8009e12:	d512      	bpl.n	8009e3a <__swsetup_r+0x5a>
 8009e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e16:	b141      	cbz	r1, 8009e2a <__swsetup_r+0x4a>
 8009e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e1c:	4299      	cmp	r1, r3
 8009e1e:	d002      	beq.n	8009e26 <__swsetup_r+0x46>
 8009e20:	4628      	mov	r0, r5
 8009e22:	f7ff f831 	bl	8008e88 <_free_r>
 8009e26:	2300      	movs	r3, #0
 8009e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	2300      	movs	r3, #0
 8009e34:	6063      	str	r3, [r4, #4]
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	f043 0308 	orr.w	r3, r3, #8
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	b94b      	cbnz	r3, 8009e5a <__swsetup_r+0x7a>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e50:	d003      	beq.n	8009e5a <__swsetup_r+0x7a>
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f7ff fd6b 	bl	8009930 <__smakebuf_r>
 8009e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5e:	f013 0201 	ands.w	r2, r3, #1
 8009e62:	d00a      	beq.n	8009e7a <__swsetup_r+0x9a>
 8009e64:	2200      	movs	r2, #0
 8009e66:	60a2      	str	r2, [r4, #8]
 8009e68:	6962      	ldr	r2, [r4, #20]
 8009e6a:	4252      	negs	r2, r2
 8009e6c:	61a2      	str	r2, [r4, #24]
 8009e6e:	6922      	ldr	r2, [r4, #16]
 8009e70:	b942      	cbnz	r2, 8009e84 <__swsetup_r+0xa4>
 8009e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e76:	d1c5      	bne.n	8009e04 <__swsetup_r+0x24>
 8009e78:	bd38      	pop	{r3, r4, r5, pc}
 8009e7a:	0799      	lsls	r1, r3, #30
 8009e7c:	bf58      	it	pl
 8009e7e:	6962      	ldrpl	r2, [r4, #20]
 8009e80:	60a2      	str	r2, [r4, #8]
 8009e82:	e7f4      	b.n	8009e6e <__swsetup_r+0x8e>
 8009e84:	2000      	movs	r0, #0
 8009e86:	e7f7      	b.n	8009e78 <__swsetup_r+0x98>
 8009e88:	20000018 	.word	0x20000018

08009e8c <_raise_r>:
 8009e8c:	291f      	cmp	r1, #31
 8009e8e:	b538      	push	{r3, r4, r5, lr}
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	d904      	bls.n	8009ea0 <_raise_r+0x14>
 8009e96:	2316      	movs	r3, #22
 8009e98:	6003      	str	r3, [r0, #0]
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ea2:	b112      	cbz	r2, 8009eaa <_raise_r+0x1e>
 8009ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ea8:	b94b      	cbnz	r3, 8009ebe <_raise_r+0x32>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f000 f830 	bl	8009f10 <_getpid_r>
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	4601      	mov	r1, r0
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eba:	f000 b817 	b.w	8009eec <_kill_r>
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d00a      	beq.n	8009ed8 <_raise_r+0x4c>
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	d103      	bne.n	8009ece <_raise_r+0x42>
 8009ec6:	2316      	movs	r3, #22
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	2001      	movs	r0, #1
 8009ecc:	e7e7      	b.n	8009e9e <_raise_r+0x12>
 8009ece:	2100      	movs	r1, #0
 8009ed0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4798      	blx	r3
 8009ed8:	2000      	movs	r0, #0
 8009eda:	e7e0      	b.n	8009e9e <_raise_r+0x12>

08009edc <raise>:
 8009edc:	4b02      	ldr	r3, [pc, #8]	@ (8009ee8 <raise+0xc>)
 8009ede:	4601      	mov	r1, r0
 8009ee0:	6818      	ldr	r0, [r3, #0]
 8009ee2:	f7ff bfd3 	b.w	8009e8c <_raise_r>
 8009ee6:	bf00      	nop
 8009ee8:	20000018 	.word	0x20000018

08009eec <_kill_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d07      	ldr	r5, [pc, #28]	@ (8009f0c <_kill_r+0x20>)
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	f000 f813 	bl	8009f24 <_kill>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	d102      	bne.n	8009f08 <_kill_r+0x1c>
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	b103      	cbz	r3, 8009f08 <_kill_r+0x1c>
 8009f06:	6023      	str	r3, [r4, #0]
 8009f08:	bd38      	pop	{r3, r4, r5, pc}
 8009f0a:	bf00      	nop
 8009f0c:	2000052c 	.word	0x2000052c

08009f10 <_getpid_r>:
 8009f10:	f000 b800 	b.w	8009f14 <_getpid>

08009f14 <_getpid>:
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <_getpid+0xc>)
 8009f16:	2258      	movs	r2, #88	@ 0x58
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f1e:	4770      	bx	lr
 8009f20:	2000052c 	.word	0x2000052c

08009f24 <_kill>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	@ (8009f30 <_kill+0xc>)
 8009f26:	2258      	movs	r2, #88	@ 0x58
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f2e:	4770      	bx	lr
 8009f30:	2000052c 	.word	0x2000052c

08009f34 <_exit>:
 8009f34:	e7fe      	b.n	8009f34 <_exit>
	...

08009f38 <_init>:
 8009f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3a:	bf00      	nop
 8009f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3e:	bc08      	pop	{r3}
 8009f40:	469e      	mov	lr, r3
 8009f42:	4770      	bx	lr

08009f44 <_fini>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	bf00      	nop
 8009f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4a:	bc08      	pop	{r3}
 8009f4c:	469e      	mov	lr, r3
 8009f4e:	4770      	bx	lr
