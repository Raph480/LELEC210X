{"gr::limesdr_fpga::sink_fpga": "\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of sink_fpga.\n\nTo avoid accidental use of raw pointers, sink_fpga's constructor is private. limesdr_fpga::sink_fpga::make is the public interface for creating new instances.\n\nArgs:\n    serial : Device serial number. Cannot be left blank.\n    channel_mode : Channel and mode selection A(1), B(2), (A+B)MIMO(3).\n    filename : Path to file if file switch is turned on.\n    length_tag_name : Name of stream burst length tag", "gr::limesdr_fpga::sink_fpga::set_center_freq": "Set center frequency", "gr::limesdr_fpga::sink_fpga::set_antenna": "Set which antenna is used", "gr::limesdr_fpga::sink_fpga::set_nco": "Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.", "gr::limesdr_fpga::sink_fpga::set_bandwidth": "Set analog filters.", "gr::limesdr_fpga::sink_fpga::set_digital_filter": "Set digital filters (GFIR).", "gr::limesdr_fpga::sink_fpga::set_gain": "Set the combined gain value in dB", "gr::limesdr_fpga::sink_fpga::set_sample_rate": "Set the same sample rate for both channels.", "gr::limesdr_fpga::sink_fpga::set_oversampling": "Set oversampling for both channels.", "gr::limesdr_fpga::sink_fpga::calibrate": "Perform device calibration.", "gr::limesdr_fpga::sink_fpga::set_buffer_size": "Set stream buffer size", "gr::limesdr_fpga::sink_fpga::set_tcxo_dac": "Set TCXO DAC.", "gr::limesdr_fpga::sink_fpga::write_lms_reg": "Write LMS register\n\n\nWrites a parameter by calling LMS_WriteLMSReg()", "gr::limesdr_fpga::sink_fpga::set_gpio_dir": "Set GPIO direction\n\n\nSet GPIO direction by calling LMS_GPIODirWrite()", "gr::limesdr_fpga::sink_fpga::write_gpio": "Write GPIO outputs\n\n\nWrite GPIO outputs by calling LMS_GPIOWrite()", "gr::limesdr_fpga::sink_fpga::read_gpio": "Read GPIO inputs\n\n\nRead GPIO inputs by calling LMS_GPIORead()", "gr::limesdr_fpga::sink_fpga::make": "\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of sink_fpga.\n\nTo avoid accidental use of raw pointers, sink_fpga's constructor is private. limesdr_fpga::sink_fpga::make is the public interface for creating new instances.\n\nArgs:\n    serial : Device serial number. Cannot be left blank.\n    channel_mode : Channel and mode selection A(1), B(2), (A+B)MIMO(3).\n    filename : Path to file if file switch is turned on.\n    length_tag_name : Name of stream burst length tag", "gr::limesdr_fpga::source_fpga": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of limesdr_fpga::source_fpga.\n\nTo avoid accidental use of raw pointers, limesdr_fpga::source_fpga's constructor is in a private implementation class. limesdr_fpga::source_fpga::make is the public interface for creating new instances.\n\nArgs:\n    serial : Device serial number. Cannot be left blank.\n    channel_mode : Channel and mode selection A(1), B(2), (A+B)MIMO(3).\n    filename : Path to file if file switch is turned on.\n    align_ch_phase : Perform MIMO phase alignment by calling AlignRxRF() as described in", "gr::limesdr_fpga::source_fpga::set_center_freq": "Set center frequency", "gr::limesdr_fpga::source_fpga::set_antenna": "Set which antenna is used", "gr::limesdr_fpga::source_fpga::set_nco": "Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.", "gr::limesdr_fpga::source_fpga::set_bandwidth": "Set analog filters.", "gr::limesdr_fpga::source_fpga::set_digital_filter": "Set digital filters (GFIR).", "gr::limesdr_fpga::source_fpga::set_gain": "Set the combined gain value in dB", "gr::limesdr_fpga::source_fpga::set_sample_rate": "Set the same sample rate for both channels.", "gr::limesdr_fpga::source_fpga::set_oversampling": "Set oversampling for both channels.", "gr::limesdr_fpga::source_fpga::calibrate": "Perform device calibration.", "gr::limesdr_fpga::source_fpga::set_buffer_size": "Set stream buffer size", "gr::limesdr_fpga::source_fpga::set_tcxo_dac": "Set TCXO DAC.", "gr::limesdr_fpga::source_fpga::write_lms_reg": "Write LMS register\n\n\nWrites a parameter by calling LMS_WriteLMSReg()", "gr::limesdr_fpga::source_fpga::set_dspcfg_preamble": "Enable the Preamble Detector in the datapath.", "gr::limesdr_fpga::source_fpga::get_dspcfg_long_sum": "", "gr::limesdr_fpga::source_fpga::get_dspcfg_short_sum": "", "gr::limesdr_fpga::source_fpga::set_gpio_dir": "Set GPIO direction\n\n\nSet GPIO direction by calling LMS_GPIODirWrite()", "gr::limesdr_fpga::source_fpga::write_gpio": "Write GPIO outputs\n\n\nWrite GPIO outputs by calling LMS_GPIOWrite()", "gr::limesdr_fpga::source_fpga::read_gpio": "Read GPIO inputs\n\n\nRead GPIO inputs by calling LMS_GPIORead()", "gr::limesdr_fpga::source_fpga::make": "<+description of block+>\n\nConstructor Specific Documentation:\n\nReturn a shared_ptr to a new instance of limesdr_fpga::source_fpga.\n\nTo avoid accidental use of raw pointers, limesdr_fpga::source_fpga's constructor is in a private implementation class. limesdr_fpga::source_fpga::make is the public interface for creating new instances.\n\nArgs:\n    serial : Device serial number. Cannot be left blank.\n    channel_mode : Channel and mode selection A(1), B(2), (A+B)MIMO(3).\n    filename : Path to file if file switch is turned on.\n    align_ch_phase : Perform MIMO phase alignment by calling AlignRxRF() as described in", "set_limesuite_logger": "", "suppress_limesuite_logging": "", "device_handler_fpga": "", "device_handler_fpga::device_handler_fpga": "", "device_handler_fpga::operator=": "", "device_handler_fpga::getInstance": "", "device_handler_fpga::~device_handler_fpga": "", "device_handler_fpga::error": "Print device error and close all devices.", "device_handler_fpga::get_device": "Get device connection handler in order to configure it.", "device_handler_fpga::open_device": "Connect to the device and create singletone.", "device_handler_fpga::close_device": "Disconnect from the device.", "device_handler_fpga::close_all_devices": "Disconnect from all devices.", "device_handler_fpga::check_blocks": "Check what blocks are used for single device.", "device_handler_fpga::settings_from_file": "Load settings from .ini file.", "device_handler_fpga::enable_channels": "Set used channels", "device_handler_fpga::set_samp_rate": "Set the same sample rate for both channels.", "device_handler_fpga::set_oversampling": "Set oversampling value for both channels", "device_handler_fpga::set_rf_freq": "Set RF frequency of both channels (RX and TX separately).", "device_handler_fpga::calibrate": "Perform device calibration.", "device_handler_fpga::set_antenna": "Set which antenna is used", "device_handler_fpga::set_analog_filter": "Set analog filters.", "device_handler_fpga::set_digital_filter": "Set digital filters (GFIR).", "device_handler_fpga::set_gain": "Set the combined gain value in dB This function computes and sets the optimal gain values of various amplifiers that are present in the device based on desired gain value in dB.", "device_handler_fpga::set_nco": "Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.", "device_handler_fpga::disable_DC_corrections": "Disables LimeSDR boards DC corrections", "device_handler_fpga::set_tcxo_dac": "Set TCXO DAC.", "device_handler_fpga::set_rfe_device": "Sets up LimeRFE device pointer so that automatic channel configuration could be made", "device_handler_fpga::update_rfe_channels": "Assigns configured LimeSDR channels to LimeRFE for automatic channel switching", "device_handler_fpga::read_spi_reg_bits": "", "device_handler_fpga::modify_spi_reg_bits": "", "device_handler_fpga::write_lms_reg": "Writes an LMS register by calling LMS_WriteLMSReg()", "device_handler_fpga::set_dspcfg_preamble": "Enable the Preamble Detector in the datapath.", "device_handler_fpga::set_dspcfg_PASSTHROUGH_LEN": "Set the number of samples to let through the Preamble Detector once the threshold is reached.", "device_handler_fpga::set_dspcfg_THRESHOLD": "Set the Preamble Detector threshold.", "device_handler_fpga::set_dspcfg_clear_rs": "", "device_handler_fpga::get_dspcfg_short_sum": "", "device_handler_fpga::get_dspcfg_long_sum": "", "device_handler_fpga::set_gpio_dir": "", "device_handler_fpga::write_gpio": "", "device_handler_fpga::read_gpio": "", "gr::limesdr_fpga::sink_fpga_impl": "", "gr::limesdr_fpga::sink_fpga_impl::work_tags": "", "gr::limesdr_fpga::sink_fpga_impl::print_stream_stats": "", "gr::limesdr_fpga::sink_fpga_impl::sink_fpga_impl": "", "gr::limesdr_fpga::sink_fpga_impl::~sink_fpga_impl": "", "gr::limesdr_fpga::sink_fpga_impl::work": "", "gr::limesdr_fpga::sink_fpga_impl::start": "", "gr::limesdr_fpga::sink_fpga_impl::stop": "", "gr::limesdr_fpga::sink_fpga_impl::args_to_io_signature": "", "gr::limesdr_fpga::sink_fpga_impl::init_stream": "", "gr::limesdr_fpga::sink_fpga_impl::release_stream": "", "gr::limesdr_fpga::sink_fpga_impl::set_center_freq": "Set center frequency", "gr::limesdr_fpga::sink_fpga_impl::set_antenna": "Set which antenna is used", "gr::limesdr_fpga::sink_fpga_impl::toggle_pa_path": "", "gr::limesdr_fpga::sink_fpga_impl::set_nco": "Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.", "gr::limesdr_fpga::sink_fpga_impl::set_bandwidth": "Set analog filters.", "gr::limesdr_fpga::sink_fpga_impl::set_digital_filter": "Set digital filters (GFIR).", "gr::limesdr_fpga::sink_fpga_impl::set_gain": "Set the combined gain value in dB", "gr::limesdr_fpga::sink_fpga_impl::set_sample_rate": "Set the same sample rate for both channels.", "gr::limesdr_fpga::sink_fpga_impl::set_oversampling": "Set oversampling for both channels.", "gr::limesdr_fpga::sink_fpga_impl::set_buffer_size": "Set stream buffer size", "gr::limesdr_fpga::sink_fpga_impl::calibrate": "Perform device calibration.", "gr::limesdr_fpga::sink_fpga_impl::set_tcxo_dac": "Set TCXO DAC.", "gr::limesdr_fpga::sink_fpga_impl::write_lms_reg": "Write LMS register\n\n\nWrites a parameter by calling LMS_WriteLMSReg()", "gr::limesdr_fpga::sink_fpga_impl::set_gpio_dir": "Set GPIO direction\n\n\nSet GPIO direction by calling LMS_GPIODirWrite()", "gr::limesdr_fpga::sink_fpga_impl::write_gpio": "Write GPIO outputs\n\n\nWrite GPIO outputs by calling LMS_GPIOWrite()", "gr::limesdr_fpga::sink_fpga_impl::read_gpio": "Read GPIO inputs\n\n\nRead GPIO inputs by calling LMS_GPIORead()", "gr::limesdr_fpga::source_fpga_impl": "", "gr::limesdr_fpga::source_fpga_impl::print_stream_stats": "", "gr::limesdr_fpga::source_fpga_impl::add_time_tag": "", "gr::limesdr_fpga::source_fpga_impl::source_fpga_impl": "", "gr::limesdr_fpga::source_fpga_impl::~source_fpga_impl": "", "gr::limesdr_fpga::source_fpga_impl::start": "", "gr::limesdr_fpga::source_fpga_impl::stop": "", "gr::limesdr_fpga::source_fpga_impl::work": "", "gr::limesdr_fpga::source_fpga_impl::args_to_io_signature": "", "gr::limesdr_fpga::source_fpga_impl::init_stream": "", "gr::limesdr_fpga::source_fpga_impl::release_stream": "", "gr::limesdr_fpga::source_fpga_impl::set_center_freq": "Set center frequency", "gr::limesdr_fpga::source_fpga_impl::set_antenna": "Set which antenna is used", "gr::limesdr_fpga::source_fpga_impl::set_nco": "Set NCO (numerically controlled oscillator). By selecting NCO frequency configure NCO. When NCO frequency is 0, NCO is off.", "gr::limesdr_fpga::source_fpga_impl::set_bandwidth": "Set analog filters.", "gr::limesdr_fpga::source_fpga_impl::set_digital_filter": "Set digital filters (GFIR).", "gr::limesdr_fpga::source_fpga_impl::set_gain": "Set the combined gain value in dB", "gr::limesdr_fpga::source_fpga_impl::set_sample_rate": "Set the same sample rate for both channels.", "gr::limesdr_fpga::source_fpga_impl::set_oversampling": "Set oversampling for both channels.", "gr::limesdr_fpga::source_fpga_impl::set_buffer_size": "Set stream buffer size", "gr::limesdr_fpga::source_fpga_impl::calibrate": "Perform device calibration.", "gr::limesdr_fpga::source_fpga_impl::set_tcxo_dac": "Set TCXO DAC.", "gr::limesdr_fpga::source_fpga_impl::write_lms_reg": "Write LMS register\n\n\nWrites a parameter by calling LMS_WriteLMSReg()", "gr::limesdr_fpga::source_fpga_impl::set_gpio_dir": "Set GPIO direction\n\n\nSet GPIO direction by calling LMS_GPIODirWrite()", "gr::limesdr_fpga::source_fpga_impl::write_gpio": "Write GPIO outputs\n\n\nWrite GPIO outputs by calling LMS_GPIOWrite()", "gr::limesdr_fpga::source_fpga_impl::read_gpio": "Read GPIO inputs\n\n\nRead GPIO inputs by calling LMS_GPIORead()", "gr::limesdr_fpga::source_fpga_impl::set_dspcfg_preamble": "Enable the Preamble Detector in the datapath.", "gr::limesdr_fpga::source_fpga_impl::get_dspcfg_short_sum": "", "gr::limesdr_fpga::source_fpga_impl::get_dspcfg_long_sum": ""}